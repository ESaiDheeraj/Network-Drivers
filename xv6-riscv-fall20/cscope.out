cscope 15 $HOME/OS3500L/OS-Project/xv6-riscv-fall19               0000425266
	@kernel/bio.c

17 
	~"ty≥s.h
"

18 
	~"∑øm.h
"

19 
	~"•ölock.h
"

20 
	~"¶ì∂ock.h
"

21 
	~"riscv.h
"

22 
	~"defs.h
"

23 
	~"fs.h
"

24 
	~"buf.h
"

27 
•ölock
 
	mlock
;

28 
buf
 
	mbuf
[
NBUF
];

32 
buf
 
	mhód
;

33 } 
	gbˇche
;

36 
	$böô
()

38 
buf
 *
b
;

40 
	`öôlock
(&
bˇche
.
lock
, "bcache");

43 
bˇche
.
hód
.
¥ev
 = &bcache.head;

44 
bˇche
.
hód
.
√xt
 = &bcache.head;

45 
b
 = 
bˇche
.
buf
; b < bˇche.buf+
NBUF
; b++){

46 
b
->
√xt
 = 
bˇche
.
hód
.next;

47 
b
->
¥ev
 = &
bˇche
.
hód
;

48 
	`öô¶ì∂ock
(&
b
->
lock
, "buffer");

49 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

50 
bˇche
.
hód
.
√xt
 = 
b
;

52 
	}
}

57 
buf
*

58 
	$bgë
(
uöt
 
dev
, uöà
blockno
)

60 
buf
 *
b
;

62 
	`acquúe
(&
bˇche
.
lock
);

65 
b
 = 
bˇche
.
hód
.
√xt
; b != &bcache.head; b = b->next){

66 if(
b
->
dev
 =dev && b->
blockno
 == blockno){

67 
b
->
ªf˙t
++;

68 
	`ªÀa£
(&
bˇche
.
lock
);

69 
	`acquúe¶ìp
(&
b
->
lock
);

70  
b
;

75 
b
 = 
bˇche
.
hód
.
¥ev
; b != &bcache.head; b = b->prev){

76 if(
b
->
ªf˙t
 == 0) {

77 
b
->
dev
 = dev;

78 
b
->
blockno
 = blockno;

79 
b
->
vÆid
 = 0;

80 
b
->
ªf˙t
 = 1;

81 
	`ªÀa£
(&
bˇche
.
lock
);

82 
	`acquúe¶ìp
(&
b
->
lock
);

83  
b
;

86 
	`∑nic
("bget:Ço buffers");

87 
	}
}

90 
buf
*

91 
	$bªad
(
uöt
 
dev
, uöà
blockno
)

93 
buf
 *
b
;

95 
b
 = 
	`bgë
(
dev
, 
blockno
);

96 if(!
b
->
vÆid
) {

97 
	`vútio_disk_rw
(
b
->
dev
, b, 0);

98 
b
->
vÆid
 = 1;

100  
b
;

101 
	}
}

105 
	$bwrôe
(
buf
 *
b
)

107 if(!
	`hﬁdög¶ìp
(&
b
->
lock
))

108 
	`∑nic
("bwrite");

109 
	`vútio_disk_rw
(
b
->
dev
, b, 1);

110 
	}
}

115 
	$bªl£
(
buf
 *
b
)

117 if(!
	`hﬁdög¶ìp
(&
b
->
lock
))

118 
	`∑nic
("brelse");

120 
	`ªÀa£¶ìp
(&
b
->
lock
);

122 
	`acquúe
(&
bˇche
.
lock
);

123 
b
->
ªf˙t
--;

124 i‡(
b
->
ªf˙t
 == 0) {

126 
b
->
√xt
->
¥ev
 = b->prev;

127 
b
->
¥ev
->
√xt
 = b->next;

128 
b
->
√xt
 = 
bˇche
.
hód
.next;

129 
b
->
¥ev
 = &
bˇche
.
hód
;

130 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

131 
bˇche
.
hód
.
√xt
 = 
b
;

134 
	`ªÀa£
(&
bˇche
.
lock
);

135 
	}
}

138 
	$bpö
(
buf
 *
b
) {

139 
	`acquúe
(&
bˇche
.
lock
);

140 
b
->
ªf˙t
++;

141 
	`ªÀa£
(&
bˇche
.
lock
);

142 
	}
}

145 
	$bu≈ö
(
buf
 *
b
) {

146 
	`acquúe
(&
bˇche
.
lock
);

147 
b
->
ªf˙t
--;

148 
	`ªÀa£
(&
bˇche
.
lock
);

149 
	}
}

	@kernel/buddy.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"•ölock.h
"

5 
	~"riscv.h
"

6 
	~"defs.h
"

10 
	gnsizes
;

12 
	#LEAF_SIZE
 16

13 
	#MAXSIZE
 (
nsizes
-1)

14 
	#BLK_SIZE
(
k
Ë((1L << (k)Ë* 
LEAF_SIZE
)

15 
	#HEAP_SIZE
 
	`BLK_SIZE
(
MAXSIZE
)

	)

16 
	#NBLK
(
k
Ë(1 << (
MAXSIZE
-k))

17 
	#ROUNDUP
(
n
,
sz
) (((((n)-1)/(sz))+1)*(sz))

18 

	)

19 
li°
 
	tBd_li°
;

27 
	ssz_öfo
 {

28 
Bd_li°
 
	m‰ì
;

29 *
	mÆloc
;

30 *
	m•lô
;

32 
sz_öfo
 
	tSz_öfo
;

34 
Sz_öfo
 *
	gbd_sizes
;

35 *
	gbd_ba£
;

36 
•ölock
 
	glock
;

39 
	$bô_is£t
(*
¨øy
, 
ödex
) {

40 
b
 = 
¨øy
[
ödex
/8];

41 
m
 = (1 << (
ödex
 % 8));

42  (
b
 & 
m
) == m;

43 
	}
}

46 
	$bô_£t
(*
¨øy
, 
ödex
) {

47 
b
 = 
¨øy
[
ödex
/8];

48 
m
 = (1 << (
ödex
 % 8));

49 
¨øy
[
ödex
/8] = (
b
 | 
m
);

50 
	}
}

53 
	$bô_˛ór
(*
¨øy
, 
ödex
) {

54 
b
 = 
¨øy
[
ödex
/8];

55 
m
 = (1 << (
ödex
 % 8));

56 
¨øy
[
ödex
/8] = (
b
 & ~
m
);

57 
	}
}

61 
	$bd_¥öt_ve˘‹
(*
ve˘‹
, 
Àn
) {

62 
œ°
, 
lb
;

64 
œ°
 = 1;

65 
lb
 = 0;

66 
b
 = 0; b < 
Àn
; b++) {

67 i‡(
œ°
 =
	`bô_is£t
(
ve˘‹
, 
b
))

69 if(
œ°
 == 1)

70 
	`¥ötf
(" [%d, %d)", 
lb
, 
b
);

71 
lb
 = 
b
;

72 
œ°
 = 
	`bô_is£t
(
ve˘‹
, 
b
);

74 if(
lb
 =0 || 
œ°
 == 1) {

75 
	`¥ötf
(" [%d, %d)", 
lb
, 
Àn
);

77 
	`¥ötf
("\n");

78 
	}
}

82 
	$bd_¥öt
() {

83 
k
 = 0; k < 
nsizes
; k++) {

84 
	`¥ötf
("sizê%d (blksz %dÇblk %d): fªêli°: ", 
k
, 
	`BLK_SIZE
(k), 
	`NBLK
(k));

85 
	`l°_¥öt
(&
bd_sizes
[
k
].
‰ì
);

86 
	`¥ötf
("álloc:");

87 
	`bd_¥öt_ve˘‹
(
bd_sizes
[
k
].
Æloc
, 
	`NBLK
(k));

88 if(
k
 > 0) {

89 
	`¥ötf
(" split:");

90 
	`bd_¥öt_ve˘‹
(
bd_sizes
[
k
].
•lô
, 
	`NBLK
(k));

93 
	}
}

97 
	$fú°k
(
uöt64
 
n
) {

98 
k
 = 0;

99 
uöt64
 
size
 = 
LEAF_SIZE
;

101 
size
 < 
n
) {

102 
k
++;

103 
size
 *= 2;

105  
k
;

106 
	}
}

110 
	$blk_ödex
(
k
, *
p
) {

111 
n
 = 
p
 - (*Ë
bd_ba£
;

112  
n
 / 
	`BLK_SIZE
(
k
);

113 
	}
}

116 *
	$addr
(
k
, 
bi
) {

117 
n
 = 
bi
 * 
	`BLK_SIZE
(
k
);

118  (*Ë
bd_ba£
 + 
n
;

119 
	}
}

123 
	$bd_mÆloc
(
uöt64
 
nbyãs
)

125 
fk
, 
k
;

127 
	`acquúe
(&
lock
);

130 
fk
 = 
	`fú°k
(
nbyãs
);

131 
k
 = 
fk
; k < 
nsizes
; k++) {

132 if(!
	`l°_em±y
(&
bd_sizes
[
k
].
‰ì
))

135 if(
k
 >
nsizes
) {

136 
	`ªÀa£
(&
lock
);

141 *
p
 = 
	`l°_p›
(&
bd_sizes
[
k
].
‰ì
);

142 
	`bô_£t
(
bd_sizes
[
k
].
Æloc
, 
	`blk_ödex
(k, 
p
));

143 ; 
k
 > 
fk
; k--) {

146 *
q
 = 
p
 + 
	`BLK_SIZE
(
k
-1);

147 
	`bô_£t
(
bd_sizes
[
k
].
•lô
, 
	`blk_ödex
(k, 
p
));

148 
	`bô_£t
(
bd_sizes
[
k
-1].
Æloc
, 
	`blk_ödex
(k-1, 
p
));

149 
	`l°_push
(&
bd_sizes
[
k
-1].
‰ì
, 
q
);

151 
	`ªÀa£
(&
lock
);

153  
p
;

154 
	}
}

158 
	$size
(*
p
) {

159 
k
 = 0; k < 
nsizes
; k++) {

160 if(
	`bô_is£t
(
bd_sizes
[
k
+1].
•lô
, 
	`blk_ödex
(k+1, 
p
))) {

161  
k
;

165 
	}
}

170 
	$bd_‰ì
(*
p
) {

171 *
q
;

172 
k
;

174 
	`acquúe
(&
lock
);

175 
k
 = 
	`size
(
p
); k < 
MAXSIZE
; k++) {

176 
bi
 = 
	`blk_ödex
(
k
, 
p
);

177 
buddy
 = (
bi
 % 2 == 0) ? bi+1 : bi-1;

178 
	`bô_˛ór
(
bd_sizes
[
k
].
Æloc
, 
bi
);

179 i‡(
	`bô_is£t
(
bd_sizes
[
k
].
Æloc
, 
buddy
)) {

183 
q
 = 
	`addr
(
k
, 
buddy
);

184 
	`l°_ªmove
(
q
);

185 if(
buddy
 % 2 == 0) {

186 
p
 = 
q
;

190 
	`bô_˛ór
(
bd_sizes
[
k
+1].
•lô
, 
	`blk_ödex
(k+1, 
p
));

192 
	`l°_push
(&
bd_sizes
[
k
].
‰ì
, 
p
);

193 
	`ªÀa£
(&
lock
);

194 
	}
}

198 
	$blk_ödex_√xt
(
k
, *
p
) {

199 
n
 = (
p
 - (*Ë
bd_ba£
Ë/ 
	`BLK_SIZE
(
k
);

200 if((
p
 - (*Ë
bd_ba£
Ë% 
	`BLK_SIZE
(
k
) != 0)

201 
n
++;

202  
n
 ;

203 
	}
}

206 
	$log2
(
uöt64
 
n
) {

207 
k
 = 0;

208 
n
 > 1) {

209 
k
++;

210 
n
 =Ç >> 1;

212  
k
;

213 
	}
}

217 
	$bd_m¨k
(*
°¨t
, *
°›
)

219 
bi
, 
bj
;

221 i‡(((
uöt64
Ë
°¨t
 % 
LEAF_SIZE
 !0Ë|| ((uöt64Ë
°›
 % LEAF_SIZE != 0))

222 
	`∑nic
("bd_mark");

224 
k
 = 0; k < 
nsizes
; k++) {

225 
bi
 = 
	`blk_ödex
(
k
, 
°¨t
);

226 
bj
 = 
	`blk_ödex_√xt
(
k
, 
°›
);

227 ; 
bi
 < 
bj
; bi++) {

228 if(
k
 > 0) {

230 
	`bô_£t
(
bd_sizes
[
k
].
•lô
, 
bi
);

232 
	`bô_£t
(
bd_sizes
[
k
].
Æloc
, 
bi
);

235 
	}
}

240 
	$bd_öô‰ì_∑ú
(
k
, 
bi
) {

241 
buddy
 = (
bi
 % 2 == 0) ? bi+1 : bi-1;

242 
‰ì
 = 0;

243 if(
	`bô_is£t
(
bd_sizes
[
k
].
Æloc
, 
bi
Ë!bô_is£t(bd_sizes[k].Æloc, 
buddy
)) {

245 
‰ì
 = 
	`BLK_SIZE
(
k
);

246 if(
	`bô_is£t
(
bd_sizes
[
k
].
Æloc
, 
bi
))

247 
	`l°_push
(&
bd_sizes
[
k
].
‰ì
, 
	`addr
(k, 
buddy
));

249 
	`l°_push
(&
bd_sizes
[
k
].
‰ì
, 
	`addr
(k, 
bi
));

251  
‰ì
;

252 
	}
}

258 
	$bd_öô‰ì
(*
bd_À·
, *
bd_right
) {

259 
‰ì
 = 0;

261 
k
 = 0; k < 
MAXSIZE
; k++) {

262 
À·
 = 
	`blk_ödex_√xt
(
k
, 
bd_À·
);

263 
right
 = 
	`blk_ödex
(
k
, 
bd_right
);

264 
‰ì
 +
	`bd_öô‰ì_∑ú
(
k
, 
À·
);

265 if(
right
 <
À·
)

267 
‰ì
 +
	`bd_öô‰ì_∑ú
(
k
, 
right
);

269  
‰ì
;

270 
	}
}

274 
	$bd_m¨k_d©a_°ru˘uªs
(*
p
) {

275 
mëa
 = 
p
 - (*)
bd_ba£
;

276 
	`¥ötf
("bd: %d më®byã†f‹ m™agög %d byã†o‡mem‹y\n", 
mëa
, 
	`BLK_SIZE
(
MAXSIZE
));

277 
	`bd_m¨k
(
bd_ba£
, 
p
);

278  
mëa
;

279 
	}
}

283 
	$bd_m¨k_u«vaûabÀ
(*
íd
, *
À·
) {

284 
u«vaûabÀ
 = 
	`BLK_SIZE
(
MAXSIZE
)-(
íd
-
bd_ba£
);

285 if(
u«vaûabÀ
 > 0)

286 
u«vaûabÀ
 = 
	`ROUNDUP
(u«vaûabÀ, 
LEAF_SIZE
);

287 
	`¥ötf
("bd: 0x%x byã†u«vaûabÀ\n", 
u«vaûabÀ
);

289 *
bd_íd
 = 
bd_ba£
+
	`BLK_SIZE
(
MAXSIZE
)-
u«vaûabÀ
;

290 
	`bd_m¨k
(
bd_íd
, 
bd_ba£
+
	`BLK_SIZE
(
MAXSIZE
));

291  
u«vaûabÀ
;

292 
	}
}

296 
	$bd_öô
(*
ba£
, *
íd
) {

297 *
p
 = (*Ë
	`ROUNDUP
((
uöt64
)
ba£
, 
LEAF_SIZE
);

298 
sz
;

300 
	`öôlock
(&
lock
, "buddy");

301 
bd_ba£
 = (*Ë
p
;

304 
nsizes
 = 
	`log2
(((*)
íd
-
p
)/
LEAF_SIZE
) + 1;

305 if((*)
íd
-
p
 > 
	`BLK_SIZE
(
MAXSIZE
)) {

306 
nsizes
++;

309 
	`¥ötf
("bd: memory sz is %d bytes;állocateán sizeárray ofÜength %d\n",

310 (*Ë
íd
 - 
p
, 
nsizes
);

313 
bd_sizes
 = (
Sz_öfo
 *Ë
p
;

314 
p
 +(
Sz_öfo
Ë* 
nsizes
;

315 
	`mem£t
(
bd_sizes
, 0, (
Sz_öfo
Ë* 
nsizes
);

318 
k
 = 0; k < 
nsizes
; k++) {

319 
	`l°_öô
(&
bd_sizes
[
k
].
‰ì
);

320 
sz
 = ()* 
	`ROUNDUP
(
	`NBLK
(
k
), 8)/8;

321 
bd_sizes
[
k
].
Æloc
 = 
p
;

322 
	`mem£t
(
bd_sizes
[
k
].
Æloc
, 0, 
sz
);

323 
p
 +
sz
;

328 
k
 = 1; k < 
nsizes
; k++) {

329 
sz
 = ()* (
	`ROUNDUP
(
	`NBLK
(
k
), 8))/8;

330 
bd_sizes
[
k
].
•lô
 = 
p
;

331 
	`mem£t
(
bd_sizes
[
k
].
•lô
, 0, 
sz
);

332 
p
 +
sz
;

334 
p
 = (*Ë
	`ROUNDUP
((
uöt64
Ëp, 
LEAF_SIZE
);

338 
mëa
 = 
	`bd_m¨k_d©a_°ru˘uªs
(
p
);

342 
u«vaûabÀ
 = 
	`bd_m¨k_u«vaûabÀ
(
íd
, 
p
);

343 *
bd_íd
 = 
bd_ba£
+
	`BLK_SIZE
(
MAXSIZE
)-
u«vaûabÀ
;

346 
‰ì
 = 
	`bd_öô‰ì
(
p
, 
bd_íd
);

349 if(
‰ì
 !
	`BLK_SIZE
(
MAXSIZE
)-
mëa
-
u«vaûabÀ
) {

350 
	`¥ötf
("‰ì %d %d\n", 
‰ì
, 
	`BLK_SIZE
(
MAXSIZE
)-
mëa
-
u«vaûabÀ
);

351 
	`∑nic
("bd_init: free mem");

353 
	}
}

	@kernel/buf.h

1 
	sbuf
 {

2 
	mvÆid
;

3 
	mdisk
;

4 
uöt
 
	mdev
;

5 
uöt
 
	mblockno
;

6 
¶ì∂ock
 
	mlock
;

7 
uöt
 
	mªf˙t
;

8 
buf
 *
	m¥ev
;

9 
buf
 *
	m√xt
;

10 
uch¨
 
	md©a
[
BSIZE
];

	@kernel/console.c

12 
	~<°d¨g.h
>

14 
	~"ty≥s.h
"

15 
	~"∑øm.h
"

16 
	~"•ölock.h
"

17 
	~"¶ì∂ock.h
"

18 
	~"fs.h
"

19 
	~"fûe.h
"

20 
	~"memœyout.h
"

21 
	~"riscv.h
"

22 
	~"defs.h
"

23 
	~"¥oc.h
"

25 
	#BACKSPACE
 0x100

	)

26 
	#C
(
x
) ((x)-'@')

27 

	)

32 
	$c⁄•utc
(
c
)

34 vﬁ©ûê
∑nicked
;

36 if(
∑nicked
){

41 if(
c
 =
BACKSPACE
){

43 
	`u¨çutc
('\b'); uartputc(' '); uartputc('\b');

45 
	`u¨çutc
(
c
);

47 
	}
}

50 
•ölock
 
	mlock
;

53 
	#INPUT_BUF
 128

	)

54 
	mbuf
[
INPUT_BUF
];

55 
uöt
 
	mr
;

56 
uöt
 
	mw
;

57 
uöt
 
	me
;

58 } 
	gc⁄s
;

64 
	$c⁄sﬁewrôe
(
fûe
 *
f
, 
u£r_§c
, 
uöt64
 
§c
, 
n
)

66 
i
;

68 
	`acquúe
(&
c⁄s
.
lock
);

69 
i
 = 0; i < 
n
; i++){

70 
c
;

71 if(
	`eôhî_c›yö
(&
c
, 
u£r_§c
, 
§c
+
i
, 1) == -1)

73 
	`c⁄•utc
(
c
);

75 
	`ªÀa£
(&
c⁄s
.
lock
);

77  
n
;

78 
	}
}

87 
	$c⁄sﬁîód
(
fûe
 *
f
, 
u£r_d°
, 
uöt64
 
d°
, 
n
)

89 
uöt
 
èrgë
;

90 
c
;

91 
cbuf
;

93 
èrgë
 = 
n
;

94 
	`acquúe
(&
c⁄s
.
lock
);

95 
n
 > 0){

98 
c⁄s
.
r
 =c⁄s.
w
){

99 if(
	`my¥oc
()->
kûÀd
){

100 
	`ªÀa£
(&
c⁄s
.
lock
);

103 
	`¶ìp
(&
c⁄s
.
r
, &c⁄s.
lock
);

106 
c
 = 
c⁄s
.
buf
[c⁄s.
r
++ % 
INPUT_BUF
];

108 if(
c
 =
	`C
('D')){

109 if(
n
 < 
èrgë
){

112 
c⁄s
.
r
--;

118 
cbuf
 = 
c
;

119 if(
	`eôhî_c›yout
(
u£r_d°
, 
d°
, &
cbuf
, 1) == -1)

122 
d°
++;

123 --
n
;

125 if(
c
 == '\n'){

131 
	`ªÀa£
(&
c⁄s
.
lock
);

133  
èrgë
 - 
n
;

134 
	}
}

143 
	$c⁄sﬁeöå
(
c
)

145 
	`acquúe
(&
c⁄s
.
lock
);

147 
c
){

148 
	`C
('P'):

149 
	`¥ocdump
();

151 
	`C
('U'):

152 
c⁄s
.
e
 !c⁄s.
w
 &&

153 
c⁄s
.
buf
[(c⁄s.
e
-1Ë% 
INPUT_BUF
] != '\n'){

154 
c⁄s
.
e
--;

155 
	`c⁄•utc
(
BACKSPACE
);

158 
	`C
('H'):

160 if(
c⁄s
.
e
 !c⁄s.
w
){

161 
c⁄s
.
e
--;

162 
	`c⁄•utc
(
BACKSPACE
);

166 if(
c
 !0 && 
c⁄s
.
e
-c⁄s.
r
 < 
INPUT_BUF
){

167 
c
 = (c == '\r') ? '\n' : c;

170 
	`c⁄•utc
(
c
);

173 
c⁄s
.
buf
[c⁄s.
e
++ % 
INPUT_BUF
] = 
c
;

175 if(
c
 ='\n' || c =
	`C
('D'Ë|| 
c⁄s
.
e
 =c⁄s.
r
+
INPUT_BUF
){

178 
c⁄s
.
w
 = c⁄s.
e
;

179 
	`wakeup
(&
c⁄s
.
r
);

185 
	`ªÀa£
(&
c⁄s
.
lock
);

186 
	}
}

189 
	$c⁄sﬁeöô
()

191 
	`öôlock
(&
c⁄s
.
lock
, "cons");

193 
	`u¨töô
();

197 
devsw
[
CONSOLE
].
ªad
 = 
c⁄sﬁîód
;

198 
devsw
[
CONSOLE
].
wrôe
 = 
c⁄sﬁewrôe
;

199 
	}
}

	@kernel/date.h

1 
	sπcd©e
 {

2 
uöt
 
	m£c⁄d
;

3 
uöt
 
	mmöuã
;

4 
uöt
 
	mhour
;

5 
uöt
 
	mday
;

6 
uöt
 
	mm⁄th
;

7 
uöt
 
	myór
;

	@kernel/defs.h

1 
	gbuf
;

2 
	gc⁄ãxt
;

3 
	gfûe
;

4 
	göode
;

5 
	gpùe
;

6 
	g¥oc
;

7 
	g•ölock
;

8 
	g¶ì∂ock
;

9 
	g°©
;

10 
	gsu≥rblock
;

11 
	gmbuf
;

12 
	gsock
;

15 
böô
();

16 
buf
* 
bªad
(
uöt
, uint);

17 
bªl£
(
buf
*);

18 
bwrôe
(
buf
*);

19 
bpö
(
buf
*);

20 
bu≈ö
(
buf
*);

23 
c⁄sﬁeöô
();

24 
c⁄sﬁeöå
();

25 
c⁄•utc
();

28 
pci_öô
();

31 
e1000_öô
(
uöt32
 *);

32 
e1000_öå
();

33 
e1000_å™smô
(
mbuf
*);

36 
exec
(*, **);

39 
fûe
* 
fûóŒoc
();

40 
fûe˛o£
(
fûe
*);

41 
fûe
* 
fûedup
(file*);

42 
fûeöô
();

43 
fûîód
(
fûe
*, 
uöt64
, 
n
);

44 
fûe°©
(
fûe
*, 
uöt64
 
addr
);

45 
fûewrôe
(
fûe
*, 
uöt64
, 
n
);

48 
fsöô
();

49 
dúlök
(
öode
*, *, 
uöt
);

50 
öode
* 
dúlookup
(öode*, *, 
uöt
*);

51 
öode
* 
üŒoc
(
uöt
, );

52 
öode
* 
idup
(inode*);

53 
iöô
();

54 
ûock
(
öode
*);

55 
ùut
(
öode
*);

56 
iu∆ock
(
öode
*);

57 
iu∆ockput
(
öode
*);

58 
iupd©e
(
öode
*);

59 
«mecmp
(const *, const *);

60 
öode
* 
«mei
(*);

61 
öode
* 
«meù¨ít
(*, *);

62 
ªadi
(
öode
*, , 
uöt64
, 
uöt
, uint);

63 
°©i
(
öode
*, 
°©
*);

64 
wrôei
(
öode
*, , 
uöt64
, 
uöt
, uint);

67 
√t_rx
(
mbuf
*);

68 
√t_tx_udp
(
mbuf
*, 
uöt32
, 
uöt16
, uint16);

71 
socköô
();

72 
sockÆloc
(
fûe
 **, 
uöt32
, 
uöt16
, uint16);

73 
sockªcvudp
(
mbuf
*, 
uöt32
, 
uöt16
, uint16);

74 
sock˛o£
(
sock
*);

75 
sockwrôe
(
sock
*, 
uöt64
, );

76 
sockªad
(
sock
*, 
uöt64
, );

79 
ømdisköô
();

80 
ømdisköå
();

81 
ømdiskrw
(
buf
*);

84 * 
kÆloc
();

85 
k‰ì
(*);

86 
köô
();

89 
öôlog
(, 
su≥rblock
*);

90 
log_wrôe
(
buf
*);

91 
begö_›
();

92 
íd_›
();

93 
¸ash_›
(,);

96 
pùóŒoc
(
fûe
**, file**);

97 
pùe˛o£
(
pùe
*, );

98 
pùîód
(
pùe
*, 
uöt64
, );

99 
pùewrôe
(
pùe
*, 
uöt64
, );

102 
¥ötf
(*, ...);

103 
	$∑nic
(*Ë
	`__©åibuã__
((
n‹ëu∫
));

104 
	`¥ötföô
();

107 
	`˝uid
();

108 
	`exô
();

109 
	`f‹k
();

110 
	`grow¥oc
();

111 
∑gëabÀ_t
 
	`¥oc_∑gëabÀ
(
¥oc
 *);

112 
	`¥oc_‰ì∑gëabÀ
(
∑gëabÀ_t
, 
uöt64
);

113 
	`kûl
();

114 
˝u
* 
	`my˝u
();

115 
˝u
* 
	`gëmy˝u
();

116 
¥oc
* 
	`my¥oc
();

117 
	`¥ocöô
();

118 
	$scheduÀr
(Ë
	`__©åibuã__
((
n‹ëu∫
));

119 
	`sched
();

120 
	`£çroc
(
¥oc
*);

121 
	`¶ìp
(*, 
•ölock
*);

122 
	`u£röô
();

123 
	`waô
(
uöt64
);

124 
	`wakeup
(*);

125 
	`yõld
();

126 
	`eôhî_c›yout
(
u£r_d°
, 
uöt64
 
d°
, *
§c
, uöt64 
Àn
);

127 
	`eôhî_c›yö
(*
d°
, 
u£r_§c
, 
uöt64
 
§c
, uöt64 
Àn
);

128 
	`¥ocdump
();

131 
	`swtch
(
c⁄ãxt
*, context*);

134 
	`acquúe
(
•ölock
*);

135 
	`hﬁdög
(
•ölock
*);

136 
	`öôlock
(
•ölock
*, *);

137 
	`ªÀa£
(
•ölock
*);

138 
	`push_off
();

139 
	`p›_off
();

140 
uöt64
 
	`sys_¡as
();

143 
	`acquúe¶ìp
(
¶ì∂ock
*);

144 
	`ªÀa£¶ìp
(
¶ì∂ock
*);

145 
	`hﬁdög¶ìp
(
¶ì∂ock
*);

146 
	`öô¶ì∂ock
(
¶ì∂ock
*, *);

149 
	`memcmp
(c⁄° *, c⁄° *, 
uöt
);

150 * 
	`memmove
(*, c⁄° *, 
uöt
);

151 * 
	`mem£t
(*, , 
uöt
);

152 * 
	`ß„°r˝y
(*, const *, );

153 
	`°æí
(const *);

154 
	`°∫cmp
(c⁄° *, c⁄° *, 
uöt
);

155 * 
	`°∫˝y
(*, const *, );

158 
	`¨göt
(, *);

159 
	`¨g°r
(, *, );

160 
	`¨gaddr
(, 
uöt64
 *);

161 
	`„tch°r
(
uöt64
, *, );

162 
	`„tchaddr
(
uöt64
, uint64*);

163 
	`sysˇŒ
();

166 
uöt
 
ticks
;

167 
	`å≠öô
();

168 
	`å≠öôh¨t
();

169 
•ölock
 
tick¶ock
;

170 
	`u£πø¥ë
();

173 
	`u¨töô
();

174 
	`u¨töå
();

175 
	`u¨çutc
();

176 
	`u¨tgëc
();

179 
	`kvmöô
();

180 
	`kvmöôh¨t
();

181 
uöt64
 
	`kvm∑
(uint64);

182 
	`kvmm≠
(
uöt64
, uint64, uint64, );

183 
	`m≠∑ges
(
∑gëabÀ_t
, 
uöt64
, uint64, uint64, );

184 
∑gëabÀ_t
 
	`uvm¸óã
();

185 
	`uvmöô
(
∑gëabÀ_t
, 
uch¨
 *, 
uöt
);

186 
uöt64
 
	`uvmÆloc
(
∑gëabÀ_t
, uint64, uint64);

187 
uöt64
 
	`uvmdóŒoc
(
∑gëabÀ_t
, uint64, uint64);

188 
	`uvmc›y
(
∑gëabÀ_t
,ÖagëabÀ_t, 
uöt64
);

189 
	`uvm‰ì
(
∑gëabÀ_t
, 
uöt64
);

190 
	`uvmunm≠
(
∑gëabÀ_t
, 
uöt64
, uint64, );

191 
	`uvm˛ór
(
∑gëabÀ_t
, 
uöt64
);

192 
uöt64
 
	`wÆkaddr
(
∑gëabÀ_t
, uint64);

193 
	`c›yout
(
∑gëabÀ_t
, 
uöt64
, *, uint64);

194 
	`c›yö
(
∑gëabÀ_t
, *, 
uöt64
, uint64);

195 
	`c›yö°r
(
∑gëabÀ_t
, *, 
uöt64
, uint64);

198 
	`∂icöô
();

199 
	`∂icöôh¨t
();

200 
	`∂ic_˛aim
();

201 
	`∂ic_com∂ëe
();

204 
	`vútio_disk_öô
();

205 
	`vútio_disk_rw
(, 
buf
 *, );

206 
	`vútio_disk_öå
();

209 
	#NELEM
(
x
Ë((x)/((x)[0]))

	)

215 
	`bd_öô
(*,*);

216 
	`bd_‰ì
(*);

217 *
	`bd_mÆloc
(
uöt64
);

219 
	sli°
 {

220 
li°
 *
√xt
;

221 
li°
 *
¥ev
;

225 
	`l°_öô
(
li°
*);

226 
	`l°_ªmove
(
li°
*);

227 
	`l°_push
(
li°
*, *);

228 *
	`l°_p›
(
li°
*);

229 
	`l°_¥öt
(
li°
*);

230 
	`l°_em±y
(
li°
*);

	@kernel/e1000.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"riscv.h
"

5 
	~"•ölock.h
"

6 
	~"¥oc.h
"

7 
	~"defs.h
"

8 
	~"e1000_dev.h
"

9 
	~"√t.h
"

11 
	#TX_RING_SIZE
 16

	)

12 
tx_desc
 
	gtx_rög
[
TX_RING_SIZE
] 
__©åibuã__
((
Æig√d
(16)));

13 
mbuf
 *
	gtx_mbufs
[
TX_RING_SIZE
];

15 
	#RX_RING_SIZE
 16

	)

16 
rx_desc
 
	grx_rög
[
RX_RING_SIZE
] 
__©åibuã__
((
Æig√d
(16)));

17 
mbuf
 *
	grx_mbufs
[
RX_RING_SIZE
];

20 vﬁ©ûê
uöt32
 *
	gªgs
;

22 
•ölock
 
	ge1000_lock
;

28 
	$e1000_öô
(
uöt32
 *
xªgs
)

30 
i
;

32 
	`öôlock
(&
e1000_lock
, "e1000");

34 
ªgs
 = 
xªgs
;

37 
ªgs
[
E1000_IMS
] = 0;

38 
ªgs
[
E1000_CTL
] |
E1000_CTL_RST
;

39 
ªgs
[
E1000_IMS
] = 0;

40 
	`__sync_synchr⁄ize
();

43 
	`mem£t
(
tx_rög
, 0, (tx_ring));

44 
i
 = 0; i < 
TX_RING_SIZE
; i++) {

45 
tx_rög
[
i
].
°©us
 = 
E1000_TXD_STAT_DD
;

46 
tx_mbufs
[
i
] = 0;

48 
ªgs
[
E1000_TDBAL
] = (
uöt64
Ë
tx_rög
;

49 if((
tx_rög
) % 128 != 0)

50 
	`∑nic
("e1000");

51 
ªgs
[
E1000_TDLEN
] = (
tx_rög
);

52 
ªgs
[
E1000_TDH
] =Ñegs[
E1000_TDT
] = 0;

55 
	`mem£t
(
rx_rög
, 0, (rx_ring));

56 
i
 = 0; i < 
RX_RING_SIZE
; i++) {

57 
rx_mbufs
[
i
] = 
	`mbuÁŒoc
(0);

58 i‡(!
rx_mbufs
[
i
])

59 
	`∑nic
("e1000");

60 
rx_rög
[
i
].
addr
 = (
uöt64
Ë
rx_mbufs
[i]->
hód
;

62 
ªgs
[
E1000_RDBAL
] = (
uöt64
Ë
rx_rög
;

63 if((
rx_rög
) % 128 != 0)

64 
	`∑nic
("e1000");

65 
ªgs
[
E1000_RDH
] = 0;

66 
ªgs
[
E1000_RDT
] = 
RX_RING_SIZE
 - 1;

67 
ªgs
[
E1000_RDLEN
] = (
rx_rög
);

70 
ªgs
[
E1000_RA
] = 0x12005452;

71 
ªgs
[
E1000_RA
+1] = 0x5634 | (1<<31);

73 
i
 = 0; i < 4096/32; i++)

74 
ªgs
[
E1000_MTA
 + 
i
] = 0;

77 
ªgs
[
E1000_TCTL
] = 
E1000_TCTL_EN
 |

78 
E1000_TCTL_PSP
 |

79 (0x10 << 
E1000_TCTL_CT_SHIFT
) |

80 (0x40 << 
E1000_TCTL_COLD_SHIFT
);

81 
ªgs
[
E1000_TIPG
] = 10 | (8<<10) | (6<<20);

84 
ªgs
[
E1000_RCTL
] = 
E1000_RCTL_EN
 |

85 
E1000_RCTL_BAM
 |

86 
E1000_RCTL_SZ_2048
 |

87 
E1000_RCTL_SECRC
;

90 
ªgs
[
E1000_RDTR
] = 0;

91 
ªgs
[
E1000_RADV
] = 0;

92 
ªgs
[
E1000_IMS
] = (1 << 7);

93 
	}
}

96 
	$e1000_å™smô
(
mbuf
 *
m
)

105 
	`acquúe
(&
e1000_lock
);

108 
uöt32
 
èû
, 
hód
, 
√xt
;

110 
èû
 = 
ªgs
[
E1000_TDT
];

111 
hód
 = 
ªgs
[
E1000_TDH
];

114 if((
tx_rög
[
èû
].
°©us
 && 
E1000_TXD_STAT_DD
) == 0) {

115 
	`ªÀa£
(&
e1000_lock
);

119 
√xt
 = (
èû
 + 1Ë% 
TX_RING_SIZE
;

120 if(
√xt
 =
hód
) {

122 
	`∑nic
("fullÅx_ring\n");

127 if(
tx_mbufs
[
èû
] !0Ë
	`mbuf‰ì
(tx_mbufs[tail]);

129 
tx_mbufs
[
èû
] = 
m
;

132 
tx_rög
[
èû
].
addr
 = (
uöt64
)
m
->
hód
;

133 
tx_rög
[
èû
].
Àngth
 = (
uöt16
)
m
->
Àn
;

138 
tx_rög
[
èû
].
cmd
 = 
E1000_TXD_CMD_RS
 | 
E1000_TXD_CMD_EOP
;

141 
ªgs
[
E1000_TDT
] = (
èû
 + 1Ë% 
TX_RING_SIZE
;

143 
	`ªÀa£
(&
e1000_lock
);

146 
	}
}

149 
	$e1000_ªcv
()

155 
uöt32
 
hód
;

156 
mbuf
 *mbuf;

158 
hód
 = (
ªgs
[
E1000_RDT
] + 1Ë% 
RX_RING_SIZE
;

160 (
rx_rög
[
hód
].
°©us
 & 
E1000_RXD_STAT_DD
))

162 
	`acquúe
(&
e1000_lock
);

163 
mbuf
 = 
rx_mbufs
[
hód
];

166 
	`mbuÂut
(
mbuf
, 
rx_rög
[
hód
].
Àngth
);

169 
rx_mbufs
[
hód
] = 
	`mbuÁŒoc
(0);

170 
rx_rög
[
hód
].
addr
 = (
uöt64
)
rx_mbufs
[head]->head;

171 
rx_rög
[
hód
].
°©us
 = 0;

173 
ªgs
[
E1000_RDT
] = 
hód
;

175 
	`ªÀa£
(&
e1000_lock
);

177 
	`√t_rx
(
mbuf
);

178 
hód
 = (hód + 1Ë% 
RX_RING_SIZE
;

183 
	}
}

186 
	$e1000_öå
()

188 
	`e1000_ªcv
();

192 
ªgs
[
E1000_ICR
];

193 
	}
}

	@kernel/e1000_dev.h

7 
	#E1000_CTL
 (0x00000/4Ë

	)

8 
	#E1000_ICR
 (0x000C0/4Ë

	)

9 
	#E1000_IMS
 (0x000D0/4Ë

	)

10 
	#E1000_RCTL
 (0x00100/4Ë

	)

11 
	#E1000_TCTL
 (0x00400/4Ë

	)

12 
	#E1000_TIPG
 (0x00410/4Ë

	)

13 
	#E1000_RDBAL
 (0x02800/4Ë

	)

14 
	#E1000_RDTR
 (0x02820/4Ë

	)

15 
	#E1000_RADV
 (0x0282C/4Ë

	)

16 
	#E1000_RDH
 (0x02810/4Ë

	)

17 
	#E1000_RDT
 (0x02818/4Ë

	)

18 
	#E1000_RDLEN
 (0x02808/4Ë

	)

19 
	#E1000_RSRPD
 (0x02C00/4Ë

	)

20 
	#E1000_TDBAL
 (0x03800/4Ë

	)

21 
	#E1000_TDLEN
 (0x03808/4Ë

	)

22 
	#E1000_TDH
 (0x03810/4Ë

	)

23 
	#E1000_TDT
 (0x03818/4Ë

	)

24 
	#E1000_MTA
 (0x05200/4Ë

	)

25 
	#E1000_RA
 (0x05400/4Ë

	)

28 
	#E1000_CTL_SLU
 0x00000040

	)

29 
	#E1000_CTL_FRCSPD
 0x00000800

	)

30 
	#E1000_CTL_FRCDPLX
 0x00001000

	)

31 
	#E1000_CTL_RST
 0x00400000

	)

34 
	#E1000_TCTL_RST
 0x00000001

	)

35 
	#E1000_TCTL_EN
 0x00000002

	)

36 
	#E1000_TCTL_BCE
 0x00000004

	)

37 
	#E1000_TCTL_PSP
 0x00000008

	)

38 
	#E1000_TCTL_CT
 0x00000ff0

	)

39 
	#E1000_TCTL_CT_SHIFT
 4

	)

40 
	#E1000_TCTL_COLD
 0x003ff000

	)

41 
	#E1000_TCTL_COLD_SHIFT
 12

	)

42 
	#E1000_TCTL_SWXOFF
 0x00400000

	)

43 
	#E1000_TCTL_PBE
 0x00800000

	)

44 
	#E1000_TCTL_RTLC
 0x01000000

	)

45 
	#E1000_TCTL_NRTU
 0x02000000

	)

46 
	#E1000_TCTL_MULR
 0x10000000

	)

49 
	#E1000_RCTL_RST
 0x00000001

	)

50 
	#E1000_RCTL_EN
 0x00000002

	)

51 
	#E1000_RCTL_SBP
 0x00000004

	)

52 
	#E1000_RCTL_UPE
 0x00000008

	)

53 
	#E1000_RCTL_MPE
 0x00000010

	)

54 
	#E1000_RCTL_LPE
 0x00000020

	)

55 
	#E1000_RCTL_LBM_NO
 0x00000000

	)

56 
	#E1000_RCTL_LBM_MAC
 0x00000040

	)

57 
	#E1000_RCTL_LBM_SLP
 0x00000080

	)

58 
	#E1000_RCTL_LBM_TCVR
 0x000000C0

	)

59 
	#E1000_RCTL_DTYP_MASK
 0x00000C00

	)

60 
	#E1000_RCTL_DTYP_PS
 0x00000400

	)

61 
	#E1000_RCTL_RDMTS_HALF
 0x00000000

	)

62 
	#E1000_RCTL_RDMTS_QUAT
 0x00000100

	)

63 
	#E1000_RCTL_RDMTS_EIGTH
 0x00000200

	)

64 
	#E1000_RCTL_MO_SHIFT
 12

	)

65 
	#E1000_RCTL_MO_0
 0x00000000

	)

66 
	#E1000_RCTL_MO_1
 0x00001000

	)

67 
	#E1000_RCTL_MO_2
 0x00002000

	)

68 
	#E1000_RCTL_MO_3
 0x00003000

	)

69 
	#E1000_RCTL_MDR
 0x00004000

	)

70 
	#E1000_RCTL_BAM
 0x00008000

	)

72 
	#E1000_RCTL_SZ_2048
 0x00000000

	)

73 
	#E1000_RCTL_SZ_1024
 0x00010000

	)

74 
	#E1000_RCTL_SZ_512
 0x00020000

	)

75 
	#E1000_RCTL_SZ_256
 0x00030000

	)

77 
	#E1000_RCTL_SZ_16384
 0x00010000

	)

78 
	#E1000_RCTL_SZ_8192
 0x00020000

	)

79 
	#E1000_RCTL_SZ_4096
 0x00030000

	)

80 
	#E1000_RCTL_VFE
 0x00040000

	)

81 
	#E1000_RCTL_CFIEN
 0x00080000

	)

82 
	#E1000_RCTL_CFI
 0x00100000

	)

83 
	#E1000_RCTL_DPF
 0x00400000

	)

84 
	#E1000_RCTL_PMCF
 0x00800000

	)

85 
	#E1000_RCTL_BSEX
 0x02000000

	)

86 
	#E1000_RCTL_SECRC
 0x04000000

	)

87 
	#E1000_RCTL_FLXBUF_MASK
 0x78000000

	)

88 
	#E1000_RCTL_FLXBUF_SHIFT
 27

	)

90 
	#DATA_MAX
 1518

	)

93 
	#E1000_TXD_CMD_EOP
 0x01

	)

94 
	#E1000_TXD_CMD_RS
 0x08

	)

97 
	#E1000_TXD_STAT_DD
 0x00000001

	)

100 
	stx_desc


102 
uöt64
 
	maddr
;

103 
uöt16
 
	mÀngth
;

104 
uöt8
 
	mcso
;

105 
uöt8
 
	mcmd
;

106 
uöt8
 
	m°©us
;

107 
uöt8
 
	mcss
;

108 
uöt16
 
	m•ecül
;

112 
	#E1000_RXD_STAT_DD
 0x01

	)

113 
	#E1000_RXD_STAT_EOP
 0x02

	)

116 
	srx_desc


118 
uöt64
 
	maddr
;

119 
uöt16
 
	mÀngth
;

120 
uöt16
 
	mcsum
;

121 
uöt8
 
	m°©us
;

122 
uöt8
 
	mîr‹s
;

123 
uöt16
 
	m•ecül
;

	@kernel/elf.h

3 
	#ELF_MAGIC
 0x464C457FU

4 

	)

6 
	sñfhdr
 {

7 
uöt
 
	mmagic
;

8 
uch¨
 
	mñf
[12];

9 
ush‹t
 
	mty≥
;

10 
ush‹t
 
	mmachöe
;

11 
uöt
 
	mvîsi⁄
;

12 
uöt64
 
	míåy
;

13 
uöt64
 
	mphoff
;

14 
uöt64
 
	mshoff
;

15 
uöt
 
	mÊags
;

16 
ush‹t
 
	mehsize
;

17 
ush‹t
 
	mphítsize
;

18 
ush‹t
 
	mphnum
;

19 
ush‹t
 
	mshítsize
;

20 
ush‹t
 
	mshnum
;

21 
ush‹t
 
	msh°∫dx
;

25 
	s¥oghdr
 {

26 
uöt32
 
	mty≥
;

27 
uöt32
 
	mÊags
;

28 
uöt64
 
	moff
;

29 
uöt64
 
	mvaddr
;

30 
uöt64
 
	m∑ddr
;

31 
uöt64
 
	mfûesz
;

32 
uöt64
 
	mmemsz
;

33 
uöt64
 
	mÆign
;

37 
	#ELF_PROG_LOAD
 1

	)

40 
	#ELF_PROG_FLAG_EXEC
 1

	)

41 
	#ELF_PROG_FLAG_WRITE
 2

	)

42 
	#ELF_PROG_FLAG_READ
 4

	)

	@kernel/exec.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"riscv.h
"

5 
	~"•ölock.h
"

6 
	~"¥oc.h
"

7 
	~"defs.h
"

8 
	~"ñf.h
"

10 
lﬂd£g
(
pde_t
 *
pgdú
, 
uöt64
 
addr
, 
öode
 *
ù
, 
uöt
 
off£t
, uöà
sz
);

13 
	$exec
(*
∑th
, **
¨gv
)

15 *
s
, *
œ°
;

16 
i
, 
off
;

17 
uöt64
 
¨gc
, 
sz
, 
•
, 
u°ack
[
MAXARG
+1], 
°ackba£
;

18 
ñfhdr
 
ñf
;

19 
öode
 *
ù
;

20 
¥oghdr
 
ph
;

21 
∑gëabÀ_t
 
∑gëabÀ
 = 0, 
ﬁd∑gëabÀ
;

22 
¥oc
 *
p
 = 
	`my¥oc
();

24 
	`begö_›
(
ROOTDEV
);

26 if((
ù
 = 
	`«mei
(
∑th
)) == 0){

27 
	`íd_›
(
ROOTDEV
);

30 
	`ûock
(
ù
);

33 if(
	`ªadi
(
ù
, 0, (
uöt64
)&
ñf
, 0, (elf)) != (elf))

34 
bad
;

35 if(
ñf
.
magic
 !
ELF_MAGIC
)

36 
bad
;

38 if((
∑gëabÀ
 = 
	`¥oc_∑gëabÀ
(
p
)) == 0)

39 
bad
;

42 
sz
 = 0;

43 
i
=0, 
off
=
ñf
.
phoff
; i<ñf.
phnum
; i++, off+=(
ph
)){

44 if(
	`ªadi
(
ù
, 0, (
uöt64
)&
ph
, 
off
, (ph)) != (ph))

45 
bad
;

46 if(
ph
.
ty≥
 !
ELF_PROG_LOAD
)

48 if(
ph
.
memsz
 <Öh.
fûesz
)

49 
bad
;

50 if(
ph
.
vaddr
 +Öh.
memsz
 <Öh.vaddr)

51 
bad
;

52 if((
sz
 = 
	`uvmÆloc
(
∑gëabÀ
, sz, 
ph
.
vaddr
 +Öh.
memsz
)) == 0)

53 
bad
;

54 if(
ph
.
vaddr
 % 
PGSIZE
 != 0)

55 
bad
;

56 if(
	`lﬂd£g
(
∑gëabÀ
, 
ph
.
vaddr
, 
ù
,Öh.
off
,Öh.
fûesz
) < 0)

57 
bad
;

59 
	`iu∆ockput
(
ù
);

60 
	`íd_›
(
ROOTDEV
);

61 
ù
 = 0;

63 
p
 = 
	`my¥oc
();

64 
uöt64
 
ﬁdsz
 = 
p
->
sz
;

68 
sz
 = 
	`PGROUNDUP
(sz);

69 if((
sz
 = 
	`uvmÆloc
(
∑gëabÀ
, sz, sz + 2*
PGSIZE
)) == 0)

70 
bad
;

71 
	`uvm˛ór
(
∑gëabÀ
, 
sz
-2*
PGSIZE
);

72 
•
 = 
sz
;

73 
°ackba£
 = 
•
 - 
PGSIZE
;

76 
¨gc
 = 0; 
¨gv
[argc];árgc++) {

77 if(
¨gc
 >
MAXARG
)

78 
bad
;

79 
•
 -
	`°æí
(
¨gv
[
¨gc
]) + 1;

80 
•
 -= sp % 16;

81 if(
•
 < 
°ackba£
)

82 
bad
;

83 if(
	`c›yout
(
∑gëabÀ
, 
•
, 
¨gv
[
¨gc
], 
	`°æí
(argv[argc]) + 1) < 0)

84 
bad
;

85 
u°ack
[
¨gc
] = 
•
;

87 
u°ack
[
¨gc
] = 0;

90 
•
 -(
¨gc
+1Ë* (
uöt64
);

91 
•
 -= sp % 16;

92 if(
•
 < 
°ackba£
)

93 
bad
;

94 if(
	`c›yout
(
∑gëabÀ
, 
•
, (*)
u°ack
, (
¨gc
+1)*(
uöt64
)) < 0)

95 
bad
;

100 
p
->
tf
->
a1
 = 
•
;

103 
œ°
=
s
=
∑th
; *s; s++)

104 if(*
s
 == '/')

105 
œ°
 = 
s
+1;

106 
	`ß„°r˝y
(
p
->
«me
, 
œ°
, (p->name));

109 
ﬁd∑gëabÀ
 = 
p
->
∑gëabÀ
;

110 
p
->
∑gëabÀ
 =Öagetable;

111 
p
->
sz
 = sz;

112 
p
->
tf
->
ïc
 = 
ñf
.
íåy
;

113 
p
->
tf
->
•
 = sp;

114 
	`¥oc_‰ì∑gëabÀ
(
ﬁd∑gëabÀ
, 
ﬁdsz
);

116  
¨gc
;

118 
bad
:

119 if(
∑gëabÀ
)

120 
	`¥oc_‰ì∑gëabÀ
(
∑gëabÀ
, 
sz
);

121 if(
ù
){

122 
	`iu∆ockput
(
ù
);

123 
	`íd_›
(
ROOTDEV
);

126 
	}
}

133 
	$lﬂd£g
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
va
, 
öode
 *
ù
, 
uöt
 
off£t
, uöà
sz
)

135 
uöt
 
i
, 
n
;

136 
uöt64
 
∑
;

138 if((
va
 % 
PGSIZE
) != 0)

139 
	`∑nic
("loadseg: va must beÖageáligned");

141 
i
 = 0; i < 
sz
; i +
PGSIZE
){

142 
∑
 = 
	`wÆkaddr
(
∑gëabÀ
, 
va
 + 
i
);

143 if(
∑
 == 0)

144 
	`∑nic
("loadseg:áddress shouldÉxist");

145 if(
sz
 - 
i
 < 
PGSIZE
)

146 
n
 = 
sz
 - 
i
;

148 
n
 = 
PGSIZE
;

149 if(
	`ªadi
(
ù
, 0, (
uöt64
)
∑
, 
off£t
+
i
, 
n
) !=Ç)

154 
	}
}

	@kernel/fcntl.h

1 
	#O_RDONLY
 0x000

	)

2 
	#O_WRONLY
 0x001

	)

3 
	#O_RDWR
 0x002

	)

4 
	#O_CREATE
 0x200

	)

	@kernel/file.c

5 
	~"ty≥s.h
"

6 
	~"riscv.h
"

7 
	~"defs.h
"

8 
	~"∑øm.h
"

9 
	~"fs.h
"

10 
	~"•ölock.h
"

11 
	~"¶ì∂ock.h
"

12 
	~"fûe.h
"

13 
	~"°©.h
"

14 
	~"¥oc.h
"

16 
devsw
 
	gdevsw
[
NDEV
];

18 
•ölock
 
	mlock
;

19 
fûe
 
	mfûe
[
NFILE
];

20 } 
	g·abÀ
;

23 
	$fûeöô
()

25 
	`öôlock
(&
·abÀ
.
lock
, "ftable");

26 
	}
}

29 
fûe
*

30 
	$fûóŒoc
()

32 
fûe
 *
f
;

34 
	`acquúe
(&
·abÀ
.
lock
);

35 
f
 = 
·abÀ
.
fûe
; f < fèbÀ.fûê+ 
NFILE
; f++){

36 if(
f
->
ªf
 == 0){

37 
f
->
ªf
 = 1;

38 
	`ªÀa£
(&
·abÀ
.
lock
);

39  
f
;

42 
	`ªÀa£
(&
·abÀ
.
lock
);

44 
	}
}

47 
fûe
*

48 
	$fûedup
(
fûe
 *
f
)

50 
	`acquúe
(&
·abÀ
.
lock
);

51 if(
f
->
ªf
 < 1)

52 
	`∑nic
("filedup");

53 
f
->
ªf
++;

54 
	`ªÀa£
(&
·abÀ
.
lock
);

55  
f
;

56 
	}
}

60 
	$fûe˛o£
(
fûe
 *
f
)

62 
fûe
 
ff
;

64 
	`acquúe
(&
·abÀ
.
lock
);

65 if(
f
->
ªf
 < 1)

66 
	`∑nic
("fileclose");

67 if(--
f
->
ªf
 > 0){

68 
	`ªÀa£
(&
·abÀ
.
lock
);

71 
ff
 = *
f
;

72 
f
->
ªf
 = 0;

73 
f
->
ty≥
 = 
FD_NONE
;

74 
	`ªÀa£
(&
·abÀ
.
lock
);

76 if(
ff
.
ty≥
 =
FD_PIPE
){

77 
	`pùe˛o£
(
ff
.
pùe
, ff.
wrôabÀ
);

78 } if(
ff
.
ty≥
 =
FD_SOCK
){

79 
	`sock˛o£
(
ff
.
sock
);

80 } if(
ff
.
ty≥
 =
FD_INODE
 || ff.ty≥ =
FD_DEVICE
){

81 
	`begö_›
(
ff
.
ù
->
dev
);

82 
	`ùut
(
ff
.
ù
);

83 
	`íd_›
(
ff
.
ù
->
dev
);

85 
	}
}

90 
	$fûe°©
(
fûe
 *
f
, 
uöt64
 
addr
)

92 
¥oc
 *
p
 = 
	`my¥oc
();

93 
°©
 
°
;

95 if(
f
->
ty≥
 =
FD_INODE
 || f->ty≥ =
FD_DEVICE
){

96 
	`ûock
(
f
->
ù
);

97 
	`°©i
(
f
->
ù
, &
°
);

98 
	`iu∆ock
(
f
->
ù
);

99 if(
	`c›yout
(
p
->
∑gëabÀ
, 
addr
, (*)&
°
, (st)) < 0)

104 
	}
}

109 
	$fûîód
(
fûe
 *
f
, 
uöt64
 
addr
, 
n
)

111 
r
 = 0;

113 if(
f
->
ªadabÀ
 == 0)

116 if(
f
->
ty≥
 =
FD_PIPE
){

117 
r
 = 
	`pùîód
(
f
->
pùe
, 
addr
, 
n
);

118 } if(
f
->
ty≥
 =
FD_SOCK
){

119 
r
 = 
	`sockªad
(
f
->
sock
, 
addr
, 
n
);

120 } if(
f
->
ty≥
 =
FD_DEVICE
){

121 if(
f
->
maj‹
 < 0 || f->maj‹ >
NDEV
 || !
devsw
[f->maj‹].
ªad
)

123 
r
 = 
devsw
[
f
->
maj‹
].
	`ªad
(f, 1, 
addr
, 
n
);

124 } if(
f
->
ty≥
 =
FD_INODE
){

125 
	`ûock
(
f
->
ù
);

126 if((
r
 = 
	`ªadi
(
f
->
ù
, 1, 
addr
, f->
off
, 
n
)) > 0)

127 
f
->
off
 +
r
;

128 
	`iu∆ock
(
f
->
ù
);

130 
	`∑nic
("fileread");

133  
r
;

134 
	}
}

139 
	$fûewrôe
(
fûe
 *
f
, 
uöt64
 
addr
, 
n
)

141 
r
, 
ªt
 = 0;

143 if(
f
->
wrôabÀ
 == 0)

146 if(
f
->
ty≥
 =
FD_PIPE
){

147 
ªt
 = 
	`pùewrôe
(
f
->
pùe
, 
addr
, 
n
);

148 } if(
f
->
ty≥
 =
FD_SOCK
){

149 
ªt
 = 
	`sockwrôe
(
f
->
sock
, 
addr
, 
n
);

150 } if(
f
->
ty≥
 =
FD_DEVICE
){

151 if(
f
->
maj‹
 < 0 || f->maj‹ >
NDEV
 || !
devsw
[f->maj‹].
wrôe
)

153 
ªt
 = 
devsw
[
f
->
maj‹
].
	`wrôe
(f, 1, 
addr
, 
n
);

154 } if(
f
->
ty≥
 =
FD_INODE
){

161 
max
 = ((
MAXOPBLOCKS
-1-1-2Ë/ 2Ë* 
BSIZE
;

162 
i
 = 0;

163 
i
 < 
n
){

164 
n1
 = 
n
 - 
i
;

165 if(
n1
 > 
max
)

166 
n1
 = 
max
;

168 
	`begö_›
(
f
->
ù
->
dev
);

169 
	`ûock
(
f
->
ù
);

170 i‡((
r
 = 
	`wrôei
(
f
->
ù
, 1, 
addr
 + 
i
, f->
off
, 
n1
)) > 0)

171 
f
->
off
 +
r
;

172 
	`iu∆ock
(
f
->
ù
);

173 
	`íd_›
(
f
->
ù
->
dev
);

175 if(
r
 < 0)

177 if(
r
 !
n1
)

178 
	`∑nic
("short filewrite");

179 
i
 +
r
;

181 
ªt
 = (
i
 =
n
 ?Ç : -1);

183 
	`∑nic
("filewrite");

186  
ªt
;

187 
	}
}

	@kernel/file.h

1 
	sfûe
 {

2 íum { 
	mFD_NONE
, 
	mFD_PIPE
, 
	mFD_INODE
, 
	mFD_DEVICE
, 
	mFD_SOCK
 } 
	mty≥
;

3 
	mªf
;

4 
	mªadabÀ
;

5 
	mwrôabÀ
;

6 
√t
 *
	m√t
;

7 
pùe
 *
	mpùe
;

8 
öode
 *
	mù
;

9 
sock
 *
	msock
;

10 
uöt
 
	moff
;

11 
	mmaj‹
;

12 
	mmö‹
;

15 
	#maj‹
(
dev
Ë((devË>> 16 & 0xFFFF)

	)

16 
	#mö‹
(
dev
Ë((devË& 0xFFFF)

	)

17 
	#mkdev
(
m
,
n
Ë((
uöt
)((m)<<16| (n)))

	)

20 
	söode
 {

21 
uöt
 
	mdev
;

22 
uöt
 
	möum
;

23 
	mªf
;

24 
¶ì∂ock
 
	mlock
;

25 
	mvÆid
;

27 
	mty≥
;

28 
	mmaj‹
;

29 
	mmö‹
;

30 
	m∆ök
;

31 
uöt
 
	msize
;

32 
uöt
 
	maddrs
[
NDIRECT
+1];

36 
	sdevsw
 {

37 (*
	mªad
)(
	mfûe
 *, , 
	muöt64
, );

38 (*
	mwrôe
)(
	mfûe
 *, , 
	muöt64
, );

41 
devsw
 devsw[];

43 
	#DISK
 0

	)

44 
	#CONSOLE
 1

	)

	@kernel/fs.c

12 
	~"ty≥s.h
"

13 
	~"riscv.h
"

14 
	~"defs.h
"

15 
	~"∑øm.h
"

16 
	~"°©.h
"

17 
	~"•ölock.h
"

18 
	~"¥oc.h
"

19 
	~"¶ì∂ock.h
"

20 
	~"fs.h
"

21 
	~"buf.h
"

22 
	~"fûe.h
"

24 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

25 
ôrunc
(
öode
*);

28 
su≥rblock
 
	gsb
;

32 
	$ªadsb
(
dev
, 
su≥rblock
 *
sb
)

34 
buf
 *
bp
;

36 
bp
 = 
	`bªad
(
dev
, 1);

37 
	`memmove
(
sb
, 
bp
->
d©a
, (*sb));

38 
	`bªl£
(
bp
);

39 
	}
}

43 
	$fsöô
(
dev
) {

44 
	`ªadsb
(
dev
, &
sb
);

45 if(
sb
.
magic
 !
FSMAGIC
)

46 
	`∑nic
("invalid file system");

47 
	`öôlog
(
dev
, &
sb
);

48 
	}
}

52 
	$bzîo
(
dev
, 
bno
)

54 
buf
 *
bp
;

56 
bp
 = 
	`bªad
(
dev
, 
bno
);

57 
	`mem£t
(
bp
->
d©a
, 0, 
BSIZE
);

58 
	`log_wrôe
(
bp
);

59 
	`bªl£
(
bp
);

60 
	}
}

65 
uöt


66 
	$bÆloc
(
uöt
 
dev
)

68 
b
, 
bi
, 
m
;

69 
buf
 *
bp
;

71 
bp
 = 0;

72 
b
 = 0; b < 
sb
.
size
; b +
BPB
){

73 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
));

74 
bi
 = 0; bò< 
BPB
 && 
b
 + bò< 
sb
.
size
; bi++){

75 
m
 = 1 << (
bi
 % 8);

76 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0){

77 
bp
->
d©a
[
bi
/8] |
m
;

78 
	`log_wrôe
(
bp
);

79 
	`bªl£
(
bp
);

80 
	`bzîo
(
dev
, 
b
 + 
bi
);

81  
b
 + 
bi
;

84 
	`bªl£
(
bp
);

86 
	`∑nic
("balloc: out of blocks");

87 
	}
}

91 
	$b‰ì
(
dev
, 
uöt
 
b
)

93 
buf
 *
bp
;

94 
bi
, 
m
;

96 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
));

97 
bi
 = 
b
 % 
BPB
;

98 
m
 = 1 << (
bi
 % 8);

99 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0)

100 
	`∑nic
("freeing free block");

101 
bp
->
d©a
[
bi
/8] &~
m
;

102 
	`log_wrôe
(
bp
);

103 
	`bªl£
(
bp
);

104 
	}
}

176 
•ölock
 
	mlock
;

177 
öode
 
	möode
[
NINODE
];

178 } 
	giˇche
;

181 
	$iöô
()

183 
i
 = 0;

185 
	`öôlock
(&
iˇche
.
lock
, "icache");

186 
i
 = 0; i < 
NINODE
; i++) {

187 
	`öô¶ì∂ock
(&
iˇche
.
öode
[
i
].
lock
, "inode");

189 
	}
}

191 
öode
* 
igë
(
uöt
 
dev
, uöà
öum
);

196 
öode
*

197 
	$üŒoc
(
uöt
 
dev
, 
ty≥
)

199 
öum
;

200 
buf
 *
bp
;

201 
döode
 *
dù
;

203 
öum
 = 1; inum < 
sb
.
nöodes
; inum++){

204 
bp
 = 
	`bªad
(
dev
, 
	`IBLOCK
(
öum
, 
sb
));

205 
dù
 = (
döode
*)
bp
->
d©a
 + 
öum
%
IPB
;

206 if(
dù
->
ty≥
 == 0){

207 
	`mem£t
(
dù
, 0, (*dip));

208 
dù
->
ty≥
 =Åype;

209 
	`log_wrôe
(
bp
);

210 
	`bªl£
(
bp
);

211  
	`igë
(
dev
, 
öum
);

213 
	`bªl£
(
bp
);

215 
	`∑nic
("ialloc:Ço inodes");

216 
	}
}

223 
	$iupd©e
(
öode
 *
ù
)

225 
buf
 *
bp
;

226 
döode
 *
dù
;

228 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
, 
sb
));

229 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

230 
dù
->
ty≥
 = 
ù
->type;

231 
dù
->
maj‹
 = 
ù
->major;

232 
dù
->
mö‹
 = 
ù
->minor;

233 
dù
->
∆ök
 = 
ù
->nlink;

234 
dù
->
size
 = 
ù
->size;

235 
	`memmove
(
dù
->
addrs
, 
ù
->addrs, (ip->addrs));

236 
	`log_wrôe
(
bp
);

237 
	`bªl£
(
bp
);

238 
	}
}

243 
öode
*

244 
	$igë
(
uöt
 
dev
, uöà
öum
)

246 
öode
 *
ù
, *
em±y
;

248 
	`acquúe
(&
iˇche
.
lock
);

251 
em±y
 = 0;

252 
ù
 = &
iˇche
.
öode
[0]; i∞< &iˇche.öode[
NINODE
]; ip++){

253 if(
ù
->
ªf
 > 0 && ip->
dev
 =dev && ip->
öum
 == inum){

254 
ù
->
ªf
++;

255 
	`ªÀa£
(&
iˇche
.
lock
);

256  
ù
;

258 if(
em±y
 =0 && 
ù
->
ªf
 == 0)

259 
em±y
 = 
ù
;

263 if(
em±y
 == 0)

264 
	`∑nic
("iget:Ço inodes");

266 
ù
 = 
em±y
;

267 
ù
->
dev
 = dev;

268 
ù
->
öum
 = inum;

269 
ù
->
ªf
 = 1;

270 
ù
->
vÆid
 = 0;

271 
	`ªÀa£
(&
iˇche
.
lock
);

273  
ù
;

274 
	}
}

278 
öode
*

279 
	$idup
(
öode
 *
ù
)

281 
	`acquúe
(&
iˇche
.
lock
);

282 
ù
->
ªf
++;

283 
	`ªÀa£
(&
iˇche
.
lock
);

284  
ù
;

285 
	}
}

290 
	$ûock
(
öode
 *
ù
)

292 
buf
 *
bp
;

293 
döode
 *
dù
;

295 if(
ù
 =0 || ip->
ªf
 < 1)

296 
	`∑nic
("ilock");

298 
	`acquúe¶ìp
(&
ù
->
lock
);

300 if(
ù
->
vÆid
 == 0){

301 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
, 
sb
));

302 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

303 
ù
->
ty≥
 = 
dù
->type;

304 
ù
->
maj‹
 = 
dù
->major;

305 
ù
->
mö‹
 = 
dù
->minor;

306 
ù
->
∆ök
 = 
dù
->nlink;

307 
ù
->
size
 = 
dù
->size;

308 
	`memmove
(
ù
->
addrs
, 
dù
->addrs, (ip->addrs));

309 
	`bªl£
(
bp
);

310 
ù
->
vÆid
 = 1;

311 if(
ù
->
ty≥
 == 0)

312 
	`∑nic
("ilock:ÇoÅype");

314 
	}
}

318 
	$iu∆ock
(
öode
 *
ù
)

320 if(
ù
 =0 || !
	`hﬁdög¶ìp
(&ù->
lock
Ë|| ip->
ªf
 < 1)

321 
	`∑nic
("iunlock");

323 
	`ªÀa£¶ìp
(&
ù
->
lock
);

324 
	}
}

334 
	$ùut
(
öode
 *
ù
)

336 
	`acquúe
(&
iˇche
.
lock
);

338 if(
ù
->
ªf
 =1 && ip->
vÆid
 && ip->
∆ök
 == 0){

343 
	`acquúe¶ìp
(&
ù
->
lock
);

345 
	`ªÀa£
(&
iˇche
.
lock
);

347 
	`ôrunc
(
ù
);

348 
ù
->
ty≥
 = 0;

349 
	`iupd©e
(
ù
);

350 
ù
->
vÆid
 = 0;

352 
	`ªÀa£¶ìp
(&
ù
->
lock
);

354 
	`acquúe
(&
iˇche
.
lock
);

357 
ù
->
ªf
--;

358 
	`ªÀa£
(&
iˇche
.
lock
);

359 
	}
}

363 
	$iu∆ockput
(
öode
 *
ù
)

365 
	`iu∆ock
(
ù
);

366 
	`ùut
(
ù
);

367 
	}
}

378 
uöt


379 
	$bm≠
(
öode
 *
ù
, 
uöt
 
bn
)

381 
uöt
 
addr
, *
a
;

382 
buf
 *
bp
;

384 if(
bn
 < 
NDIRECT
){

385 if((
addr
 = 
ù
->
addrs
[
bn
]) == 0)

386 
ù
->
addrs
[
bn
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

387  
addr
;

389 
bn
 -
NDIRECT
;

391 if(
bn
 < 
NINDIRECT
){

393 if((
addr
 = 
ù
->
addrs
[
NDIRECT
]) == 0)

394 
ù
->
addrs
[
NDIRECT
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

395 
bp
 = 
	`bªad
(
ù
->
dev
, 
addr
);

396 
a
 = (
uöt
*)
bp
->
d©a
;

397 if((
addr
 = 
a
[
bn
]) == 0){

398 
a
[
bn
] = 
addr
 = 
	`bÆloc
(
ù
->
dev
);

399 
	`log_wrôe
(
bp
);

401 
	`bªl£
(
bp
);

402  
addr
;

405 
	`∑nic
("bmap: out ofÑange");

406 
	}
}

414 
	$ôrunc
(
öode
 *
ù
)

416 
i
, 
j
;

417 
buf
 *
bp
;

418 
uöt
 *
a
;

420 
i
 = 0; i < 
NDIRECT
; i++){

421 if(
ù
->
addrs
[
i
]){

422 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
i
]);

423 
ù
->
addrs
[
i
] = 0;

427 if(
ù
->
addrs
[
NDIRECT
]){

428 
bp
 = 
	`bªad
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

429 
a
 = (
uöt
*)
bp
->
d©a
;

430 
j
 = 0; j < 
NINDIRECT
; j++){

431 if(
a
[
j
])

432 
	`b‰ì
(
ù
->
dev
, 
a
[
j
]);

434 
	`bªl£
(
bp
);

435 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

436 
ù
->
addrs
[
NDIRECT
] = 0;

439 
ù
->
size
 = 0;

440 
	`iupd©e
(
ù
);

441 
	}
}

446 
	$°©i
(
öode
 *
ù
, 
°©
 *
°
)

448 
°
->
dev
 = 
ù
->dev;

449 
°
->
öo
 = 
ù
->
öum
;

450 
°
->
ty≥
 = 
ù
->type;

451 
°
->
∆ök
 = 
ù
->nlink;

452 
°
->
size
 = 
ù
->size;

453 
	}
}

460 
	$ªadi
(
öode
 *
ù
, 
u£r_d°
, 
uöt64
 
d°
, 
uöt
 
off
, uöà
n
)

462 
uöt
 
tŸ
, 
m
;

463 
buf
 *
bp
;

465 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

467 if(
off
 + 
n
 > 
ù
->
size
)

468 
n
 = 
ù
->
size
 - 
off
;

470 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
d°
+=m){

471 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

472 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

473 if(
	`eôhî_c›yout
(
u£r_d°
, 
d°
, 
bp
->
d©a
 + (
off
 % 
BSIZE
), 
m
) == -1) {

474 
	`bªl£
(
bp
);

477 
	`bªl£
(
bp
);

479  
n
;

480 
	}
}

487 
	$wrôei
(
öode
 *
ù
, 
u£r_§c
, 
uöt64
 
§c
, 
uöt
 
off
, uöà
n
)

489 
uöt
 
tŸ
, 
m
;

490 
buf
 *
bp
;

492 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

494 if(
off
 + 
n
 > 
MAXFILE
*
BSIZE
)

497 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
§c
+=m){

498 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

499 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

500 if(
	`eôhî_c›yö
(
bp
->
d©a
 + (
off
 % 
BSIZE
), 
u£r_§c
, 
§c
, 
m
) == -1) {

501 
	`bªl£
(
bp
);

504 
	`log_wrôe
(
bp
);

505 
	`bªl£
(
bp
);

508 if(
n
 > 0){

509 if(
off
 > 
ù
->
size
)

510 
ù
->
size
 = 
off
;

514 
	`iupd©e
(
ù
);

517  
n
;

518 
	}
}

523 
	$«mecmp
(c⁄° *
s
, c⁄° *
t
)

525  
	`°∫cmp
(
s
, 
t
, 
DIRSIZ
);

526 
	}
}

530 
öode
*

531 
	$dúlookup
(
öode
 *
dp
, *
«me
, 
uöt
 *
poff
)

533 
uöt
 
off
, 
öum
;

534 
dúít
 
de
;

536 if(
dp
->
ty≥
 !
T_DIR
)

537 
	`∑nic
("dirlookupÇot DIR");

539 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

540 if(
	`ªadi
(
dp
, 0, (
uöt64
)&
de
, 
off
, (de)) != (de))

541 
	`∑nic
("dirlookupÑead");

542 if(
de
.
öum
 == 0)

544 if(
	`«mecmp
(
«me
, 
de
.name) == 0){

546 if(
poff
)

547 *
poff
 = 
off
;

548 
öum
 = 
de
.inum;

549  
	`igë
(
dp
->
dev
, 
öum
);

554 
	}
}

558 
	$dúlök
(
öode
 *
dp
, *
«me
, 
uöt
 
öum
)

560 
off
;

561 
dúít
 
de
;

562 
öode
 *
ù
;

565 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, 0)) != 0){

566 
	`ùut
(
ù
);

571 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

572 if(
	`ªadi
(
dp
, 0, (
uöt64
)&
de
, 
off
, (de)) != (de))

573 
	`∑nic
("dirlinkÑead");

574 if(
de
.
öum
 == 0)

578 
	`°∫˝y
(
de
.
«me
,Çame, 
DIRSIZ
);

579 
de
.
öum
 = inum;

580 if(
	`wrôei
(
dp
, 0, (
uöt64
)&
de
, 
off
, (de)) != (de))

581 
	`∑nic
("dirlink");

584 
	}
}

601 
	$skùñem
(*
∑th
, *
«me
)

603 *
s
;

604 
Àn
;

606 *
∑th
 == '/')

607 
∑th
++;

608 if(*
∑th
 == 0)

610 
s
 = 
∑th
;

611 *
∑th
 != '/' && *path != 0)

612 
∑th
++;

613 
Àn
 = 
∑th
 - 
s
;

614 if(
Àn
 >
DIRSIZ
)

615 
	`memmove
(
«me
, 
s
, 
DIRSIZ
);

617 
	`memmove
(
«me
, 
s
, 
Àn
);

618 
«me
[
Àn
] = 0;

620 *
∑th
 == '/')

621 
∑th
++;

622  
∑th
;

623 
	}
}

629 
öode
*

630 
	$«mex
(*
∑th
, 
«meù¨ít
, *
«me
)

632 
öode
 *
ù
, *
√xt
;

634 if(*
∑th
 == '/')

635 
ù
 = 
	`igë
(
ROOTDEV
, 
ROOTINO
);

637 
ù
 = 
	`idup
(
	`my¥oc
()->
cwd
);

639 (
∑th
 = 
	`skùñem
’©h, 
«me
)) != 0){

640 
	`ûock
(
ù
);

641 if(
ù
->
ty≥
 !
T_DIR
){

642 
	`iu∆ockput
(
ù
);

645 if(
«meù¨ít
 && *
∑th
 == '\0'){

647 
	`iu∆ock
(
ù
);

648  
ù
;

650 if((
√xt
 = 
	`dúlookup
(
ù
, 
«me
, 0)) == 0){

651 
	`iu∆ockput
(
ù
);

654 
	`iu∆ockput
(
ù
);

655 
ù
 = 
√xt
;

657 if(
«meù¨ít
){

658 
	`ùut
(
ù
);

661  
ù
;

662 
	}
}

664 
öode
*

665 
	$«mei
(*
∑th
)

667 
«me
[
DIRSIZ
];

668  
	`«mex
(
∑th
, 0, 
«me
);

669 
	}
}

671 
öode
*

672 
	$«meù¨ít
(*
∑th
, *
«me
)

674  
	`«mex
(
∑th
, 1, 
«me
);

675 
	}
}

	@kernel/fs.h

5 
	#ROOTINO
 1

6 
	#BSIZE
 1024

7 

	)

14 
	ssu≥rblock
 {

15 
uöt
 
	mmagic
;

16 
uöt
 
	msize
;

17 
uöt
 
	mnblocks
;

18 
uöt
 
	mnöodes
;

19 
uöt
 
	m∆og
;

20 
uöt
 
	mlog°¨t
;

21 
uöt
 
	möode°¨t
;

22 
uöt
 
	mbm≠°¨t
;

25 
	#FSMAGIC
 0x10203040

	)

27 
	#NDIRECT
 12

	)

28 
	#NINDIRECT
 (
BSIZE
 / (
uöt
))

	)

29 
	#MAXFILE
 (
NDIRECT
 + 
NINDIRECT
)

	)

32 
	sdöode
 {

33 
	mty≥
;

34 
	mmaj‹
;

35 
	mmö‹
;

36 
	m∆ök
;

37 
uöt
 
	msize
;

38 
uöt
 
	maddrs
[
NDIRECT
+1];

42 
	#IPB
 (
BSIZE
 / (
döode
))

	)

45 
	#IBLOCK
(
i
, 
sb
Ë((iË/ 
IPB
 + sb.
öode°¨t
)

	)

48 
	#BPB
 (
BSIZE
*8)

	)

51 
	#BBLOCK
(
b
, 
sb
Ë((b)/
BPB
 + sb.
bm≠°¨t
)

	)

54 
	#DIRSIZ
 14

	)

56 
	sdúít
 {

57 
ush‹t
 
	möum
;

58 
	m«me
[
DIRSIZ
];

	@kernel/kalloc.c

5 
	~"ty≥s.h
"

6 
	~"∑øm.h
"

7 
	~"memœyout.h
"

8 
	~"•ölock.h
"

9 
	~"riscv.h
"

10 
	~"defs.h
"

12 
‰ìønge
(*
∑_°¨t
, *
∑_íd
);

14 
íd
[];

17 
	srun
 {

18 
run
 *
	m√xt
;

22 
•ölock
 
	mlock
;

23 
run
 *
	m‰ìli°
;

24 } 
	gkmem
;

27 
	$köô
()

29 
	`öôlock
(&
kmem
.
lock
, "kmem");

30 
	`‰ìønge
(
íd
, (*)
PHYSTOP
);

31 
	}
}

34 
	$‰ìønge
(*
∑_°¨t
, *
∑_íd
)

36 *
p
;

37 
p
 = (*)
	`PGROUNDUP
((
uöt64
)
∑_°¨t
);

38 ; 
p
 + 
PGSIZE
 <(*)
∑_íd
;Ö += PGSIZE)

39 
	`k‰ì
(
p
);

40 
	}
}

47 
	$k‰ì
(*
∑
)

49 
run
 *
r
;

51 if(((
uöt64
)
∑
 % 
PGSIZE
Ë!0 || (*Ì®< 
íd
 || (uöt64Ì®>
PHYSTOP
)

52 
	`∑nic
("kfree");

55 
	`mem£t
(
∑
, 1, 
PGSIZE
);

57 
r
 = (
run
*)
∑
;

59 
	`acquúe
(&
kmem
.
lock
);

60 
r
->
√xt
 = 
kmem
.
‰ìli°
;

61 
kmem
.
‰ìli°
 = 
r
;

62 
	`ªÀa£
(&
kmem
.
lock
);

63 
	}
}

69 
	$kÆloc
()

71 
run
 *
r
;

73 
	`acquúe
(&
kmem
.
lock
);

74 
r
 = 
kmem
.
‰ìli°
;

75 if(
r
)

76 
kmem
.
‰ìli°
 = 
r
->
√xt
;

77 
	`ªÀa£
(&
kmem
.
lock
);

79 if(
r
)

80 
	`mem£t
((*)
r
, 5, 
PGSIZE
);

81  (*)
r
;

82 
	}
}

	@kernel/list.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"•ölock.h
"

5 
	~"riscv.h
"

6 
	~"defs.h
"

13 
	$l°_öô
(
li°
 *
l°
)

15 
l°
->
√xt
 =Üst;

16 
l°
->
¥ev
 =Üst;

17 
	}
}

20 
	$l°_em±y
(
li°
 *
l°
) {

21  
l°
->
√xt
 ==Üst;

22 
	}
}

25 
	$l°_ªmove
(
li°
 *
e
) {

26 
e
->
¥ev
->
√xt
 =É->next;

27 
e
->
√xt
->
¥ev
 =É->prev;

28 
	}
}

31 
	$l°_p›
(
li°
 *
l°
) {

32 if(
l°
->
√xt
 ==Üst)

33 
	`∑nic
("lst_pop");

34 
li°
 *
p
 = 
l°
->
√xt
;

35 
	`l°_ªmove
(
p
);

36  (*)
p
;

37 
	}
}

40 
	$l°_push
(
li°
 *
l°
, *
p
)

42 
li°
 *
e
 = (li° *Ë
p
;

43 
e
->
√xt
 = 
l°
->next;

44 
e
->
¥ev
 = 
l°
;

45 
l°
->
√xt
->
¥ev
 = 
p
;

46 
l°
->
√xt
 = 
e
;

47 
	}
}

50 
	$l°_¥öt
(
li°
 *
l°
)

52 
li°
 *
p
 = 
l°
->
√xt
;Ö !=Üst;Ö =Ö->next) {

53 
	`¥ötf
(" %p", 
p
);

55 
	`¥ötf
("\n");

56 
	}
}

	@kernel/log.c

1 
	~"ty≥s.h
"

2 
	~"riscv.h
"

3 
	~"defs.h
"

4 
	~"∑øm.h
"

5 
	~"•ölock.h
"

6 
	~"¶ì∂ock.h
"

7 
	~"fs.h
"

8 
	~"buf.h
"

35 
	sloghódî
 {

36 
	mn
;

37 
	mblock
[
LOGSIZE
];

40 
	slog
 {

41 
•ölock
 
	mlock
;

42 
	m°¨t
;

43 
	msize
;

44 
	mout°™dög
;

45 
	mcommôtög
;

46 
	mdev
;

47 
loghódî
 
	mlh
;

49 
log
 
	glog
[
NDISK
];

51 
ªcovî_‰om_log
();

52 
commô
();

55 
	$öôlog
(
dev
, 
su≥rblock
 *
sb
)

57 i‡((
loghódî
Ë>
BSIZE
)

58 
	`∑nic
("initlog:Åoo bigÜogheader");

60 
	`öôlock
(&
log
[
dev
].
lock
, "log");

61 
log
[
dev
].
°¨t
 = 
sb
->
log°¨t
;

62 
log
[
dev
].
size
 = 
sb
->
∆og
;

63 
log
[
dev
].dev = dev;

64 
	`ªcovî_‰om_log
(
dev
);

65 
	}
}

69 
	$ö°Æl_å™s
(
dev
)

71 
èû
;

73 
èû
 = 0;Åaû < 
log
[
dev
].
lh
.
n
;Åail++) {

74 
buf
 *
lbuf
 = 
	`bªad
(
dev
, 
log
[dev].
°¨t
+
èû
+1);

75 
buf
 *
dbuf
 = 
	`bªad
(
dev
, 
log
[dev].
lh
.
block
[
èû
]);

76 
	`memmove
(
dbuf
->
d©a
, 
lbuf
->d©a, 
BSIZE
);

77 
	`bwrôe
(
dbuf
);

78 
	`bu≈ö
(
dbuf
);

79 
	`bªl£
(
lbuf
);

80 
	`bªl£
(
dbuf
);

82 
	}
}

86 
	$ªad_hód
(
dev
)

88 
buf
 *bu‡
	`bªad
(
dev
, 
log
[dev].
°¨t
);

89 
loghódî
 *
lh
 = (loghódî *Ë(
buf
->
d©a
);

90 
i
;

91 
log
[
dev
].
lh
.
n
 =Üh->n;

92 
i
 = 0; i < 
log
[
dev
].
lh
.
n
; i++) {

93 
log
[
dev
].
lh
.
block
[
i
] =Üh->block[i];

95 
	`bªl£
(
buf
);

96 
	}
}

102 
	$wrôe_hód
(
dev
)

104 
buf
 *bu‡
	`bªad
(
dev
, 
log
[dev].
°¨t
);

105 
loghódî
 *
hb
 = (loghódî *Ë(
buf
->
d©a
);

106 
i
;

107 
hb
->
n
 = 
log
[
dev
].
lh
.n;

108 
i
 = 0; i < 
log
[
dev
].
lh
.
n
; i++) {

109 
hb
->
block
[
i
] = 
log
[
dev
].
lh
.block[i];

111 
	`bwrôe
(
buf
);

112 
	`bªl£
(
buf
);

113 
	}
}

116 
	$ªcovî_‰om_log
(
dev
)

118 
	`ªad_hód
(
dev
);

119 
	`ö°Æl_å™s
(
dev
);

120 
log
[
dev
].
lh
.
n
 = 0;

121 
	`wrôe_hód
(
dev
);

122 
	}
}

126 
	$begö_›
(
dev
)

128 
	`acquúe
(&
log
[
dev
].
lock
);

130 if(
log
[
dev
].
commôtög
){

131 
	`¶ìp
(&
log
, &log[
dev
].
lock
);

132 } if(
log
[
dev
].
lh
.
n
 + (log[dev].
out°™dög
+1)*
MAXOPBLOCKS
 > 
LOGSIZE
){

134 
	`¶ìp
(&
log
, &log[
dev
].
lock
);

136 
log
[
dev
].
out°™dög
 += 1;

137 
	`ªÀa£
(&
log
[
dev
].
lock
);

141 
	}
}

146 
	$íd_›
(
dev
)

148 
do_commô
 = 0;

150 
	`acquúe
(&
log
[
dev
].
lock
);

151 
log
[
dev
].
out°™dög
 -= 1;

152 if(
log
[
dev
].
commôtög
)

153 
	`∑nic
("log[dev].committing");

154 if(
log
[
dev
].
out°™dög
 == 0){

155 
do_commô
 = 1;

156 
log
[
dev
].
commôtög
 = 1;

161 
	`wakeup
(&
log
);

163 
	`ªÀa£
(&
log
[
dev
].
lock
);

165 if(
do_commô
){

168 
	`commô
(
dev
);

169 
	`acquúe
(&
log
[
dev
].
lock
);

170 
log
[
dev
].
commôtög
 = 0;

171 
	`wakeup
(&
log
);

172 
	`ªÀa£
(&
log
[
dev
].
lock
);

174 
	}
}

178 
	$wrôe_log
(
dev
)

180 
èû
;

182 
èû
 = 0;Åaû < 
log
[
dev
].
lh
.
n
;Åail++) {

183 
buf
 *
to
 = 
	`bªad
(
dev
, 
log
[dev].
°¨t
+
èû
+1);

184 
buf
 *
‰om
 = 
	`bªad
(
dev
, 
log
[dev].
lh
.
block
[
èû
]);

185 
	`memmove
(
to
->
d©a
, 
‰om
->d©a, 
BSIZE
);

186 
	`bwrôe
(
to
);

187 
	`bªl£
(
‰om
);

188 
	`bªl£
(
to
);

190 
	}
}

193 
	$commô
(
dev
)

195 i‡(
log
[
dev
].
lh
.
n
 > 0) {

196 
	`wrôe_log
(
dev
);

197 
	`wrôe_hód
(
dev
);

198 
	`ö°Æl_å™s
(
dev
);

199 
log
[
dev
].
lh
.
n
 = 0;

200 
	`wrôe_hód
(
dev
);

202 
	}
}

214 
	$log_wrôe
(
buf
 *
b
)

216 
i
;

218 
dev
 = 
b
->dev;

219 i‡(
log
[
dev
].
lh
.
n
 >
LOGSIZE
 ||Üog[dev].lh.¿>log[dev].
size
 - 1)

220 
	`∑nic
("too bigáÅransaction");

221 i‡(
log
[
dev
].
out°™dög
 < 1)

222 
	`∑nic
("log_write outside ofÅrans");

224 
	`acquúe
(&
log
[
dev
].
lock
);

225 
i
 = 0; i < 
log
[
dev
].
lh
.
n
; i++) {

226 i‡(
log
[
dev
].
lh
.
block
[
i
] =
b
->
blockno
)

229 
log
[
dev
].
lh
.
block
[
i
] = 
b
->
blockno
;

230 i‡(
i
 =
log
[
dev
].
lh
.
n
) {

231 
	`bpö
(
b
);

232 
log
[
dev
].
lh
.
n
++;

234 
	`ªÀa£
(&
log
[
dev
].
lock
);

235 
	}
}

	@kernel/main.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"riscv.h
"

5 
	~"•ölock.h
"

6 
	~"¶ì∂ock.h
"

7 
	~"fs.h
"

8 
	~"fûe.h
"

9 
	~"defs.h
"

11 vﬁ©ûê
	g°¨ãd
 = 0;

15 
	$maö
()

17 if(
	`˝uid
() == 0){

18 
	`c⁄sﬁeöô
();

19 
	`¥ötföô
();

20 
	`¥ötf
("\n");

21 
	`¥ötf
("xv6 kernel is booting\n");

22 
	`¥ötf
("\n");

23 
	`köô
();

24 
	`kvmöô
();

25 
	`kvmöôh¨t
();

26 
	`¥ocöô
();

27 
	`å≠öô
();

28 
	`å≠öôh¨t
();

29 
	`∂icöô
();

30 
	`∂icöôh¨t
();

31 
	`böô
();

32 
	`iöô
();

33 
	`fûeöô
();

34 
	`vútio_disk_öô
(
	`mö‹
(
ROOTDEV
));

35 
	`pci_öô
();

36 
	`socköô
();

37 
	`u£röô
();

38 
	`__sync_synchr⁄ize
();

39 
°¨ãd
 = 1;

41 
°¨ãd
 == 0)

43 
	`__sync_synchr⁄ize
();

44 
	`¥ötf
("h¨à%d sèπög\n", 
	`˝uid
());

45 
	`kvmöôh¨t
();

46 
	`å≠öôh¨t
();

47 
	`∂icöôh¨t
();

50 
	`scheduÀr
();

51 
	}
}

	@kernel/memlayout.h

21 
	#UART0
 0x10000000L

	)

22 
	#UART0_IRQ
 10

	)

25 
	#VIRTION
(
n
Ë(0x10000000L + (“+1Ë* 0x1000))

	)

26 
	#VIRTIO0_IRQ
 1

	)

27 
	#VIRTIO1_IRQ
 2

	)

29 
	#E1000_IRQ
 33

	)

32 
	#CLINT
 0x2000000L

	)

33 
	#CLINT_MTIMECMP
(
h¨tid
Ë(
CLINT
 + 0x4000 + 8*(h¨tid))

	)

34 
	#CLINT_MTIME
 (
CLINT
 + 0xBFF8)

35 

	)

37 
	#PLIC
 0x0c000000L

	)

38 
	#PLIC_PRIORITY
 (
PLIC
 + 0x0)

	)

39 
	#PLIC_PENDING
 (
PLIC
 + 0x1000)

	)

40 
	#PLIC_MENABLE
(
h¨t
Ë(
PLIC
 + 0x2000 + (h¨t)*0x100)

	)

41 
	#PLIC_SENABLE
(
h¨t
Ë(
PLIC
 + 0x2080 + (h¨t)*0x100)

	)

42 
	#PLIC_MPRIORITY
(
h¨t
Ë(
PLIC
 + 0x200000 + (h¨t)*0x2000)

	)

43 
	#PLIC_SPRIORITY
(
h¨t
Ë(
PLIC
 + 0x201000 + (h¨t)*0x2000)

	)

44 
	#PLIC_MCLAIM
(
h¨t
Ë(
PLIC
 + 0x200004 + (h¨t)*0x2000)

	)

45 
	#PLIC_SCLAIM
(
h¨t
Ë(
PLIC
 + 0x201004 + (h¨t)*0x2000)

	)

50 
	#KERNBASE
 0x80000000L

	)

51 
	#PHYSTOP
 (
KERNBASE
 + 128*1024*1024)

	)

55 
	#TRAMPOLINE
 (
MAXVA
 - 
PGSIZE
)

	)

59 
	#KSTACK
(
p
Ë(
TRAMPOLINE
 - (’)+1)* 2*
PGSIZE
)

	)

70 
	#TRAPFRAME
 (
TRAMPOLINE
 - 
PGSIZE
)

	)

	@kernel/net.c

5 
	~"ty≥s.h
"

6 
	~"∑øm.h
"

7 
	~"memœyout.h
"

8 
	~"riscv.h
"

9 
	~"•ölock.h
"

10 
	~"¥oc.h
"

11 
	~"√t.h
"

12 
	~"defs.h
"

14 
uöt32
 
	gloˇl_ù
 = 
MAKE_IP_ADDR
(10, 0, 2, 15);

15 
uöt8
 
	gloˇl_mac
[
ETHADDR_LEN
] = { 0x52, 0x54, 0x00, 0x12, 0x34, 0x56 };

16 
uöt8
 
	gbrﬂdˇ°_mac
[
ETHADDR_LEN
] = { 0xFF, 0XFF, 0XFF, 0XFF, 0XFF, 0XFF };

21 
	$mbuÂuŒ
(
mbuf
 *
m
, 
Àn
)

23 *
tmp
 = 
m
->
hód
;

24 i‡(
m
->
Àn
 <Üen)

26 
m
->
Àn
 -=Üen;

27 
m
->
hód
 +
Àn
;

28  
tmp
;

29 
	}
}

33 
	$mbuÂush
(
mbuf
 *
m
, 
Àn
)

35 
m
->
hód
 -
Àn
;

36 i‡(
m
->
hód
 < m->
buf
)

37 
	`∑nic
("mbufpush");

38 
m
->
Àn
 +=Üen;

39  
m
->
hód
;

40 
	}
}

44 
	$mbuÂut
(
mbuf
 *
m
, 
Àn
)

46 *
tmp
 = 
m
->
hód
 + m->
Àn
;

47 
m
->
Àn
 +=Üen;

48 i‡(
m
->
Àn
 > 
MBUF_SIZE
)

49 
	`∑nic
("mbufput");

50  
tmp
;

51 
	}
}

56 
	$mbu·rim
(
mbuf
 *
m
, 
Àn
)

58 i‡(
Àn
 > 
m
->len)

60 
m
->
Àn
 -=Üen;

61  
m
->
hód
 + m->
Àn
;

62 
	}
}

65 
mbuf
 *

66 
	$mbuÁŒoc
(
hódroom
)

68 
mbuf
 *
m
;

70 i‡(
hódroom
 > 
MBUF_SIZE
)

72 
m
 = 
	`kÆloc
();

73 i‡(
m
 == 0)

75 
m
->
√xt
 = 0;

76 
m
->
hód
 = (*)m->
buf
 + 
hódroom
;

77 
m
->
Àn
 = 0;

78 
	`mem£t
(
m
->
buf
, 0, (m->buf));

79  
m
;

80 
	}
}

84 
	$mbuf‰ì
(
mbuf
 *
m
)

86 
	`k‰ì
(
m
);

87 
	}
}

91 
	$mbufq_pushèû
(
mbufq
 *
q
, 
mbuf
 *
m
)

93 
m
->
√xt
 = 0;

94 i‡(!
q
->
hód
){

95 
q
->
hód
 = q->
èû
 = 
m
;

98 
q
->
èû
->
√xt
 = 
m
;

99 
q
->
èû
 = 
m
;

100 
	}
}

103 
mbuf
 *

104 
	$mbufq_p›hód
(
mbufq
 *
q
)

106 
mbuf
 *
hód
 = 
q
->head;

107 i‡(!
hód
)

109 
q
->
hód
 = hód->
√xt
;

110  
hód
;

111 
	}
}

115 
	$mbufq_em±y
(
mbufq
 *
q
)

117  
q
->
hód
 == 0;

118 
	}
}

122 
	$mbufq_öô
(
mbufq
 *
q
)

124 
q
->
hód
 = 0;

125 
	}
}

130 
	$ö_cksum
(c⁄° *
addr
, 
Àn
)

132 
∆e·
 = 
Àn
;

133 c⁄° *
w
 = (c⁄° *)
addr
;

134 
sum
 = 0;

135 
™swî
 = 0;

142 
∆e·
 > 1) {

143 
sum
 +*
w
++;

144 
∆e·
 -= 2;

148 i‡(
∆e·
 == 1) {

149 *(*)(&
™swî
Ë*(c⁄° *)
w
;

150 
sum
 +
™swî
;

154 
sum
 = (sum & 0xffff) + (sum >> 16);

155 
sum
 += (sum >> 16);

158 
™swî
 = ~
sum
;

159  
™swî
;

160 
	}
}

164 
	$√t_tx_ëh
(
mbuf
 *
m
, 
uöt16
 
ëhty≥
)

166 
ëh
 *
ëhhdr
;

168 
ëhhdr
 = 
	`mbuÂushhdr
(
m
, *ethhdr);

169 
	`memmove
(
ëhhdr
->
sho°
, 
loˇl_mac
, 
ETHADDR_LEN
);

173 
	`memmove
(
ëhhdr
->
dho°
, 
brﬂdˇ°_mac
, 
ETHADDR_LEN
);

174 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ëhty≥
);

175 i‡(
	`e1000_å™smô
(
m
)) {

176 
	`mbuf‰ì
(
m
);

178 
	}
}

182 
	$√t_tx_ù
(
mbuf
 *
m
, 
uöt8
 
¥Ÿo
, 
uöt32
 
dù
)

184 
ù
 *
ùhdr
;

187 
ùhdr
 = 
	`mbuÂushhdr
(
m
, *iphdr);

188 
	`mem£t
(
ùhdr
, 0, (*iphdr));

189 
ùhdr
->
ù_vhl
 = (4 << 4) | (20 >> 2);

190 
ùhdr
->
ù_p
 = 
¥Ÿo
;

191 
ùhdr
->
ù_§c
 = 
	`ht⁄l
(
loˇl_ù
);

192 
ùhdr
->
ù_d°
 = 
	`ht⁄l
(
dù
);

193 
ùhdr
->
ù_Àn
 = 
	`ht⁄s
(
m
->
Àn
);

194 
ùhdr
->
ù_âl
 = 100;

195 
ùhdr
->
ù_sum
 = 
	`ö_cksum
((*)iphdr, (*iphdr));

198 
	`√t_tx_ëh
(
m
, 
ETHTYPE_IP
);

199 
	}
}

203 
	$√t_tx_udp
(
mbuf
 *
m
, 
uöt32
 
dù
,

204 
uöt16
 
•‹t
, uöt16 
dp‹t
)

206 
udp
 *
udphdr
;

209 
udphdr
 = 
	`mbuÂushhdr
(
m
, *udphdr);

210 
udphdr
->
•‹t
 = 
	`ht⁄s
(sport);

211 
udphdr
->
dp‹t
 = 
	`ht⁄s
(dport);

212 
udphdr
->
uÀn
 = 
	`ht⁄s
(
m
->
Àn
);

213 
udphdr
->
sum
 = 0;

216 
	`√t_tx_ù
(
m
, 
IPPROTO_UDP
, 
dù
);

217 
	}
}

221 
	$√t_tx_¨p
(
uöt16
 
›
, 
uöt8
 
dmac
[
ETHADDR_LEN
], 
uöt32
 
dù
)

223 
mbuf
 *
m
;

224 
¨p
 *
¨phdr
;

226 
m
 = 
	`mbuÁŒoc
(
MBUF_DEFAULT_HEADROOM
);

227 i‡(!
m
)

231 
¨phdr
 = 
	`mbuÂuthdr
(
m
, *arphdr);

232 
¨phdr
->
hrd
 = 
	`ht⁄s
(
ARP_HRD_ETHER
);

233 
¨phdr
->
¥o
 = 
	`ht⁄s
(
ETHTYPE_IP
);

234 
¨phdr
->
h 
 = 
ETHADDR_LEN
;

235 
¨phdr
->
∂n
 = (
uöt32
);

236 
¨phdr
->
›
 = 
	`ht⁄s
(op);

239 
	`memmove
(
¨phdr
->
sha
, 
loˇl_mac
, 
ETHADDR_LEN
);

240 
¨phdr
->
sù
 = 
	`ht⁄l
(
loˇl_ù
);

241 
	`memmove
(
¨phdr
->
tha
, 
dmac
, 
ETHADDR_LEN
);

242 
¨phdr
->
tù
 = 
	`ht⁄l
(
dù
);

245 
	`√t_tx_ëh
(
m
, 
ETHTYPE_ARP
);

247 
	}
}

251 
	$√t_rx_¨p
(
mbuf
 *
m
)

253 
¨p
 *
¨phdr
;

254 
uöt8
 
smac
[
ETHADDR_LEN
];

255 
uöt32
 
sù
, 
tù
;

257 
¨phdr
 = 
	`mbuÂuŒhdr
(
m
, *arphdr);

258 i‡(!
¨phdr
)

259 
d⁄e
;

262 i‡(
	`¡ohs
(
¨phdr
->
hrd
Ë!
ARP_HRD_ETHER
 ||

263 
	`¡ohs
(
¨phdr
->
¥o
Ë!
ETHTYPE_IP
 ||

264 
¨phdr
->
h 
 !
ETHADDR_LEN
 ||

265 
¨phdr
->
∂n
 !(
uöt32
)) {

266 
d⁄e
;

271 
tù
 = 
	`¡ohl
(
¨phdr
->tip);

272 i‡(
	`¡ohs
(
¨phdr
->
›
Ë!
ARP_OP_REQUEST
 || 
tù
 !
loˇl_ù
)

273 
d⁄e
;

276 
	`memmove
(
smac
, 
¨phdr
->
sha
, 
ETHADDR_LEN
);

277 
sù
 = 
	`¡ohl
(
¨phdr
->sip);

278 
	`√t_tx_¨p
(
ARP_OP_REPLY
, 
smac
, 
sù
);

280 
d⁄e
:

281 
	`mbuf‰ì
(
m
);

282 
	}
}

286 
	$√t_rx_udp
(
mbuf
 *
m
, 
uöt16
 
Àn
, 
ù
 *
ùhdr
)

288 
udp
 *
udphdr
;

289 
uöt32
 
sù
;

290 
uöt16
 
•‹t
, 
dp‹t
;

293 
udphdr
 = 
	`mbuÂuŒhdr
(
m
, *udphdr);

294 i‡(!
udphdr
)

295 
Áû
;

300 i‡(
	`¡ohs
(
udphdr
->
uÀn
Ë!
Àn
)

301 
Áû
;

302 
Àn
 -(*
udphdr
);

303 i‡(
Àn
 > 
m
->len)

304 
Áû
;

306 
	`mbu·rim
(
m
, m->
Àn
 -Üen);

309 
sù
 = 
	`¡ohl
(
ùhdr
->
ù_§c
);

310 
•‹t
 = 
	`¡ohs
(
udphdr
->sport);

311 
dp‹t
 = 
	`¡ohs
(
udphdr
->dport);

312 
	`sockªcvudp
(
m
, 
sù
, 
dp‹t
, 
•‹t
);

315 
Áû
:

316 
	`mbuf‰ì
(
m
);

317 
	}
}

321 
	$√t_rx_ù
(
mbuf
 *
m
)

323 
ù
 *
ùhdr
;

324 
uöt16
 
Àn
;

326 
ùhdr
 = 
	`mbuÂuŒhdr
(
m
, *iphdr);

327 i‡(!
ùhdr
)

328 
Áû
;

331 i‡(
ùhdr
->
ù_vhl
 != ((4 << 4) | (20 >> 2)))

332 
Áû
;

334 i‡(
	`ö_cksum
((*)
ùhdr
, (*iphdr)))

335 
Áû
;

337 i‡(
	`ht⁄s
(
ùhdr
->
ù_off
) != 0)

338 
Áû
;

340 i‡(
	`ht⁄l
(
ùhdr
->
ù_d°
Ë!
loˇl_ù
)

341 
Áû
;

343 i‡(
ùhdr
->
ù_p
 !
IPPROTO_UDP
)

344 
Áû
;

346 
Àn
 = 
	`¡ohs
(
ùhdr
->
ù_Àn
) - (*iphdr);

347 
	`√t_rx_udp
(
m
, 
Àn
, 
ùhdr
);

350 
Áû
:

351 
	`mbuf‰ì
(
m
);

352 
	}
}

356 
	$√t_rx
(
mbuf
 *
m
)

358 
ëh
 *
ëhhdr
;

359 
uöt16
 
ty≥
;

361 
ëhhdr
 = 
	`mbuÂuŒhdr
(
m
, *ethhdr);

362 i‡(!
ëhhdr
) {

363 
	`mbuf‰ì
(
m
);

367 
ty≥
 = 
	`¡ohs
(
ëhhdr
->type);

368 i‡(
ty≥
 =
ETHTYPE_IP
)

369 
	`√t_rx_ù
(
m
);

370 i‡(
ty≥
 =
ETHTYPE_ARP
)

371 
	`√t_rx_¨p
(
m
);

373 
	`mbuf‰ì
(
m
);

374 
	}
}

	@kernel/net.h

5 
	#MBUF_SIZE
 2048

	)

6 
	#MBUF_DEFAULT_HEADROOM
 128

	)

8 
	smbuf
 {

9 
mbuf
 *
	m√xt
;

10 *
	mhód
;

11 
	mÀn
;

12 
	mbuf
[
MBUF_SIZE
];

15 *
mbuÂuŒ
(
mbuf
 *
m
, 
Àn
);

16 *
mbuÂush
(
mbuf
 *
m
, 
Àn
);

17 *
mbuÂut
(
mbuf
 *
m
, 
Àn
);

18 *
mbu·rim
(
mbuf
 *
m
, 
Àn
);

28 
	#mbuÂuŒhdr
(
mbuf
, 
hdr
Ë(
	`ty≥of
(hdr)*)
	`mbuÂuŒ
(mbuf, (hdr))

	)

29 
	#mbuÂushhdr
(
mbuf
, 
hdr
Ë(
	`ty≥of
(hdr)*)
	`mbuÂush
(mbuf, (hdr))

	)

30 
	#mbuÂuthdr
(
mbuf
, 
hdr
Ë(
	`ty≥of
(hdr)*)
	`mbuÂut
(mbuf, (hdr))

	)

31 
	#mbu·rimhdr
(
mbuf
, 
hdr
Ë(
	`ty≥of
(hdr)*)
	`mbu·rim
(mbuf, (hdr))

	)

33 
mbuf
 *
mbuÁŒoc
(
hódroom
);

34 
mbuf‰ì
(
mbuf
 *
m
);

36 
	smbufq
 {

37 
mbuf
 *
	mhód
;

38 
mbuf
 *
	mèû
;

41 
mbufq_pushèû
(
mbufq
 *
q
, 
mbuf
 *
m
);

42 
mbuf
 *
mbufq_p›hód
(
mbufq
 *
q
);

43 
mbufq_em±y
(
mbufq
 *
q
);

44 
mbufq_öô
(
mbufq
 *
q
);

51 
ölöe
 
uöt16
 
	$bsw≠s
(
uöt16
 
vÆ
)

53  (((
vÆ
 & 0x00ffU) << 8) |

54 ((
vÆ
 & 0xff00U) >> 8));

55 
	}
}

57 
ölöe
 
uöt32
 
	$bsw≠l
(
uöt32
 
vÆ
)

59  (((
vÆ
 & 0x000000ffUL) << 24) |

60 ((
vÆ
 & 0x0000ff00UL) << 8) |

61 ((
vÆ
 & 0x00ff0000UL) >> 8) |

62 ((
vÆ
 & 0xff000000UL) >> 24));

63 
	}
}

67 
	#¡ohs
 
bsw≠s


	)

68 
	#¡ohl
 
bsw≠l


	)

69 
	#ht⁄s
 
bsw≠s


	)

70 
	#ht⁄l
 
bsw≠l


	)

77 
	#ETHADDR_LEN
 6

	)

80 
	sëh
 {

81 
uöt8
 
	mdho°
[
ETHADDR_LEN
];

82 
uöt8
 
	msho°
[
ETHADDR_LEN
];

83 
uöt16
 
	mty≥
;

84 } 
__©åibuã__
((
∑cked
));

86 
	#ETHTYPE_IP
 0x0800

87 
	#ETHTYPE_ARP
 0x0806

88 

	)

90 
	sù
 {

91 
uöt8
 
	mù_vhl
;

92 
uöt8
 
	mù_tos
;

93 
uöt16
 
	mù_Àn
;

94 
uöt16
 
	mù_id
;

95 
uöt16
 
	mù_off
;

96 
uöt8
 
	mù_âl
;

97 
uöt8
 
	mù_p
;

98 
uöt16
 
	mù_sum
;

99 
uöt32
 
	mù_§c
, 
	mù_d°
;

102 
	#IPPROTO_ICMP
 1

103 
	#IPPROTO_TCP
 6

104 
	#IPPROTO_UDP
 17

105 

	)

106 
	#MAKE_IP_ADDR
(
a
, 
b
, 
c
, 
d
) \

107 (((
uöt32
)
a
 << 24Ë| ((uöt32)
b
 << 16) | \

108 ((
uöt32
)
c
 << 8Ë| (uöt32)
d
)

	)

111 
	sudp
 {

112 
uöt16
 
	m•‹t
;

113 
uöt16
 
	mdp‹t
;

114 
uöt16
 
	muÀn
;

115 
uöt16
 
	msum
;

119 
	s¨p
 {

120 
uöt16
 
	mhrd
;

121 
uöt16
 
	m¥o
;

122 
uöt8
 
	mh 
;

123 
uöt8
 
	m∂n
;

124 
uöt16
 
	m›
;

126 
	msha
[
ETHADDR_LEN
];

127 
uöt32
 
	msù
;

128 
	mtha
[
ETHADDR_LEN
];

129 
uöt32
 
	mtù
;

130 } 
__©åibuã__
((
∑cked
));

132 
	#ARP_HRD_ETHER
 1

133 

	)

135 
	mARP_OP_REQUEST
 = 1,

136 
	mARP_OP_REPLY
 = 2,

140 
	sdns
 {

141 
uöt16
 
	mid
;

143 
uöt8
 
	mrd
: 1;

144 
uöt8
 
	mtc
: 1;

145 
uöt8
 
	mØ
: 1;

146 
uöt8
 
	m›code
: 4;

147 
uöt8
 
	mqr
: 1;

148 
uöt8
 
	mrcode
: 4;

149 
uöt8
 
	mcd
: 1;

150 
uöt8
 
	mad
: 1;

151 
uöt8
 
	mz
: 1;

152 
uöt8
 
	mø
: 1;

154 
uöt16
 
	mqdcou¡
;

155 
uöt16
 
	m™cou¡
;

156 
uöt16
 
	mnscou¡
;

157 
uöt16
 
	m¨cou¡
;

158 } 
__©åibuã__
((
∑cked
));

160 
	sdns_que°i⁄
 {

161 
uöt16
 
	mqty≥
;

162 
uöt16
 
	mq˛ass
;

163 } 
__©åibuã__
((
∑cked
));

165 
	#ARECORD
 (0x0001)

	)

166 
	#QCLASS
 (0x0001)

	)

168 
	sdns_d©a
 {

169 
uöt16
 
	mty≥
;

170 
uöt16
 
	m˛ass
;

171 
uöt32
 
	mâl
;

172 
uöt16
 
	mÀn
;

173 } 
__©åibuã__
((
∑cked
));

	@kernel/param.h

1 
	#NPROC
 10

2 
	#NCPU
 8

3 
	#NOFILE
 16

4 
	#NFILE
 100

5 
	#NINODE
 50

6 
	#NDEV
 10

7 
	#ROOTDEV
 0

8 
	#MAXARG
 32

9 
	#MAXOPBLOCKS
 10

10 
	#LOGSIZE
 (
MAXOPBLOCKS
*3)

11 
	#NBUF
 (
MAXOPBLOCKS
*3)

12 
	#FSSIZE
 2000

13 
	#MAXPATH
 128

14 
	#NDISK
 2

	)

	@kernel/pci.c

6 
	~"ty≥s.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"riscv.h
"

10 
	~"•ölock.h
"

11 
	~"¥oc.h
"

12 
	~"defs.h
"

15 
	$pci_öô
()

19 
uöt64
 
e1000_ªgs
 = 0x40000000L;

23 
uöt32
 *
eˇm
 = (uint32 *) 0x30000000L;

26 
dev
 = 0; dev < 32; dev++){

27 
bus
 = 0;

28 
func
 = 0;

29 
off£t
 = 0;

30 
uöt32
 
off
 = (
bus
 << 16Ë| (
dev
 << 11Ë| (
func
 << 8Ë| (
off£t
);

31 vﬁ©ûê
uöt32
 *
ba£
 = 
eˇm
 + 
off
;

32 
uöt32
 
id
 = 
ba£
[0];

35 if(
id
 == 0x100e8086){

40 
ba£
[1] = 7;

41 
	`__sync_synchr⁄ize
();

43 
i
 = 0; i < 6; i++){

44 
uöt32
 
ﬁd
 = 
ba£
[4+
i
];

48 
ba£
[4+
i
] = 0xffffffff;

49 
	`__sync_synchr⁄ize
();

51 
ba£
[4+
i
] = 
ﬁd
;

56 
ba£
[4+0] = 
e1000_ªgs
;

58 
	`e1000_öô
((
uöt32
*)
e1000_ªgs
);

61 
	}
}

	@kernel/pipe.c

1 
	~"ty≥s.h
"

2 
	~"riscv.h
"

3 
	~"defs.h
"

4 
	~"∑øm.h
"

5 
	~"•ölock.h
"

6 
	~"¥oc.h
"

7 
	~"fs.h
"

8 
	~"¶ì∂ock.h
"

9 
	~"fûe.h
"

11 
	#PIPESIZE
 512

	)

13 
	spùe
 {

14 
•ölock
 
	mlock
;

15 
	md©a
[
PIPESIZE
];

16 
uöt
 
	mƒód
;

17 
uöt
 
	mnwrôe
;

18 
	mªad›í
;

19 
	mwrôe›í
;

23 
	$pùóŒoc
(
fûe
 **
f0
, fûê**
f1
)

25 
pùe
 *
pi
;

27 
pi
 = 0;

28 *
f0
 = *
f1
 = 0;

29 if((*
f0
 = 
	`fûóŒoc
()Ë=0 || (*
f1
 = filealloc()) == 0)

30 
bad
;

31 if((
pi
 = (
pùe
*)
	`kÆloc
()) == 0)

32 
bad
;

33 
pi
->
ªad›í
 = 1;

34 
pi
->
wrôe›í
 = 1;

35 
pi
->
nwrôe
 = 0;

36 
pi
->
ƒód
 = 0;

37 
	`mem£t
(&
pi
->
lock
, 0, (pi->lock));

38 (*
f0
)->
ty≥
 = 
FD_PIPE
;

39 (*
f0
)->
ªadabÀ
 = 1;

40 (*
f0
)->
wrôabÀ
 = 0;

41 (*
f0
)->
pùe
 = 
pi
;

42 (*
f1
)->
ty≥
 = 
FD_PIPE
;

43 (*
f1
)->
ªadabÀ
 = 0;

44 (*
f1
)->
wrôabÀ
 = 1;

45 (*
f1
)->
pùe
 = 
pi
;

48 
bad
:

49 if(
pi
)

50 
	`k‰ì
((*)
pi
);

51 if(*
f0
)

52 
	`fûe˛o£
(*
f0
);

53 if(*
f1
)

54 
	`fûe˛o£
(*
f1
);

56 
	}
}

59 
	$pùe˛o£
(
pùe
 *
pi
, 
wrôabÀ
)

61 
	`acquúe
(&
pi
->
lock
);

62 if(
wrôabÀ
){

63 
pi
->
wrôe›í
 = 0;

64 
	`wakeup
(&
pi
->
ƒód
);

66 
pi
->
ªad›í
 = 0;

67 
	`wakeup
(&
pi
->
nwrôe
);

69 if(
pi
->
ªad›í
 =0 &&Öi->
wrôe›í
 == 0){

70 
	`ªÀa£
(&
pi
->
lock
);

71 
	`k‰ì
((*)
pi
);

73 
	`ªÀa£
(&
pi
->
lock
);

74 
	}
}

77 
	$pùewrôe
(
pùe
 *
pi
, 
uöt64
 
addr
, 
n
)

79 
i
;

80 
ch
;

81 
¥oc
 *
¥
 = 
	`my¥oc
();

83 
	`acquúe
(&
pi
->
lock
);

84 
i
 = 0; i < 
n
; i++)

86 
pi
->
nwrôe
 =pi->
ƒód
 + 
PIPESIZE
)

88 if(
pi
->
ªad›í
 =0 || 
	`my¥oc
()->
kûÀd
){

89 
	`ªÀa£
(&
pi
->
lock
);

92 
	`wakeup
(&
pi
->
ƒód
);

93 
	`¶ìp
(&
pi
->
nwrôe
, &pi->
lock
);

95 if(
	`c›yö
(
¥
->
∑gëabÀ
, &
ch
, 
addr
 + 
i
, 1) == -1)

97 
pi
->
d©a
[pi->
nwrôe
++ % 
PIPESIZE
] = 
ch
;

99 
	`wakeup
(&
pi
->
ƒód
);

100 
	`ªÀa£
(&
pi
->
lock
);

101  
n
;

102 
	}
}

105 
	$pùîód
(
pùe
 *
pi
, 
uöt64
 
addr
, 
n
)

107 
i
;

108 
¥oc
 *
¥
 = 
	`my¥oc
();

109 
ch
;

111 
	`acquúe
(&
pi
->
lock
);

112 
pi
->
ƒód
 =pi->
nwrôe
 &&Öi->
wrôe›í
)

114 if(
	`my¥oc
()->
kûÀd
){

115 
	`ªÀa£
(&
pi
->
lock
);

118 
	`¶ìp
(&
pi
->
ƒód
, &pi->
lock
);

120 
i
 = 0; i < 
n
; i++)

122 if(
pi
->
ƒód
 =pi->
nwrôe
)

124 
ch
 = 
pi
->
d©a
[pi->
ƒód
++ % 
PIPESIZE
];

125 if(
	`c›yout
(
¥
->
∑gëabÀ
, 
addr
 + 
i
, &
ch
, 1) == -1)

128 
	`wakeup
(&
pi
->
nwrôe
);

129 
	`ªÀa£
(&
pi
->
lock
);

130  
i
;

131 
	}
}

	@kernel/plic.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"riscv.h
"

5 
	~"defs.h
"

12 
	$∂icöô
()

17 *(
uöt32
*)(
PLIC
 + 
UART0_IRQ
*4) = 1;

18 *(
uöt32
*)(
PLIC
 + 
VIRTIO0_IRQ
*4) = 1;

21 
úq
 = 1; irq < 0x35; irq++){

22 *(
uöt32
*)(
PLIC
 + 
úq
*4) = 1;

24 
	}
}

27 
	$∂icöôh¨t
()

29 
h¨t
 = 
	`˝uid
();

35 
uöt32
 
íabÀd
 = 0;

36 
íabÀd
 |(1 << 
UART0_IRQ
);

37 
íabÀd
 |(1 << 
VIRTIO0_IRQ
);

38 *(
uöt32
*)
	`PLIC_SENABLE
(
h¨t
Ë
íabÀd
;

41 *(
uöt32
*)(
	`PLIC_SENABLE
(
h¨t
)+4) = 0xffffffff;

44 *(
uöt32
*)
	`PLIC_SPRIORITY
(
h¨t
) = 0;

45 
	}
}

49 
	$∂ic_˛aim
()

51 
h¨t
 = 
	`˝uid
();

53 
úq
 = *(
uöt32
*)
	`PLIC_SCLAIM
(
h¨t
);

54  
úq
;

55 
	}
}

59 
	$∂ic_com∂ëe
(
úq
)

61 
h¨t
 = 
	`˝uid
();

63 *(
uöt32
*)
	`PLIC_SCLAIM
(
h¨t
Ë
úq
;

64 
	}
}

	@kernel/printf.c

5 
	~<°d¨g.h
>

7 
	~"ty≥s.h
"

8 
	~"∑øm.h
"

9 
	~"•ölock.h
"

10 
	~"¶ì∂ock.h
"

11 
	~"fs.h
"

12 
	~"fûe.h
"

13 
	~"memœyout.h
"

14 
	~"riscv.h
"

15 
	~"defs.h
"

16 
	~"¥oc.h
"

18 vﬁ©ûê
	g∑nicked
 = 0;

22 
•ölock
 
	mlock
;

23 
	mlockög
;

24 } 
	g¥
;

26 
	gdigôs
[] = "0123456789abcdef";

29 
	$¥ötöt
(
xx
, 
ba£
, 
sign
)

31 
buf
[16];

32 
i
;

33 
uöt
 
x
;

35 if(
sign
 && (sig¿
xx
 < 0))

36 
x
 = -
xx
;

38 
x
 = 
xx
;

40 
i
 = 0;

42 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

43 } (
x
 /
ba£
) != 0);

45 if(
sign
)

46 
buf
[
i
++] = '-';

48 --
i
 >= 0)

49 
	`c⁄•utc
(
buf
[
i
]);

50 
	}
}

53 
	$¥öçå
(
uöt64
 
x
)

55 
i
;

56 
	`c⁄•utc
('0');

57 
	`c⁄•utc
('x');

58 
i
 = 0; i < ((
uöt64
Ë* 2); i++, 
x
 <<= 4)

59 
	`c⁄•utc
(
digôs
[
x
 >> ((
uöt64
) * 8 - 4)]);

60 
	}
}

64 
	$¥ötf
(*
fmt
, ...)

66 
va_li°
 
≠
;

67 
i
, 
c
, 
lockög
;

68 *
s
;

70 
lockög
 = 
¥
.locking;

71 if(
lockög
)

72 
	`acquúe
(&
¥
.
lock
);

74 i‡(
fmt
 == 0)

75 
	`∑nic
("null fmt");

77 
	`va_°¨t
(
≠
, 
fmt
);

78 
i
 = 0; (
c
 = 
fmt
[i] & 0xff) != 0; i++){

79 if(
c
 != '%'){

80 
	`c⁄•utc
(
c
);

83 
c
 = 
fmt
[++
i
] & 0xff;

84 if(
c
 == 0)

86 
c
){

88 
	`¥ötöt
(
	`va_¨g
(
≠
, ), 10, 1);

91 
	`¥ötöt
(
	`va_¨g
(
≠
, ), 16, 1);

94 
	`¥öçå
(
	`va_¨g
(
≠
, 
uöt64
));

97 if((
s
 = 
	`va_¨g
(
≠
, *)) == 0)

98 
s
 = "(null)";

99 ; *
s
; s++)

100 
	`c⁄•utc
(*
s
);

103 
	`c⁄•utc
('%');

107 
	`c⁄•utc
('%');

108 
	`c⁄•utc
(
c
);

113 if(
lockög
)

114 
	`ªÀa£
(&
¥
.
lock
);

115 
	}
}

118 
	$∑nic
(*
s
)

120 
¥
.
lockög
 = 0;

121 
	`¥ötf
("PANIC: ");

122 
	`¥ötf
(
s
);

123 
	`¥ötf
("\n");

124 
	`¥ötf
("HINT:Ñestart xv6 using 'make qemu-gdb',Åype 'bÖanic' (to set breakpoint inÖanic) inÅhe gdb window, followed by 'c' (continue),ánd whenÅhe kernel hitsÅhe breakpoint,Åype 'bt'Åo getá backtrace\n");

125 
∑nicked
 = 1;

128 
	}
}

131 
	$¥ötföô
()

133 
	`öôlock
(&
¥
.
lock
, "pr");

134 
¥
.
lockög
 = 1;

135 
	}
}

	@kernel/proc.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"riscv.h
"

5 
	~"•ölock.h
"

6 
	~"¶ì∂ock.h
"

7 
	~"fs.h
"

8 
	~"fûe.h
"

9 
	~"¥oc.h
"

10 
	~"defs.h
"

12 
˝u
 
	g˝us
[
NCPU
];

14 
¥oc
 
	g¥oc
[
NPROC
];

16 
¥oc
 *
	göô¥oc
;

18 
	g√xçid
 = 1;

19 
•ölock
 
	gpid_lock
;

21 
f‹kªt
();

22 
wakeup1
(
¥oc
 *
ch™
);

24 
åampﬁöe
[];

27 
	$¥ocöô
()

29 
¥oc
 *
p
;

31 
	`öôlock
(&
pid_lock
, "nextpid");

32 
p
 = 
¥oc
;Ö < &¥oc[
NPROC
];Ö++) {

33 
	`öôlock
(&
p
->
lock
, "proc");

38 *
∑
 = 
	`kÆloc
();

39 if(
∑
 == 0)

40 
	`∑nic
("kalloc");

41 
uöt64
 
va
 = 
	`KSTACK
((Ë(
p
 - 
¥oc
));

42 
	`kvmm≠
(
va
, (
uöt64
)
∑
, 
PGSIZE
, 
PTE_R
 | 
PTE_W
);

43 
p
->
k°ack
 = 
va
;

45 
	`kvmöôh¨t
();

46 
	}
}

52 
	$˝uid
()

54 
id
 = 
	`r_ç
();

55  
id
;

56 
	}
}

60 
˝u
*

61 
	$my˝u
() {

62 
id
 = 
	`˝uid
();

63 
˝u
 *
c
 = &
˝us
[
id
];

64  
c
;

65 
	}
}

68 
¥oc
*

69 
	$my¥oc
() {

70 
	`push_off
();

71 
˝u
 *
c
 = 
	`my˝u
();

72 
¥oc
 *
p
 = 
c
->proc;

73 
	`p›_off
();

74  
p
;

75 
	}
}

78 
	$Ælo˝id
() {

79 
pid
;

81 
	`acquúe
(&
pid_lock
);

82 
pid
 = 
√xçid
;

83 
√xçid
 =Çextpid + 1;

84 
	`ªÀa£
(&
pid_lock
);

86  
pid
;

87 
	}
}

93 
¥oc
*

94 
	$Ælo˝roc
()

96 
¥oc
 *
p
;

98 
p
 = 
¥oc
;Ö < &¥oc[
NPROC
];Ö++) {

99 
	`acquúe
(&
p
->
lock
);

100 if(
p
->
°©e
 =
UNUSED
) {

101 
found
;

103 
	`ªÀa£
(&
p
->
lock
);

108 
found
:

109 
p
->
pid
 = 
	`Ælo˝id
();

112 if((
p
->
tf
 = (
å≠‰ame
 *)
	`kÆloc
()) == 0){

113 
	`ªÀa£
(&
p
->
lock
);

118 
p
->
∑gëabÀ
 = 
	`¥oc_∑gëabÀ
(p);

122 
	`mem£t
(&
p
->
c⁄ãxt
, 0, Ö->context);

123 
p
->
c⁄ãxt
.
ø
 = (
uöt64
)
f‹kªt
;

124 
p
->
c⁄ãxt
.
•
 =Ö->
k°ack
 + 
PGSIZE
;

126  
p
;

127 
	}
}

133 
	$‰ì¥oc
(
¥oc
 *
p
)

135 if(
p
->
tf
)

136 
	`k‰ì
((*)
p
->
tf
);

137 
p
->
tf
 = 0;

138 if(
p
->
∑gëabÀ
)

139 
	`¥oc_‰ì∑gëabÀ
(
p
->
∑gëabÀ
,Ö->
sz
);

140 
p
->
∑gëabÀ
 = 0;

141 
p
->
sz
 = 0;

142 
p
->
pid
 = 0;

143 
p
->
∑ª¡
 = 0;

144 
p
->
«me
[0] = 0;

145 
p
->
ch™
 = 0;

146 
p
->
kûÀd
 = 0;

147 
p
->
x°©e
 = 0;

148 
p
->
°©e
 = 
UNUSED
;

149 
	}
}

153 
∑gëabÀ_t


154 
	$¥oc_∑gëabÀ
(
¥oc
 *
p
)

156 
∑gëabÀ_t
 
∑gëabÀ
;

159 
∑gëabÀ
 = 
	`uvm¸óã
();

165 
	`m≠∑ges
(
∑gëabÀ
, 
TRAMPOLINE
, 
PGSIZE
,

166 (
uöt64
)
åampﬁöe
, 
PTE_R
 | 
PTE_X
);

169 
	`m≠∑ges
(
∑gëabÀ
, 
TRAPFRAME
, 
PGSIZE
,

170 (
uöt64
)(
p
->
tf
), 
PTE_R
 | 
PTE_W
);

172  
∑gëabÀ
;

173 
	}
}

178 
	$¥oc_‰ì∑gëabÀ
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
sz
)

180 
	`uvmunm≠
(
∑gëabÀ
, 
TRAMPOLINE
, 
PGSIZE
, 0);

181 
	`uvmunm≠
(
∑gëabÀ
, 
TRAPFRAME
, 
PGSIZE
, 0);

182 if(
sz
 > 0)

183 
	`uvm‰ì
(
∑gëabÀ
, 
sz
);

184 
	}
}

188 
uch¨
 
	göôcode
[] = {

200 
	$u£röô
()

202 
¥oc
 *
p
;

204 
p
 = 
	`Ælo˝roc
();

205 
öô¥oc
 = 
p
;

209 
	`uvmöô
(
p
->
∑gëabÀ
, 
öôcode
, (initcode));

210 
p
->
sz
 = 
PGSIZE
;

213 
p
->
tf
->
ïc
 = 0;

214 
p
->
tf
->
•
 = 
PGSIZE
;

216 
	`ß„°r˝y
(
p
->
«me
, "initcode", (p->name));

217 
p
->
cwd
 = 
	`«mei
("/");

219 
p
->
°©e
 = 
RUNNABLE
;

221 
	`ªÀa£
(&
p
->
lock
);

222 
	}
}

227 
	$grow¥oc
(
n
)

229 
uöt
 
sz
;

230 
¥oc
 *
p
 = 
	`my¥oc
();

232 
sz
 = 
p
->sz;

233 if(
n
 > 0){

234 if((
sz
 = 
	`uvmÆloc
(
p
->
∑gëabÀ
, sz, sz + 
n
)) == 0) {

237 } if(
n
 < 0){

238 
sz
 = 
	`uvmdóŒoc
(
p
->
∑gëabÀ
, sz, sz + 
n
);

240 
p
->
sz
 = sz;

242 
	}
}

247 
	$f‹k
()

249 
i
, 
pid
;

250 
¥oc
 *
≈
;

251 
¥oc
 *
p
 = 
	`my¥oc
();

254 if((
≈
 = 
	`Ælo˝roc
()) == 0){

259 if(
	`uvmc›y
(
p
->
∑gëabÀ
, 
≈
->∑gëabÀ,Ö->
sz
) < 0){

260 
	`‰ì¥oc
(
≈
);

261 
	`ªÀa£
(&
≈
->
lock
);

264 
≈
->
sz
 = 
p
->sz;

266 
≈
->
∑ª¡
 = 
p
;

269 *(
≈
->
tf
Ë*(
p
->tf);

272 
≈
->
tf
->
a0
 = 0;

275 
i
 = 0; i < 
NOFILE
; i++)

276 if(
p
->
ofûe
[
i
])

277 
≈
->
ofûe
[
i
] = 
	`fûedup
(
p
->ofile[i]);

278 
≈
->
cwd
 = 
	`idup
(
p
->cwd);

280 
	`ß„°r˝y
(
≈
->
«me
, 
p
->name, (p->name));

282 
pid
 = 
≈
->pid;

284 
≈
->
°©e
 = 
RUNNABLE
;

286 
	`ªÀa£
(&
≈
->
lock
);

288  
pid
;

289 
	}
}

294 
	$ª∑ª¡
(
¥oc
 *
p
)

296 
¥oc
 *
µ
;

298 
µ
 = 
¥oc
;Ö∞< &¥oc[
NPROC
];Öp++){

303 if(
µ
->
∑ª¡
 =
p
){

306 
	`acquúe
(&
µ
->
lock
);

307 
µ
->
∑ª¡
 = 
öô¥oc
;

312 
	`ªÀa£
(&
µ
->
lock
);

315 
	}
}

321 
	$exô
(
°©us
)

323 
¥oc
 *
p
 = 
	`my¥oc
();

325 if(
p
 =
öô¥oc
)

326 
	`∑nic
("initÉxiting");

329 
fd
 = 0; fd < 
NOFILE
; fd++){

330 if(
p
->
ofûe
[
fd
]){

331 
fûe
 *
f
 = 
p
->
ofûe
[
fd
];

332 
	`fûe˛o£
(
f
);

333 
p
->
ofûe
[
fd
] = 0;

337 
	`begö_›
(
ROOTDEV
);

338 
	`ùut
(
p
->
cwd
);

339 
	`íd_›
(
ROOTDEV
);

340 
p
->
cwd
 = 0;

347 
	`acquúe
(&
öô¥oc
->
lock
);

348 
	`wakeup1
(
öô¥oc
);

349 
	`ªÀa£
(&
öô¥oc
->
lock
);

357 
	`acquúe
(&
p
->
lock
);

358 
¥oc
 *
‹igöÆ_∑ª¡
 = 
p
->
∑ª¡
;

359 
	`ªÀa£
(&
p
->
lock
);

363 
	`acquúe
(&
‹igöÆ_∑ª¡
->
lock
);

365 
	`acquúe
(&
p
->
lock
);

368 
	`ª∑ª¡
(
p
);

371 
	`wakeup1
(
‹igöÆ_∑ª¡
);

373 
p
->
x°©e
 = 
°©us
;

374 
p
->
°©e
 = 
ZOMBIE
;

376 
	`ªÀa£
(&
‹igöÆ_∑ª¡
->
lock
);

379 
	`sched
();

380 
	`∑nic
("zombieÉxit");

381 
	}
}

386 
	$waô
(
uöt64
 
addr
)

388 
¥oc
 *
≈
;

389 
havekids
, 
pid
;

390 
¥oc
 *
p
 = 
	`my¥oc
();

394 
	`acquúe
(&
p
->
lock
);

398 
havekids
 = 0;

399 
≈
 = 
¥oc
;Ç∞< &¥oc[
NPROC
];Çp++){

403 if(
≈
->
∑ª¡
 =
p
){

406 
	`acquúe
(&
≈
->
lock
);

407 
havekids
 = 1;

408 if(
≈
->
°©e
 =
ZOMBIE
){

410 
pid
 = 
≈
->pid;

411 if(
addr
 !0 && 
	`c›yout
(
p
->
∑gëabÀ
,áddr, (*)&
≈
->
x°©e
,

412 (
≈
->
x°©e
)) < 0) {

413 
	`ªÀa£
(&
≈
->
lock
);

414 
	`ªÀa£
(&
p
->
lock
);

417 
	`‰ì¥oc
(
≈
);

418 
	`ªÀa£
(&
≈
->
lock
);

419 
	`ªÀa£
(&
p
->
lock
);

420  
pid
;

422 
	`ªÀa£
(&
≈
->
lock
);

427 if(!
havekids
 || 
p
->
kûÀd
){

428 
	`ªÀa£
(&
p
->
lock
);

433 
	`¶ìp
(
p
, &p->
lock
);

435 
	}
}

445 
	$scheduÀr
()

447 
¥oc
 *
p
;

448 
˝u
 *
c
 = 
	`my˝u
();

450 
c
->
¥oc
 = 0;

453 
	`öå_⁄
();

458 
	`öå_off
();

460 
found
 = 0;

461 
p
 = 
¥oc
;Ö < &¥oc[
NPROC
];Ö++) {

462 
	`acquúe
(&
p
->
lock
);

463 if(
p
->
°©e
 =
RUNNABLE
) {

467 
p
->
°©e
 = 
RUNNING
;

468 
c
->
¥oc
 = 
p
;

469 
	`swtch
(&
c
->
scheduÀr
, &
p
->
c⁄ãxt
);

473 
c
->
¥oc
 = 0;

475 
found
 = 1;

480 
c
->
öã«
 = 0;

482 
	`ªÀa£
(&
p
->
lock
);

484 if(
found
 == 0){

485 
asm
 volatile("wfi");

488 
	}
}

498 
	$sched
()

500 
öã«
;

501 
¥oc
 *
p
 = 
	`my¥oc
();

503 if(!
	`hﬁdög
(&
p
->
lock
))

504 
	`∑nic
("schedÖ->lock");

505 if(
	`my˝u
()->
noff
 != 1)

506 
	`∑nic
("schedÜocks");

507 if(
p
->
°©e
 =
RUNNING
)

508 
	`∑nic
("schedÑunning");

509 if(
	`öå_gë
())

510 
	`∑nic
("sched interruptible");

512 
öã«
 = 
	`my˝u
()->intena;

513 
	`swtch
(&
p
->
c⁄ãxt
, &
	`my˝u
()->
scheduÀr
);

514 
	`my˝u
()->
öã«
 = intena;

515 
	}
}

519 
	$yõld
()

521 
¥oc
 *
p
 = 
	`my¥oc
();

522 
	`acquúe
(&
p
->
lock
);

523 
p
->
°©e
 = 
RUNNABLE
;

524 
	`sched
();

525 
	`ªÀa£
(&
p
->
lock
);

526 
	}
}

531 
	$f‹kªt
()

533 
fú°
 = 1;

536 
	`ªÀa£
(&
	`my¥oc
()->
lock
);

538 i‡(
fú°
) {

542 
fú°
 = 0;

543 
	`fsöô
(
	`mö‹
(
ROOTDEV
));

546 
	`u£πø¥ë
();

547 
	}
}

552 
	$¶ìp
(*
ch™
, 
•ölock
 *
lk
)

554 
¥oc
 *
p
 = 
	`my¥oc
();

562 if(
lk
 !&
p
->
lock
){

563 
	`acquúe
(&
p
->
lock
);

564 
	`ªÀa£
(
lk
);

568 
p
->
ch™
 = chan;

569 
p
->
°©e
 = 
SLEEPING
;

571 
	`sched
();

574 
p
->
ch™
 = 0;

577 if(
lk
 !&
p
->
lock
){

578 
	`ªÀa£
(&
p
->
lock
);

579 
	`acquúe
(
lk
);

581 
	}
}

586 
	$wakeup
(*
ch™
)

588 
¥oc
 *
p
;

590 
p
 = 
¥oc
;Ö < &¥oc[
NPROC
];Ö++) {

591 
	`acquúe
(&
p
->
lock
);

592 if(
p
->
°©e
 =
SLEEPING
 &&Ö->
ch™
 == chan) {

593 
p
->
°©e
 = 
RUNNABLE
;

595 
	`ªÀa£
(&
p
->
lock
);

597 
	}
}

602 
	$wakeup1
(
¥oc
 *
p
)

604 if(!
	`hﬁdög
(&
p
->
lock
))

605 
	`∑nic
("wakeup1");

606 if(
p
->
ch™
 =∞&&Ö->
°©e
 =
SLEEPING
) {

607 
p
->
°©e
 = 
RUNNABLE
;

609 
	}
}

615 
	$kûl
(
pid
)

617 
¥oc
 *
p
;

619 
p
 = 
¥oc
;Ö < &¥oc[
NPROC
];Ö++){

620 
	`acquúe
(&
p
->
lock
);

621 if(
p
->
pid
 ==Öid){

622 
p
->
kûÀd
 = 1;

623 if(
p
->
°©e
 =
SLEEPING
){

625 
p
->
°©e
 = 
RUNNABLE
;

627 
	`ªÀa£
(&
p
->
lock
);

630 
	`ªÀa£
(&
p
->
lock
);

633 
	}
}

639 
	$eôhî_c›yout
(
u£r_d°
, 
uöt64
 
d°
, *
§c
, uöt64 
Àn
)

641 
¥oc
 *
p
 = 
	`my¥oc
();

642 if(
u£r_d°
){

643  
	`c›yout
(
p
->
∑gëabÀ
, 
d°
, 
§c
, 
Àn
);

645 
	`memmove
((*)
d°
, 
§c
, 
Àn
);

648 
	}
}

654 
	$eôhî_c›yö
(*
d°
, 
u£r_§c
, 
uöt64
 
§c
, uöt64 
Àn
)

656 
¥oc
 *
p
 = 
	`my¥oc
();

657 if(
u£r_§c
){

658  
	`c›yö
(
p
->
∑gëabÀ
, 
d°
, 
§c
, 
Àn
);

660 
	`memmove
(
d°
, (*)
§c
, 
Àn
);

663 
	}
}

669 
	$¥ocdump
()

671 *
°©es
[] = {

672 [
UNUSED
] "unused",

673 [
SLEEPING
] "sleep ",

674 [
RUNNABLE
] "runble",

675 [
RUNNING
] "run ",

676 [
ZOMBIE
] "zombie"

678 
¥oc
 *
p
;

679 *
°©e
;

681 
	`¥ötf
("\n");

682 
p
 = 
¥oc
;Ö < &¥oc[
NPROC
];Ö++){

683 if(
p
->
°©e
 =
UNUSED
)

685 if(
p
->
°©e
 >0 &&Ö->°©ê< 
	`NELEM
(
°©es
) && states[p->state])

686 
°©e
 = 
°©es
[
p
->state];

688 
°©e
 = "???";

689 
	`¥ötf
("%d %†%s", 
p
->
pid
, 
°©e
,Ö->
«me
);

690 
	`¥ötf
("\n");

692 
	}
}

	@kernel/proc.h

2 
	sc⁄ãxt
 {

3 
uöt64
 
	mø
;

4 
uöt64
 
	m•
;

7 
uöt64
 
	ms0
;

8 
uöt64
 
	ms1
;

9 
uöt64
 
	ms2
;

10 
uöt64
 
	ms3
;

11 
uöt64
 
	ms4
;

12 
uöt64
 
	ms5
;

13 
uöt64
 
	ms6
;

14 
uöt64
 
	ms7
;

15 
uöt64
 
	ms8
;

16 
uöt64
 
	ms9
;

17 
uöt64
 
	ms10
;

18 
uöt64
 
	ms11
;

22 
	s˝u
 {

23 
¥oc
 *
	m¥oc
;

24 
c⁄ãxt
 
	mscheduÀr
;

25 
	mnoff
;

26 
	möã«
;

29 
˝u
 
˝us
[
NCPU
];

44 
	så≠‰ame
 {

45  
uöt64
 
	mkî√l_ßç
;

46  
uöt64
 
	mkî√l_•
;

47  
uöt64
 
	mkî√l_å≠
;

48  
uöt64
 
	mïc
;

49  
uöt64
 
	mkî√l_h¨tid
;

50  
uöt64
 
	mø
;

51  
uöt64
 
	m•
;

52  
uöt64
 
	mgp
;

53  
uöt64
 
	mç
;

54  
uöt64
 
	mt0
;

55  
uöt64
 
	mt1
;

56  
uöt64
 
	mt2
;

57  
uöt64
 
	ms0
;

58  
uöt64
 
	ms1
;

59  
uöt64
 
	ma0
;

60  
uöt64
 
	ma1
;

61  
uöt64
 
	ma2
;

62  
uöt64
 
	ma3
;

63  
uöt64
 
	ma4
;

64  
uöt64
 
	ma5
;

65  
uöt64
 
	ma6
;

66  
uöt64
 
	ma7
;

67  
uöt64
 
	ms2
;

68  
uöt64
 
	ms3
;

69  
uöt64
 
	ms4
;

70  
uöt64
 
	ms5
;

71  
uöt64
 
	ms6
;

72  
uöt64
 
	ms7
;

73  
uöt64
 
	ms8
;

74  
uöt64
 
	ms9
;

75  
uöt64
 
	ms10
;

76  
uöt64
 
	ms11
;

77  
uöt64
 
	mt3
;

78  
uöt64
 
	mt4
;

79  
uöt64
 
	mt5
;

80  
uöt64
 
	mt6
;

83 
	e¥oc°©e
 { 
	mUNUSED
, 
	mSLEEPING
, 
	mRUNNABLE
, 
	mRUNNING
, 
	mZOMBIE
 };

86 
	s¥oc
 {

87 
•ölock
 
	mlock
;

90 
¥oc°©e
 
	m°©e
;

91 
¥oc
 *
	m∑ª¡
;

92 *
	mch™
;

93 
	mkûÀd
;

94 
	mx°©e
;

95 
	mpid
;

98 
uöt64
 
	mk°ack
;

99 
uöt64
 
	msz
;

100 
∑gëabÀ_t
 
	m∑gëabÀ
;

101 
å≠‰ame
 *
	mtf
;

102 
c⁄ãxt
 
	mc⁄ãxt
;

103 
fûe
 *
	mofûe
[
NOFILE
];

104 
öode
 *
	mcwd
;

105 
	m«me
[16];

	@kernel/ramdisk.c

5 
	~"ty≥s.h
"

6 
	~"riscv.h
"

7 
	~"defs.h
"

8 
	~"∑øm.h
"

9 
	~"memœyout.h
"

10 
	~"•ölock.h
"

11 
	~"¶ì∂ock.h
"

12 
	~"fs.h
"

13 
	~"buf.h
"

16 
	$ømdisköô
()

18 
	}
}

23 
	$ømdiskrw
(
buf
 *
b
)

25 if(!
	`hﬁdög¶ìp
(&
b
->
lock
))

26 
	`∑nic
("ramdiskrw: bufÇotÜocked");

27 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

28 
	`∑nic
("ramdiskrw:ÇothingÅo do");

30 if(
b
->
blockno
 >
FSSIZE
)

31 
	`∑nic
("ramdiskrw: blocknoÅoo big");

33 
uöt64
 
diskaddr
 = 
b
->
blockno
 * 
BSIZE
;

34 *
addr
 = (*)
RAMDISK
 + 
diskaddr
;

36 if(
b
->
Êags
 & 
B_DIRTY
){

38 
	`memmove
(
addr
, 
b
->
d©a
, 
BSIZE
);

39 
b
->
Êags
 &~
B_DIRTY
;

42 
	`memmove
(
b
->
d©a
, 
addr
, 
BSIZE
);

43 
b
->
Êags
 |
B_VALID
;

45 
	}
}

	@kernel/riscv.h

2 
ölöe
 
uöt64


3 
	$r_mh¨tid
()

5 
uöt64
 
x
;

6 
asm
 vﬁ©ûe("c§∏%0, mh¨tid" : "Ù" (
x
) );

7  
x
;

8 
	}
}

12 
	#MSTATUS_MPP_MASK
 (3L << 11)

13 
	#MSTATUS_MPP_M
 (3L << 11)

	)

14 
	#MSTATUS_MPP_S
 (1L << 11)

	)

15 
	#MSTATUS_MPP_U
 (0L << 11)

	)

16 
	#MSTATUS_MIE
 (1L << 3)

17 

	)

18 
ölöe
 
uöt64


19 
	$r_m°©us
()

21 
uöt64
 
x
;

22 
asm
 vﬁ©ûe("c§∏%0, m°©us" : "Ù" (
x
) );

23  
x
;

24 
	}
}

26 
ölöe
 

27 
	$w_m°©us
(
uöt64
 
x
)

29 
asm
 vﬁ©ûe("c§w m°©us, %0" : : "r" (
x
));

30 
	}
}

35 
ölöe
 

36 
	$w_mïc
(
uöt64
 
x
)

38 
asm
 vﬁ©ûe("c§w mïc, %0" : : "r" (
x
));

39 
	}
}

43 
	#SSTATUS_SPP
 (1L << 8)

44 
	#SSTATUS_SPIE
 (1L << 5)

45 
	#SSTATUS_UPIE
 (1L << 4)

46 
	#SSTATUS_SIE
 (1L << 1)

47 
	#SSTATUS_UIE
 (1L << 0)

48 

	)

49 
ölöe
 
uöt64


50 
	$r_s°©us
()

52 
uöt64
 
x
;

53 
asm
 vﬁ©ûe("c§∏%0, s°©us" : "Ù" (
x
) );

54  
x
;

55 
	}
}

57 
ölöe
 

58 
	$w_s°©us
(
uöt64
 
x
)

60 
asm
 vﬁ©ûe("c§w s°©us, %0" : : "r" (
x
));

61 
	}
}

64 
ölöe
 
uöt64


65 
	$r_sù
()

67 
uöt64
 
x
;

68 
asm
 vﬁ©ûe("c§∏%0, sù" : "Ù" (
x
) );

69  
x
;

70 
	}
}

72 
ölöe
 

73 
	$w_sù
(
uöt64
 
x
)

75 
asm
 vﬁ©ûe("c§w sù, %0" : : "r" (
x
));

76 
	}
}

79 
	#SIE_SEIE
 (1L << 9)

80 
	#SIE_STIE
 (1L << 5)

81 
	#SIE_SSIE
 (1L << 1)

82 
ölöe
 
uöt64


	)

83 
	$r_sõ
()

85 
uöt64
 
x
;

86 
asm
 vﬁ©ûe("c§∏%0, sõ" : "Ù" (
x
) );

87  
x
;

88 
	}
}

90 
ölöe
 

91 
	$w_sõ
(
uöt64
 
x
)

93 
asm
 vﬁ©ûe("c§w sõ, %0" : : "r" (
x
));

94 
	}
}

97 
	#MIE_MEIE
 (1L << 11)

98 
	#MIE_MTIE
 (1L << 7)

99 
	#MIE_MSIE
 (1L << 3)

100 
ölöe
 
uöt64


	)

101 
	$r_mõ
()

103 
uöt64
 
x
;

104 
asm
 vﬁ©ûe("c§∏%0, mõ" : "Ù" (
x
) );

105  
x
;

106 
	}
}

108 
ölöe
 

109 
	$w_mõ
(
uöt64
 
x
)

111 
asm
 vﬁ©ûe("c§w mõ, %0" : : "r" (
x
));

112 
	}
}

117 
ölöe
 

118 
	$w_£pc
(
uöt64
 
x
)

120 
asm
 vﬁ©ûe("c§w sïc, %0" : : "r" (
x
));

121 
	}
}

123 
ölöe
 
uöt64


124 
	$r_£pc
()

126 
uöt64
 
x
;

127 
asm
 vﬁ©ûe("c§∏%0, sïc" : "Ù" (
x
) );

128  
x
;

129 
	}
}

132 
ölöe
 
uöt64


133 
	$r_medñeg
()

135 
uöt64
 
x
;

136 
asm
 vﬁ©ûe("c§∏%0, medñeg" : "Ù" (
x
) );

137  
x
;

138 
	}
}

140 
ölöe
 

141 
	$w_medñeg
(
uöt64
 
x
)

143 
asm
 vﬁ©ûe("c§w medñeg, %0" : : "r" (
x
));

144 
	}
}

147 
ölöe
 
uöt64


148 
	$r_midñeg
()

150 
uöt64
 
x
;

151 
asm
 vﬁ©ûe("c§∏%0, midñeg" : "Ù" (
x
) );

152  
x
;

153 
	}
}

155 
ölöe
 

156 
	$w_midñeg
(
uöt64
 
x
)

158 
asm
 vﬁ©ûe("c§w midñeg, %0" : : "r" (
x
));

159 
	}
}

163 
ölöe
 

164 
	$w_°vec
(
uöt64
 
x
)

166 
asm
 vﬁ©ûe("c§w stvec, %0" : : "r" (
x
));

167 
	}
}

169 
ölöe
 
uöt64


170 
	$r_°vec
()

172 
uöt64
 
x
;

173 
asm
 vﬁ©ûe("c§∏%0, stvec" : "Ù" (
x
) );

174  
x
;

175 
	}
}

178 
ölöe
 

179 
	$w_mtvec
(
uöt64
 
x
)

181 
asm
 vﬁ©ûe("c§w mtvec, %0" : : "r" (
x
));

182 
	}
}

185 
	#SATP_SV39
 (8L << 60)

	)

187 
	#MAKE_SATP
(
∑gëabÀ
Ë(
SATP_SV39
 | (((
uöt64
ÌagëabÀË>> 12))

	)

191 
ölöe
 

192 
	$w_ßç
(
uöt64
 
x
)

194 
asm
 vﬁ©ûe("c§w s©p, %0" : : "r" (
x
));

195 
	}
}

197 
ölöe
 
uöt64


198 
	$r_ßç
()

200 
uöt64
 
x
;

201 
asm
 vﬁ©ûe("c§∏%0, s©p" : "Ù" (
x
) );

202  
x
;

203 
	}
}

206 
ölöe
 

207 
	$w_ss¸©ch
(
uöt64
 
x
)

209 
asm
 vﬁ©ûe("c§w ss¸©ch, %0" : : "r" (
x
));

210 
	}
}

212 
ölöe
 

213 
	$w_ms¸©ch
(
uöt64
 
x
)

215 
asm
 vﬁ©ûe("c§w ms¸©ch, %0" : : "r" (
x
));

216 
	}
}

219 
ölöe
 
uöt64


220 
	$r_sˇu£
()

222 
uöt64
 
x
;

223 
asm
 vﬁ©ûe("c§∏%0, sˇu£" : "Ù" (
x
) );

224  
x
;

225 
	}
}

228 
ölöe
 
uöt64


229 
	$r_°vÆ
()

231 
uöt64
 
x
;

232 
asm
 vﬁ©ûe("c§∏%0, stvÆ" : "Ù" (
x
) );

233  
x
;

234 
	}
}

237 
ölöe
 

238 
	$w_mcou¡îí
(
uöt64
 
x
)

240 
asm
 vﬁ©ûe("c§w mcou¡îí, %0" : : "r" (
x
));

241 
	}
}

243 
ölöe
 
uöt64


244 
	$r_mcou¡îí
()

246 
uöt64
 
x
;

247 
asm
 vﬁ©ûe("c§∏%0, mcou¡îí" : "Ù" (
x
) );

248  
x
;

249 
	}
}

252 
ölöe
 
uöt64


253 
	$r_time
()

255 
uöt64
 
x
;

256 
asm
 vﬁ©ûe("c§∏%0,Åime" : "Ù" (
x
) );

257  
x
;

258 
	}
}

261 
ölöe
 

262 
	$öå_⁄
()

264 
	`w_s°©us
(
	`r_s°©us
(Ë| 
SSTATUS_SIE
);

265 
	}
}

268 
ölöe
 

269 
	$öå_off
()

271 
	`w_s°©us
(
	`r_s°©us
(Ë& ~
SSTATUS_SIE
);

272 
	}
}

275 
ölöe
 

276 
	$öå_gë
()

278 
uöt64
 
x
 = 
	`r_s°©us
();

279  (
x
 & 
SSTATUS_SIE
) != 0;

280 
	}
}

282 
ölöe
 
uöt64


283 
	$r_•
()

285 
uöt64
 
x
;

286 
asm
 vﬁ©ûe("mv %0, sp" : "Ù" (
x
) );

287  
x
;

288 
	}
}

292 
ölöe
 
uöt64


293 
	$r_ç
()

295 
uöt64
 
x
;

296 
asm
 vﬁ©ûe("mv %0,Åp" : "Ù" (
x
) );

297  
x
;

298 
	}
}

300 
ölöe
 

301 
	$w_ç
(
uöt64
 
x
)

303 
asm
 vﬁ©ûe("mvÅp, %0" : : "r" (
x
));

304 
	}
}

306 
ölöe
 
uöt64


307 
	$r_ø
()

309 
uöt64
 
x
;

310 
asm
 vﬁ©ûe("mv %0,Ña" : "Ù" (
x
) );

311  
x
;

312 
	}
}

315 
ölöe
 

316 
	$s„n˚_vma
()

319 
asm
 volatile("sfence.vma zero, zero");

320 
	}
}

323 
	#PGSIZE
 4096

324 
	#PGSHIFT
 12

325 

	)

326 
	#PGROUNDUP
(
sz
Ë(((sz)+
PGSIZE
-1Ë& ~(PGSIZE-1))

	)

327 
	#PGROUNDDOWN
(
a
Ë((◊)Ë& ~(
PGSIZE
-1))

	)

329 
	#PTE_V
 (1L << 0)

330 
	#PTE_R
 (1L << 1)

	)

331 
	#PTE_W
 (1L << 2)

	)

332 
	#PTE_X
 (1L << 3)

	)

333 
	#PTE_U
 (1L << 4)

334 

	)

336 
	#PA2PTE
(
∑
Ë((((
uöt64
ÌaË>> 12Ë<< 10)

	)

338 
	#PTE2PA
(
±e
Ë((’ãË>> 10Ë<< 12)

	)

340 
	#PTE_FLAGS
(
±e
Ë(’ãË& 0x3FF)

	)

343 
	#PXMASK
 0x1FF

344 
	#PXSHIFT
(
Àvñ
Ë(
PGSHIFT
+(9*÷evñ)))

	)

345 
	#PX
(
Àvñ
, 
va
Ë((((
uöt64
Ë(va)Ë>> 
	`PXSHIFT
÷evñ)Ë& 
PXMASK
)

	)

351 
	#MAXVA
 (1L << (9 + 9 + 9 + 12 - 1))

	)

353 
uöt64
 
	t±e_t
;

354 
uöt64
 *
	t∑gëabÀ_t
;

	@kernel/sleeplock.c

3 
	~"ty≥s.h
"

4 
	~"riscv.h
"

5 
	~"defs.h
"

6 
	~"∑øm.h
"

7 
	~"memœyout.h
"

8 
	~"•ölock.h
"

9 
	~"¥oc.h
"

10 
	~"¶ì∂ock.h
"

13 
	$öô¶ì∂ock
(
¶ì∂ock
 *
lk
, *
«me
)

15 
	`öôlock
(&
lk
->lk, "sleepÜock");

16 
lk
->
«me
 =Çame;

17 
lk
->
locked
 = 0;

18 
lk
->
pid
 = 0;

19 
	}
}

22 
	$acquúe¶ìp
(
¶ì∂ock
 *
lk
)

24 
	`acquúe
(&
lk
->lk);

25 
lk
->
locked
) {

26 
	`¶ìp
(
lk
, &lk->lk);

28 
lk
->
locked
 = 1;

29 
lk
->
pid
 = 
	`my¥oc
()->pid;

30 
	`ªÀa£
(&
lk
->lk);

31 
	}
}

34 
	$ªÀa£¶ìp
(
¶ì∂ock
 *
lk
)

36 
	`acquúe
(&
lk
->lk);

37 
lk
->
locked
 = 0;

38 
lk
->
pid
 = 0;

39 
	`wakeup
(
lk
);

40 
	`ªÀa£
(&
lk
->lk);

41 
	}
}

44 
	$hﬁdög¶ìp
(
¶ì∂ock
 *
lk
)

46 
r
;

48 
	`acquúe
(&
lk
->lk);

49 
r
 = 
lk
->
locked
 && (lk->
pid
 =
	`my¥oc
()->pid);

50 
	`ªÀa£
(&
lk
->lk);

51  
r
;

52 
	}
}

	@kernel/sleeplock.h

2 
	s¶ì∂ock
 {

3 
uöt
 
	mlocked
;

4 
•ölock
 
	mlk
;

7 *
	m«me
;

8 
	mpid
;

	@kernel/spinlock.c

3 
	~"ty≥s.h
"

4 
	~"∑øm.h
"

5 
	~"memœyout.h
"

6 
	~"•ölock.h
"

7 
	~"riscv.h
"

8 
	~"¥oc.h
"

9 
	~"defs.h
"

11 
	#NLOCK
 1000

	)

13 
	g∆ock
;

14 
•ölock
 *
	glocks
[
NLOCK
];

18 
	$öôlock
(
•ölock
 *
lk
, *
«me
)

20 
lk
->
«me
 =Çame;

21 
lk
->
locked
 = 0;

22 
lk
->
˝u
 = 0;

23 
lk
->
¡s
 = 0;

24 
lk
->
n
 = 0;

25 if(
∆ock
 >
NLOCK
)

26 
	`∑nic
("initlock");

27 
locks
[
∆ock
] = 
lk
;

28 
∆ock
++;

29 
	}
}

34 
	$acquúe
(
•ölock
 *
lk
)

36 
	`push_off
();

37 if(
	`hﬁdög
(
lk
))

38 
	`∑nic
("acquire");

40 
	`__sync_„tch_™d_add
(&(
lk
->
n
), 1);

46 
	`__sync_lock_ã°_™d_£t
(&
lk
->
locked
, 1) != 0) {

47 
	`__sync_„tch_™d_add
(&
lk
->
¡s
, 1);

54 
	`__sync_synchr⁄ize
();

57 
lk
->
˝u
 = 
	`my˝u
();

58 
	}
}

62 
	$ªÀa£
(
•ölock
 *
lk
)

64 if(!
	`hﬁdög
(
lk
))

65 
	`∑nic
("release");

67 
lk
->
˝u
 = 0;

75 
	`__sync_synchr⁄ize
();

84 
	`__sync_lock_ªÀa£
(&
lk
->
locked
);

86 
	`p›_off
();

87 
	}
}

92 
	$hﬁdög
(
•ölock
 *
lk
)

94 
r
;

95 
r
 = (
lk
->
locked
 &&Ük->
˝u
 =
	`my˝u
());

96  
r
;

97 
	}
}

104 
	$push_off
()

106 
ﬁd
 = 
	`öå_gë
();

107 if(
ﬁd
)

108 
	`öå_off
();

109 if(
	`my˝u
()->
noff
 == 0)

110 
	`my˝u
()->
öã«
 = 
ﬁd
;

111 
	`my˝u
()->
noff
 += 1;

112 
	}
}

115 
	$p›_off
()

117 if(
	`öå_gë
())

118 
	`∑nic
("pop_off - interruptible");

119 
˝u
 *
c
 = 
	`my˝u
();

120 if(
c
->
noff
 < 1)

121 
	`∑nic
("pop_off");

122 
c
->
noff
 -= 1;

123 if(
c
->
noff
 =0 && c->
öã«
)

124 
	`öå_⁄
();

125 
	}
}

128 
	$¥öt_lock
(
•ölock
 *
lk
)

130 if(
lk
->
n
 > 0)

131 
	`¥ötf
("lock: %s: #ã°-™d-£à%d #acquúe(Ë%d\n", 
lk
->
«me
,Ük->
¡s
,Ük->
n
);

132 
	}
}

134 
uöt64


135 
	$sys_¡as
()

137 
zîo
 = 0;

138 
tŸ
 = 0;

140 i‡(
	`¨göt
(0, &
zîo
) < 0) {

143 if(
zîo
 == 0) {

144 
i
 = 0; i < 
NLOCK
; i++) {

145 if(
locks
[
i
] == 0)

147 
locks
[
i
]->
¡s
 = 0;

148 
locks
[
i
]->
n
 = 0;

153 
	`¥ötf
("===Üock kmem/bcache stats\n");

154 
i
 = 0; i < 
NLOCK
; i++) {

155 if(
locks
[
i
] == 0)

157 if(
	`°∫cmp
(
locks
[
i
]->
«me
, "bˇche", 
	`°æí
("bcache")) == 0 ||

158 
	`°∫cmp
(
locks
[
i
]->
«me
, "kmem", 
	`°æí
("kmem")) == 0) {

159 
tŸ
 +
locks
[
i
]->
¡s
;

160 
	`¥öt_lock
(
locks
[
i
]);

164 
	`¥ötf
("===Åop 5 contendedÜocks:\n");

165 
œ°
 = 100000000;

167 
t
= 0;Å < 5;Å++) {

168 
t›
 = 0;

169 
i
 = 0; i < 
NLOCK
; i++) {

170 if(
locks
[
i
] == 0)

172 if(
locks
[
i
]->
¡s
 >Üocks[
t›
]->¡†&&Üocks[i]->¡†< 
œ°
) {

173 
t›
 = 
i
;

176 
	`¥öt_lock
(
locks
[
t›
]);

177 
œ°
 = 
locks
[
t›
]->
¡s
;

179  
tŸ
;

180 
	}
}

	@kernel/spinlock.h

2 
	s•ölock
 {

3 
uöt
 
	mlocked
;

6 *
	m«me
;

7 
˝u
 *
	m˝u
;

8 
uöt
 
	mn
;

9 
uöt
 
	m¡s
;

	@kernel/start.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"riscv.h
"

5 
	~"defs.h
"

7 
maö
();

8 
timîöô
();

11 
__©åibuã__
 ((
	$Æig√d
 (16))Ë
°ack0
[4096 * 
NCPU
];

14 
uöt64
 
ms¸©ch0
[
NCPU
 * 32];

17 
	`timîvec
();

21 
	$°¨t
()

24 
x
 = 
	`r_m°©us
();

25 
x
 &~
MSTATUS_MPP_MASK
;

26 
x
 |
MSTATUS_MPP_S
;

27 
	`w_m°©us
(
x
);

31 
	`w_mïc
((
uöt64
)
maö
);

34 
	`w_ßç
(0);

37 
	`w_medñeg
(0xffff);

38 
	`w_midñeg
(0xffff);

39 
	`w_sõ
(
	`r_sõ
(Ë| 
SIE_SEIE
 | 
SIE_STIE
 | 
SIE_SSIE
);

42 
	`timîöô
();

45 
id
 = 
	`r_mh¨tid
();

46 
	`w_ç
(
id
);

49 
asm
 volatile("mret");

50 
	}
}

57 
	$timîöô
()

60 
id
 = 
	`r_mh¨tid
();

63 
öãrvÆ
 = 1000000;

64 *(
uöt64
*)
	`CLINT_MTIMECMP
(
id
Ë*(uöt64*)
CLINT_MTIME
 + 
öãrvÆ
;

70 
uöt64
 *
s¸©ch
 = &
ms¸©ch0
[32 * 
id
];

71 
s¸©ch
[4] = 
	`CLINT_MTIMECMP
(
id
);

72 
s¸©ch
[5] = 
öãrvÆ
;

73 
	`w_ms¸©ch
((
uöt64
)
s¸©ch
);

76 
	`w_mtvec
((
uöt64
)
timîvec
);

79 
	`w_m°©us
(
	`r_m°©us
(Ë| 
MSTATUS_MIE
);

82 
	`w_mõ
(
	`r_mõ
(Ë| 
MIE_MTIE
);

83 
	}
}

	@kernel/stat.h

1 
	#T_DIR
 1

2 
	#T_FILE
 2

3 
	#T_DEVICE
 3

4 

	)

5 
	s°©
 {

6 
	mdev
;

7 
uöt
 
	möo
;

8 
	mty≥
;

9 
	m∆ök
;

10 
uöt64
 
	msize
;

	@kernel/string.c

1 
	~"ty≥s.h
"

4 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

6 *
cd°
 = (*Ë
d°
;

7 
i
;

8 
i
 = 0; i < 
n
; i++){

9 
cd°
[
i
] = 
c
;

11  
d°
;

12 
	}
}

15 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
uöt
 
n
)

17 c⁄° 
uch¨
 *
s1
, *
s2
;

19 
s1
 = 
v1
;

20 
s2
 = 
v2
;

21 
n
-- > 0){

22 if(*
s1
 !*
s2
)

23  *
s1
 - *
s2
;

24 
s1
++, 
s2
++;

28 
	}
}

31 
	$memmove
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

33 c⁄° *
s
;

34 *
d
;

36 
s
 = 
§c
;

37 
d
 = 
d°
;

38 if(
s
 < 
d
 && s + 
n
 > d){

39 
s
 +
n
;

40 
d
 +
n
;

41 
n
-- > 0)

42 *--
d
 = *--
s
;

44 
n
-- > 0)

45 *
d
++ = *
s
++;

47  
d°
;

48 
	}
}

52 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

54  
	`memmove
(
d°
, 
§c
, 
n
);

55 
	}
}

58 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
uöt
 
n
)

60 
n
 > 0 && *
p
 && *∞=*
q
)

61 
n
--, 
p
++, 
q
++;

62 if(
n
 == 0)

64  (
uch¨
)*
p
 - (uch¨)*
q
;

65 
	}
}

68 
	$°∫˝y
(*
s
, c⁄° *
t
, 
n
)

70 *
os
;

72 
os
 = 
s
;

73 
n
-- > 0 && (*
s
++ = *
t
++) != 0)

75 
n
-- > 0)

76 *
s
++ = 0;

77  
os
;

78 
	}
}

82 
	$ß„°r˝y
(*
s
, c⁄° *
t
, 
n
)

84 *
os
;

86 
os
 = 
s
;

87 if(
n
 <= 0)

88  
os
;

89 --
n
 > 0 && (*
s
++ = *
t
++) != 0)

91 *
s
 = 0;

92  
os
;

93 
	}
}

96 
	$°æí
(c⁄° *
s
)

98 
n
;

100 
n
 = 0; 
s
[n];Ç++)

102  
n
;

103 
	}
}

	@kernel/syscall.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"riscv.h
"

5 
	~"•ölock.h
"

6 
	~"¥oc.h
"

7 
	~"sysˇŒ.h
"

8 
	~"defs.h
"

12 
	$„tchaddr
(
uöt64
 
addr
, uöt64 *
ù
)

14 
¥oc
 *
p
 = 
	`my¥oc
();

15 if(
addr
 >
p
->
sz
 ||áddr+(
uöt64
) >Ö->sz)

17 if(
	`c›yö
(
p
->
∑gëabÀ
, (*)
ù
, 
addr
, (*ip)) != 0)

20 
	}
}

25 
	$„tch°r
(
uöt64
 
addr
, *
buf
, 
max
)

27 
¥oc
 *
p
 = 
	`my¥oc
();

28 
îr
 = 
	`c›yö°r
(
p
->
∑gëabÀ
, 
buf
, 
addr
, 
max
);

29 if(
îr
 < 0)

30  
îr
;

31  
	`°æí
(
buf
);

32 
	}
}

34 
uöt64


35 
	$¨gøw
(
n
)

37 
¥oc
 *
p
 = 
	`my¥oc
();

38 
n
) {

40  
p
->
tf
->
a0
;

42  
p
->
tf
->
a1
;

44  
p
->
tf
->
a2
;

46  
p
->
tf
->
a3
;

48  
p
->
tf
->
a4
;

50  
p
->
tf
->
a5
;

52 
	`∑nic
("argraw");

54 
	}
}

58 
	$¨göt
(
n
, *
ù
)

60 *
ù
 = 
	`¨gøw
(
n
);

62 
	}
}

68 
	$¨gaddr
(
n
, 
uöt64
 *
ù
)

70 *
ù
 = 
	`¨gøw
(
n
);

72 
	}
}

78 
	$¨g°r
(
n
, *
buf
, 
max
)

80 
uöt64
 
addr
;

81 if(
	`¨gaddr
(
n
, &
addr
) < 0)

83  
	`„tch°r
(
addr
, 
buf
, 
max
);

84 
	}
}

86 
uöt64
 
sys_chdú
();

87 
uöt64
 
sys_˛o£
();

88 
uöt64
 
sys_dup
();

89 
uöt64
 
sys_exec
();

90 
uöt64
 
sys_exô
();

91 
uöt64
 
sys_f‹k
();

92 
uöt64
 
sys_f°©
();

93 
uöt64
 
sys_gëpid
();

94 
uöt64
 
sys_kûl
();

95 
uöt64
 
sys_lök
();

96 
uöt64
 
sys_mkdú
();

97 
uöt64
 
sys_mknod
();

98 
uöt64
 
sys_›í
();

99 
uöt64
 
sys_pùe
();

100 
uöt64
 
sys_ªad
();

101 
uöt64
 
sys_sbrk
();

102 
uöt64
 
sys_¶ìp
();

103 
uöt64
 
sys_u∆ök
();

104 
uöt64
 
sys_waô
();

105 
uöt64
 
sys_wrôe
();

106 
uöt64
 
sys_u±ime
();

107 
uöt64
 
sys_c⁄√˘
();

108 
uöt64
 
sys_¡as
();

110 
	$uöt64
 (*
sysˇŒs
[])() = {

111 [
SYS_f‹k
] 
sys_f‹k
,

112 [
SYS_exô
] 
sys_exô
,

113 [
SYS_waô
] 
sys_waô
,

114 [
SYS_pùe
] 
sys_pùe
,

115 [
SYS_ªad
] 
sys_ªad
,

116 [
SYS_kûl
] 
sys_kûl
,

117 [
SYS_exec
] 
sys_exec
,

118 [
SYS_f°©
] 
sys_f°©
,

119 [
SYS_chdú
] 
sys_chdú
,

120 [
SYS_dup
] 
sys_dup
,

121 [
SYS_gëpid
] 
sys_gëpid
,

122 [
SYS_sbrk
] 
sys_sbrk
,

123 [
SYS_¶ìp
] 
sys_¶ìp
,

124 [
SYS_u±ime
] 
sys_u±ime
,

125 [
SYS_›í
] 
sys_›í
,

126 [
SYS_wrôe
] 
sys_wrôe
,

127 [
SYS_mknod
] 
sys_mknod
,

128 [
SYS_u∆ök
] 
sys_u∆ök
,

129 [
SYS_lök
] 
sys_lök
,

130 [
SYS_mkdú
] 
sys_mkdú
,

131 [
SYS_˛o£
] 
sys_˛o£
,

132 [
SYS_c⁄√˘
] 
sys_c⁄√˘
,

133 [
SYS_¡as
] 
sys_¡as
,

134 
	}
};

137 
	$sysˇŒ
()

139 
num
;

140 
¥oc
 *
p
 = 
	`my¥oc
();

142 
num
 = 
p
->
tf
->
a7
;

143 if(
num
 > 0 &&Çum < 
	`NELEM
(
sysˇŒs
) && syscalls[num]) {

144 
p
->
tf
->
a0
 = 
sysˇŒs
[
num
]();

146 
	`¥ötf
("%d %s: unknown sys call %d\n",

147 
p
->
pid
,Ö->
«me
, 
num
);

148 
p
->
tf
->
a0
 = -1;

150 
	}
}

	@kernel/syscall.h

2 
	#SYS_f‹k
 1

	)

3 
	#SYS_exô
 2

	)

4 
	#SYS_waô
 3

	)

5 
	#SYS_pùe
 4

	)

6 
	#SYS_ªad
 5

	)

7 
	#SYS_kûl
 6

	)

8 
	#SYS_exec
 7

	)

9 
	#SYS_f°©
 8

	)

10 
	#SYS_chdú
 9

	)

11 
	#SYS_dup
 10

	)

12 
	#SYS_gëpid
 11

	)

13 
	#SYS_sbrk
 12

	)

14 
	#SYS_¶ìp
 13

	)

15 
	#SYS_u±ime
 14

	)

16 
	#SYS_›í
 15

	)

17 
	#SYS_wrôe
 16

	)

18 
	#SYS_mknod
 17

	)

19 
	#SYS_u∆ök
 18

	)

20 
	#SYS_lök
 19

	)

21 
	#SYS_mkdú
 20

	)

22 
	#SYS_˛o£
 21

	)

23 
	#SYS_c⁄√˘
 22

	)

26 
	#SYS_¡as
 23

	)

	@kernel/sysfile.c

7 
	~"ty≥s.h
"

8 
	~"riscv.h
"

9 
	~"defs.h
"

10 
	~"∑øm.h
"

11 
	~"°©.h
"

12 
	~"•ölock.h
"

13 
	~"¥oc.h
"

14 
	~"fs.h
"

15 
	~"¶ì∂ock.h
"

16 
	~"fûe.h
"

17 
	~"f˙é.h
"

22 
	$¨gfd
(
n
, *
pfd
, 
fûe
 **
pf
)

24 
fd
;

25 
fûe
 *
f
;

27 if(
	`¨göt
(
n
, &
fd
) < 0)

29 if(
fd
 < 0 || fd >
NOFILE
 || (
f
=
	`my¥oc
()->
ofûe
[fd]) == 0)

31 if(
pfd
)

32 *
pfd
 = 
fd
;

33 if(
pf
)

34 *
pf
 = 
f
;

36 
	}
}

41 
	$fdÆloc
(
fûe
 *
f
)

43 
fd
;

44 
¥oc
 *
p
 = 
	`my¥oc
();

46 
fd
 = 0; fd < 
NOFILE
; fd++){

47 if(
p
->
ofûe
[
fd
] == 0){

48 
p
->
ofûe
[
fd
] = 
f
;

49  
fd
;

53 
	}
}

55 
uöt64


56 
	$sys_c⁄√˘
()

58 
fûe
 *
f
;

59 
fd
;

60 
uöt32
 
øddr
;

61 
uöt32
 
Ω‹t
;

62 
uöt32
 
Õ‹t
;

64 i‡(
	`¨göt
(0, (*)&
øddr
) < 0 ||

65 
	`¨göt
(1, (*)&
Õ‹t
) < 0 ||

66 
	`¨göt
(2, (*)&
Ω‹t
) < 0) {

70 if(
	`sockÆloc
(&
f
, 
øddr
, 
Õ‹t
, 
Ω‹t
) < 0)

72 if((
fd
=
	`fdÆloc
(
f
)) < 0){

73 
	`fûe˛o£
(
f
);

77  
fd
;

78 
	}
}

80 
uöt64


81 
	$sys_dup
()

83 
fûe
 *
f
;

84 
fd
;

86 if(
	`¨gfd
(0, 0, &
f
) < 0)

88 if((
fd
=
	`fdÆloc
(
f
)) < 0)

90 
	`fûedup
(
f
);

91  
fd
;

92 
	}
}

94 
uöt64


95 
	$sys_ªad
()

97 
fûe
 *
f
;

98 
n
;

99 
uöt64
 
p
;

101 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨gaddr
(1, &
p
) < 0)

103  
	`fûîód
(
f
, 
p
, 
n
);

104 
	}
}

106 
uöt64


107 
	$sys_wrôe
()

109 
fûe
 *
f
;

110 
n
;

111 
uöt64
 
p
;

113 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨gaddr
(1, &
p
) < 0)

116  
	`fûewrôe
(
f
, 
p
, 
n
);

117 
	}
}

119 
uöt64


120 
	$sys_˛o£
()

122 
fd
;

123 
fûe
 *
f
;

125 if(
	`¨gfd
(0, &
fd
, &
f
) < 0)

127 
	`my¥oc
()->
ofûe
[
fd
] = 0;

128 
	`fûe˛o£
(
f
);

130 
	}
}

132 
uöt64


133 
	$sys_f°©
()

135 
fûe
 *
f
;

136 
uöt64
 
°
;

138 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨gaddr
(1, &
°
) < 0)

140  
	`fûe°©
(
f
, 
°
);

141 
	}
}

144 
uöt64


145 
	$sys_lök
()

147 
«me
[
DIRSIZ
], 
√w
[
MAXPATH
], 
ﬁd
[MAXPATH];

148 
öode
 *
dp
, *
ù
;

150 if(
	`¨g°r
(0, 
ﬁd
, 
MAXPATH
Ë< 0 ||árg°r(1, 
√w
, MAXPATH) < 0)

153 
	`begö_›
(
ROOTDEV
);

154 if((
ù
 = 
	`«mei
(
ﬁd
)) == 0){

155 
	`íd_›
(
ROOTDEV
);

159 
	`ûock
(
ù
);

160 if(
ù
->
ty≥
 =
T_DIR
){

161 
	`iu∆ockput
(
ù
);

162 
	`íd_›
(
ROOTDEV
);

166 
ù
->
∆ök
++;

167 
	`iupd©e
(
ù
);

168 
	`iu∆ock
(
ù
);

170 if((
dp
 = 
	`«meù¨ít
(
√w
, 
«me
)) == 0)

171 
bad
;

172 
	`ûock
(
dp
);

173 if(
dp
->
dev
 !
ù
->dev || 
	`dúlök
(dp, 
«me
, ip->
öum
) < 0){

174 
	`iu∆ockput
(
dp
);

175 
bad
;

177 
	`iu∆ockput
(
dp
);

178 
	`ùut
(
ù
);

180 
	`íd_›
(
ROOTDEV
);

184 
bad
:

185 
	`ûock
(
ù
);

186 
ù
->
∆ök
--;

187 
	`iupd©e
(
ù
);

188 
	`iu∆ockput
(
ù
);

189 
	`íd_›
(
ROOTDEV
);

191 
	}
}

195 
	$isdúem±y
(
öode
 *
dp
)

197 
off
;

198 
dúít
 
de
;

200 
off
=2*(
de
); off<
dp
->
size
; off+=(de)){

201 if(
	`ªadi
(
dp
, 0, (
uöt64
)&
de
, 
off
, (de)) != (de))

202 
	`∑nic
("isdirempty:Ñeadi");

203 if(
de
.
öum
 != 0)

207 
	}
}

209 
uöt64


210 
	$sys_u∆ök
()

212 
öode
 *
ù
, *
dp
;

213 
dúít
 
de
;

214 
«me
[
DIRSIZ
], 
∑th
[
MAXPATH
];

215 
uöt
 
off
;

217 if(
	`¨g°r
(0, 
∑th
, 
MAXPATH
) < 0)

220 
	`begö_›
(
ROOTDEV
);

221 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0){

222 
	`íd_›
(
ROOTDEV
);

226 
	`ûock
(
dp
);

229 if(
	`«mecmp
(
«me
, ".") == 0 ||Çamecmp(name, "..") == 0)

230 
bad
;

232 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) == 0)

233 
bad
;

234 
	`ûock
(
ù
);

236 if(
ù
->
∆ök
 < 1)

237 
	`∑nic
("unlink:Çlink < 1");

238 if(
ù
->
ty≥
 =
T_DIR
 && !
	`isdúem±y
(ip)){

239 
	`iu∆ockput
(
ù
);

240 
bad
;

243 
	`mem£t
(&
de
, 0, (de));

244 if(
	`wrôei
(
dp
, 0, (
uöt64
)&
de
, 
off
, (de)) != (de))

245 
	`∑nic
("unlink: writei");

246 if(
ù
->
ty≥
 =
T_DIR
){

247 
dp
->
∆ök
--;

248 
	`iupd©e
(
dp
);

250 
	`iu∆ockput
(
dp
);

252 
ù
->
∆ök
--;

253 
	`iupd©e
(
ù
);

254 
	`iu∆ockput
(
ù
);

256 
	`íd_›
(
ROOTDEV
);

260 
bad
:

261 
	`iu∆ockput
(
dp
);

262 
	`íd_›
(
ROOTDEV
);

264 
	}
}

266 
öode
*

267 
	$¸óã
(*
∑th
, 
ty≥
, 
maj‹
, 
mö‹
)

269 
öode
 *
ù
, *
dp
;

270 
«me
[
DIRSIZ
];

272 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0)

275 
	`ûock
(
dp
);

277 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, 0)) != 0){

278 
	`iu∆ockput
(
dp
);

279 
	`ûock
(
ù
);

280 if(
ty≥
 =
T_FILE
 && (
ù
->ty≥ =T_FILE || ip->ty≥ =
T_DEVICE
))

281  
ù
;

282 
	`iu∆ockput
(
ù
);

286 if((
ù
 = 
	`üŒoc
(
dp
->
dev
, 
ty≥
)) == 0)

287 
	`∑nic
("create: ialloc");

289 
	`ûock
(
ù
);

290 
ù
->
maj‹
 = major;

291 
ù
->
mö‹
 = minor;

292 
ù
->
∆ök
 = 1;

293 
	`iupd©e
(
ù
);

295 if(
ty≥
 =
T_DIR
){

296 
dp
->
∆ök
++;

297 
	`iupd©e
(
dp
);

299 if(
	`dúlök
(
ù
, ".", ip->
öum
Ë< 0 || dúlök(ù, "..", 
dp
->inum) < 0)

300 
	`∑nic
("create dots");

303 if(
	`dúlök
(
dp
, 
«me
, 
ù
->
öum
) < 0)

304 
	`∑nic
("create: dirlink");

306 
	`iu∆ockput
(
dp
);

308  
ù
;

309 
	}
}

311 
uöt64


312 
	$sys_›í
()

314 
∑th
[
MAXPATH
];

315 
fd
, 
omode
;

316 
fûe
 *
f
;

317 
öode
 *
ù
;

318 
n
;

320 if((
n
 = 
	`¨g°r
(0, 
∑th
, 
MAXPATH
)Ë< 0 || 
	`¨göt
(1, &
omode
) < 0)

323 
	`begö_›
(
ROOTDEV
);

325 if(
omode
 & 
O_CREATE
){

326 
ù
 = 
	`¸óã
(
∑th
, 
T_FILE
, 0, 0);

327 if(
ù
 == 0){

328 
	`íd_›
(
ROOTDEV
);

332 if((
ù
 = 
	`«mei
(
∑th
)) == 0){

333 
	`íd_›
(
ROOTDEV
);

336 
	`ûock
(
ù
);

337 if(
ù
->
ty≥
 =
T_DIR
 && 
omode
 !
O_RDONLY
){

338 
	`iu∆ockput
(
ù
);

339 
	`íd_›
(
ROOTDEV
);

344 if(
ù
->
ty≥
 =
T_DEVICE
 && (ù->
maj‹
 < 0 || ip->maj‹ >
NDEV
)){

345 
	`iu∆ockput
(
ù
);

346 
	`íd_›
(
ROOTDEV
);

350 if((
f
 = 
	`fûóŒoc
()Ë=0 || (
fd
 = 
	`fdÆloc
(f)) < 0){

351 if(
f
)

352 
	`fûe˛o£
(
f
);

353 
	`iu∆ockput
(
ù
);

354 
	`íd_›
(
ROOTDEV
);

358 if(
ù
->
ty≥
 =
T_DEVICE
){

359 
f
->
ty≥
 = 
FD_DEVICE
;

360 
f
->
maj‹
 = 
ù
->major;

361 
f
->
mö‹
 = 
ù
->minor;

363 
f
->
ty≥
 = 
FD_INODE
;

365 
f
->
ù
 = ip;

366 
f
->
off
 = 0;

367 
f
->
ªadabÀ
 = !(
omode
 & 
O_WRONLY
);

368 
f
->
wrôabÀ
 = (
omode
 & 
O_WRONLY
Ë|| (omodê& 
O_RDWR
);

370 
	`iu∆ock
(
ù
);

371 
	`íd_›
(
ROOTDEV
);

373  
fd
;

374 
	}
}

376 
uöt64


377 
	$sys_mkdú
()

379 
∑th
[
MAXPATH
];

380 
öode
 *
ù
;

382 
	`begö_›
(
ROOTDEV
);

383 if(
	`¨g°r
(0, 
∑th
, 
MAXPATH
Ë< 0 || (
ù
 = 
	`¸óã
’©h, 
T_DIR
, 0, 0)) == 0){

384 
	`íd_›
(
ROOTDEV
);

387 
	`iu∆ockput
(
ù
);

388 
	`íd_›
(
ROOTDEV
);

390 
	}
}

392 
uöt64


393 
	$sys_mknod
()

395 
öode
 *
ù
;

396 
∑th
[
MAXPATH
];

397 
maj‹
, 
mö‹
;

399 
	`begö_›
(
ROOTDEV
);

400 if((
	`¨g°r
(0, 
∑th
, 
MAXPATH
)) < 0 ||

401 
	`¨göt
(1, &
maj‹
) < 0 ||

402 
	`¨göt
(2, &
mö‹
) < 0 ||

403 (
ù
 = 
	`¸óã
(
∑th
, 
T_DEVICE
, 
maj‹
, 
mö‹
)) == 0){

404 
	`íd_›
(
ROOTDEV
);

407 
	`iu∆ockput
(
ù
);

408 
	`íd_›
(
ROOTDEV
);

410 
	}
}

412 
uöt64


413 
	$sys_chdú
()

415 
∑th
[
MAXPATH
];

416 
öode
 *
ù
;

417 
¥oc
 *
p
 = 
	`my¥oc
();

419 
	`begö_›
(
ROOTDEV
);

420 if(
	`¨g°r
(0, 
∑th
, 
MAXPATH
Ë< 0 || (
ù
 = 
	`«mei
(path)) == 0){

421 
	`íd_›
(
ROOTDEV
);

424 
	`ûock
(
ù
);

425 if(
ù
->
ty≥
 !
T_DIR
){

426 
	`iu∆ockput
(
ù
);

427 
	`íd_›
(
ROOTDEV
);

430 
	`iu∆ock
(
ù
);

431 
	`ùut
(
p
->
cwd
);

432 
	`íd_›
(
ROOTDEV
);

433 
p
->
cwd
 = 
ù
;

435 
	}
}

437 
uöt64


438 
	$sys_exec
()

440 
∑th
[
MAXPATH
], *
¨gv
[
MAXARG
];

441 
i
;

442 
uöt64
 
u¨gv
, 
u¨g
;

444 if(
	`¨g°r
(0, 
∑th
, 
MAXPATH
Ë< 0 || 
	`¨gaddr
(1, &
u¨gv
) < 0){

447 
	`mem£t
(
¨gv
, 0, (argv));

448 
i
=0;; i++){

449 if(
i
 >
	`NELEM
(
¨gv
)){

450 
bad
;

452 if(
	`„tchaddr
(
u¨gv
+(
uöt64
)*
i
, (uöt64*)&
u¨g
) < 0){

453 
bad
;

455 if(
u¨g
 == 0){

456 
¨gv
[
i
] = 0;

459 
¨gv
[
i
] = 
	`kÆloc
();

460 if(
¨gv
[
i
] == 0)

461 
	`∑nic
("sys_exec kalloc");

462 if(
	`„tch°r
(
u¨g
, 
¨gv
[
i
], 
PGSIZE
) < 0){

463 
bad
;

467 
ªt
 = 
	`exec
(
∑th
, 
¨gv
);

469 
i
 = 0; i < 
	`NELEM
(
¨gv
) &&árgv[i] != 0; i++)

470 
	`k‰ì
(
¨gv
[
i
]);

472  
ªt
;

474 
bad
:

475 
i
 = 0; i < 
	`NELEM
(
¨gv
) &&árgv[i] != 0; i++)

476 
	`k‰ì
(
¨gv
[
i
]);

478 
	}
}

480 
uöt64


481 
	$sys_pùe
()

483 
uöt64
 
fd¨øy
;

484 
fûe
 *
rf
, *
wf
;

485 
fd0
, 
fd1
;

486 
¥oc
 *
p
 = 
	`my¥oc
();

488 if(
	`¨gaddr
(0, &
fd¨øy
) < 0)

490 if(
	`pùóŒoc
(&
rf
, &
wf
) < 0)

492 
fd0
 = -1;

493 if((
fd0
 = 
	`fdÆloc
(
rf
)Ë< 0 || (
fd1
 = fdÆloc(
wf
)) < 0){

494 if(
fd0
 >= 0)

495 
p
->
ofûe
[
fd0
] = 0;

496 
	`fûe˛o£
(
rf
);

497 
	`fûe˛o£
(
wf
);

500 if(
	`c›yout
(
p
->
∑gëabÀ
, 
fd¨øy
, (*)&
fd0
, (fd0)) < 0 ||

501 
	`c›yout
(
p
->
∑gëabÀ
, 
fd¨øy
+(
fd0
), (*)&
fd1
, (fd1)) < 0){

502 
p
->
ofûe
[
fd0
] = 0;

503 
p
->
ofûe
[
fd1
] = 0;

504 
	`fûe˛o£
(
rf
);

505 
	`fûe˛o£
(
wf
);

509 
	}
}

	@kernel/sysnet.c

5 
	~"ty≥s.h
"

6 
	~"∑øm.h
"

7 
	~"memœyout.h
"

8 
	~"riscv.h
"

9 
	~"•ölock.h
"

10 
	~"¥oc.h
"

11 
	~"defs.h
"

12 
	~"fs.h
"

13 
	~"¶ì∂ock.h
"

14 
	~"fûe.h
"

15 
	~"√t.h
"

17 
	ssock
 {

18 
sock
 *
	m√xt
;

19 
uöt32
 
	møddr
;

20 
uöt16
 
	mÕ‹t
;

21 
uöt16
 
	mΩ‹t
;

22 
•ölock
 
	mlock
;

23 
mbufq
 
	mrxq
;

26 
•ölock
 
	glock
;

27 
sock
 *
	gsockës
;

30 
	$socköô
()

32 
	`öôlock
(&
lock
, "socktbl");

33 
	}
}

36 
	$sockÆloc
(
fûe
 **
f
, 
uöt32
 
øddr
, 
uöt16
 
Õ‹t
, uöt16 
Ω‹t
)

38 
sock
 *
si
, *
pos
;

40 
si
 = 0;

41 *
f
 = 0;

42 i‡((*
f
 = 
	`fûóŒoc
()) == 0)

43 
bad
;

44 i‡((
si
 = (
sock
*)
	`kÆloc
()) == 0)

45 
bad
;

48 
si
->
øddr
 =Ñaddr;

49 
si
->
Õ‹t
 =Üport;

50 
si
->
Ω‹t
 =Ñport;

51 
	`öôlock
(&
si
->
lock
, "sock");

52 
	`mbufq_öô
(&
si
->
rxq
);

53 (*
f
)->
ty≥
 = 
FD_SOCK
;

54 (*
f
)->
ªadabÀ
 = 1;

55 (*
f
)->
wrôabÀ
 = 1;

56 (*
f
)->
sock
 = 
si
;

59 
	`acquúe
(&
lock
);

60 
pos
 = 
sockës
;

61 
pos
) {

62 i‡(
pos
->
øddr
 ==Ñaddr &&

63 
pos
->
Õ‹t
 ==Üport &&

64 
pos
->
Ω‹t
 ==Ñport) {

65 
	`ªÀa£
(&
lock
);

66 
bad
;

68 
pos
 =Öos->
√xt
;

70 
si
->
√xt
 = 
sockës
;

71 
sockës
 = 
si
;

72 
	`ªÀa£
(&
lock
);

75 
bad
:

76 i‡(
si
)

77 
	`k‰ì
((*)
si
);

78 i‡(*
f
)

79 
	`fûe˛o£
(*
f
);

81 
	}
}

91 
	$sock˛o£
(
sock
 *
sockë
)

95 
sock
 *
pos
, *
ãmp
;

96 
ãmp
 = 0;

97 
	`acquúe
(&
lock
);

99 
pos
 = 
sockës
;

100 if(!
pos
) {

104 i‡(
pos
 =
sockë
) {

106 
sockës
 = 
pos
->
√xt
;

107 
ãmp
 = 
pos
;

110 
pos
->
√xt
) {

111 i‡(
pos
->
√xt
 =
sockë
) {

113 
ãmp
 = 
pos
->
√xt
;

114 
pos
->
√xt
 = 
ãmp
->next;

117 
pos
 =Öos->
√xt
;

120 
	`ªÀa£
(&
lock
);

122 if(!
ãmp
) ;

124 
	`acquúe
(&
ãmp
->
lock
);

127 
mbuf
* mbu‡
ãmp
->
rxq
.
hód
;

128 
mbuf
* 
ôî_mbuf
;

129 
mbuf
) {

133 
ôî_mbuf
 = 
mbuf
;

134 
mbuf
 = mbuf->
√xt
;

135 
	`mbuf‰ì
(
ôî_mbuf
);

138 
	`ªÀa£
(&
ãmp
->
lock
);

140 
	`k‰ì
(
ãmp
);

141 
	}
}

144 
	$sockªad
(
sock
* 
sockë
, 
uöt64
 
addr
, 
n
)

147 
mbuf
* mbuf;

148 
¥oc
 *
¥
 = 
	`my¥oc
();

150 
	`acquúe
(&
sockë
->
lock
);

153 
	`mbufq_em±y
(&
sockë
->
rxq
)) {

155 if(
	`my¥oc
()->
kûÀd
) {

156 
	`ªÀa£
(&
sockë
->
lock
);

159 
	`¶ìp
(&
sockë
->
rxq
, &sockë->
lock
);

163 if((
mbuf
 = 
	`mbufq_p›hód
(&
sockë
->
rxq
)) == 0) {

164 
	`∑nic
("sockread");

167 
	`ªÀa£
(&
sockë
->
lock
);

170 if(
n
 > 
mbuf
->
Àn
)Ç = mbuf->len;

172 if(
	`c›yout
(
¥
->
∑gëabÀ
, 
addr
, 
mbuf
->
hód
, 
n
) == -1) {

173 
n
 = -1;

177 
	`mbuf‰ì
(
mbuf
);

179  
n
;

180 
	}
}

183 
	$sockwrôe
(
sock
* 
sockë
, 
uöt64
 
addr
, 
n
)

185 
mbuf
 *mbuf;

186 
¥oc
 *
¥
 = 
	`my¥oc
();

188 
hódroom
;

190 
hódroom
 = (
udp
Ë+ (
ù
Ë+ (
ëh
);

194 if((
mbuf
 = 
	`mbuÁŒoc
(
hódroom
)) == 0) {

195 
	`∑nic
("sockwrite");

199 
	`mbuÂut
(
mbuf
, 
n
);

202 if(
	`c›yö
(
¥
->
∑gëabÀ
, 
mbuf
->
hód
, 
addr
, 
n
) == -1) {

203 
	`mbuf‰ì
(
mbuf
);

207 
	`acquúe
(&
sockë
->
lock
);

209 
	`√t_tx_udp
(
mbuf
, 
sockë
->
øddr
, sockë->
Õ‹t
, sockë->
Ω‹t
);

211 
	`ªÀa£
(&
sockë
->
lock
);

212  
n
;

213 
	}
}

217 
	$sockªcvudp
(
mbuf
 *
m
, 
uöt32
 
øddr
, 
uöt16
 
Õ‹t
, uöt16 
Ω‹t
)

227 
sock
* 
pos
;

229 
	`acquúe
(&
lock
);

231 
pos
 = 
sockës
;

232 
pos
) {

233 i‡(
pos
->
øddr
 ==Ñaddr &&

234 
pos
->
Õ‹t
 ==Üport &&

235 
pos
->
Ω‹t
 ==Ñport) {

239 
pos
 =Öos->
√xt
;

242 
	`ªÀa£
(&
lock
);

244 if(
pos
) {

245 
	`acquúe
(&
pos
->
lock
);

247 
	`mbufq_pushèû
(&
pos
->
rxq
, 
m
);

248 
	`wakeup
(&
pos
->
rxq
);

250 
	`ªÀa£
(&
pos
->
lock
);

254 
	`mbuf‰ì
(
m
);

256 
	}
}

	@kernel/sysproc.c

1 
	~"ty≥s.h
"

2 
	~"riscv.h
"

3 
	~"defs.h
"

4 
	~"d©e.h
"

5 
	~"∑øm.h
"

6 
	~"memœyout.h
"

7 
	~"•ölock.h
"

8 
	~"¥oc.h
"

10 
uöt64


11 
	$sys_exô
()

13 
n
;

14 if(
	`¨göt
(0, &
n
) < 0)

16 
	`exô
(
n
);

18 
	}
}

20 
uöt64


21 
	$sys_gëpid
()

23  
	`my¥oc
()->
pid
;

24 
	}
}

26 
uöt64


27 
	$sys_f‹k
()

29  
	`f‹k
();

30 
	}
}

32 
uöt64


33 
	$sys_waô
()

35 
uöt64
 
p
;

36 if(
	`¨gaddr
(0, &
p
) < 0)

38  
	`waô
(
p
);

39 
	}
}

41 
uöt64


42 
	$sys_sbrk
()

44 
addr
;

45 
n
;

47 if(
	`¨göt
(0, &
n
) < 0)

49 
addr
 = 
	`my¥oc
()->
sz
;

50 if(
	`grow¥oc
(
n
) < 0)

52  
addr
;

53 
	}
}

55 
uöt64


56 
	$sys_¶ìp
()

58 
n
;

59 
uöt
 
ticks0
;

61 if(
	`¨göt
(0, &
n
) < 0)

63 
	`acquúe
(&
tick¶ock
);

64 
ticks0
 = 
ticks
;

65 
ticks
 - 
ticks0
 < 
n
){

66 if(
	`my¥oc
()->
kûÀd
){

67 
	`ªÀa£
(&
tick¶ock
);

70 
	`¶ìp
(&
ticks
, &
tick¶ock
);

72 
	`ªÀa£
(&
tick¶ock
);

74 
	}
}

76 
uöt64


77 
	$sys_kûl
()

79 
pid
;

81 if(
	`¨göt
(0, &
pid
) < 0)

83  
	`kûl
(
pid
);

84 
	}
}

88 
uöt64


89 
	$sys_u±ime
()

91 
uöt
 
xticks
;

93 
	`acquúe
(&
tick¶ock
);

94 
xticks
 = 
ticks
;

95 
	`ªÀa£
(&
tick¶ock
);

96  
xticks
;

97 
	}
}

	@kernel/trap.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"riscv.h
"

5 
	~"•ölock.h
"

6 
	~"¥oc.h
"

7 
	~"defs.h
"

9 
•ölock
 
	gtick¶ock
;

10 
uöt
 
	gticks
;

12 
åampﬁöe
[], 
u£rvec
[], 
u£ºë
[];

15 
kî√lvec
();

17 
devöå
();

20 
sˇu£_desc
(
uöt64
 
°vÆ
);

23 
	$å≠öô
()

25 
	`öôlock
(&
tick¶ock
, "time");

26 
	}
}

30 
	$å≠öôh¨t
()

32 
	`w_°vec
((
uöt64
)
kî√lvec
);

33 
	}
}

40 
	$u£πøp
()

42 
which_dev
 = 0;

44 if((
	`r_s°©us
(Ë& 
SSTATUS_SPP
) != 0)

45 
	`∑nic
("usertrap:Çot from user mode");

49 
	`w_°vec
((
uöt64
)
kî√lvec
);

51 
¥oc
 *
p
 = 
	`my¥oc
();

54 
p
->
tf
->
ïc
 = 
	`r_£pc
();

56 if(
	`r_sˇu£
() == 8){

59 if(
p
->
kûÀd
)

60 
	`exô
(-1);

64 
p
->
tf
->
ïc
 += 4;

68 
	`öå_⁄
();

70 
	`sysˇŒ
();

71 } if((
which_dev
 = 
	`devöå
()) != 0){

74 
	`¥ötf
("u£πøp(): u√x≥˘ed sˇu£ %∞(%sËpid=%d\n", 
	`r_sˇu£
(), 
	`sˇu£_desc
‘_sˇu£()), 
p
->
pid
);

75 
	`¥ötf
(" sïc=%∞°vÆ=%p\n", 
	`r_£pc
(), 
	`r_°vÆ
());

76 
p
->
kûÀd
 = 1;

79 if(
p
->
kûÀd
)

80 
	`exô
(-1);

83 if(
which_dev
 == 2)

84 
	`yõld
();

86 
	`u£πø¥ë
();

87 
	}
}

93 
	$u£πø¥ë
()

95 
¥oc
 *
p
 = 
	`my¥oc
();

99 
	`öå_off
();

102 
	`w_°vec
(
TRAMPOLINE
 + (
u£rvec
 - 
åampﬁöe
));

106 
p
->
tf
->
kî√l_ßç
 = 
	`r_ßç
();

107 
p
->
tf
->
kî√l_•
 =Ö->
k°ack
 + 
PGSIZE
;

108 
p
->
tf
->
kî√l_å≠
 = (
uöt64
)
u£πøp
;

109 
p
->
tf
->
kî√l_h¨tid
 = 
	`r_ç
();

115 
x
 = 
	`r_s°©us
();

116 
x
 &~
SSTATUS_SPP
;

117 
x
 |
SSTATUS_SPIE
;

118 
	`w_s°©us
(
x
);

121 
	`w_£pc
(
p
->
tf
->
ïc
);

124 
uöt64
 
ßç
 = 
	`MAKE_SATP
(
p
->
∑gëabÀ
);

129 
uöt64
 
‚
 = 
TRAMPOLINE
 + (
u£ºë
 - 
åampﬁöe
);

130 (((*)(
uöt64
,uöt64))
‚
)(
TRAPFRAME
, 
ßç
);

131 
	}
}

136 
	$kî√…øp
()

138 
which_dev
 = 0;

139 
uöt64
 
£pc
 = 
	`r_£pc
();

140 
uöt64
 
s°©us
 = 
	`r_s°©us
();

141 
uöt64
 
sˇu£
 = 
	`r_sˇu£
();

143 if((
s°©us
 & 
SSTATUS_SPP
) == 0)

144 
	`∑nic
("kerneltrap:Çot from supervisor mode");

145 if(
	`öå_gë
() != 0)

146 
	`∑nic
("kerneltrap: interruptsÉnabled");

148 if((
which_dev
 = 
	`devöå
()) == 0){

149 
	`¥ötf
("sˇu£ %∞(%s)\n", 
sˇu£
, 
	`sˇu£_desc
(scause));

150 
	`¥ötf
("£pc=%∞°vÆ=%p\n", 
	`r_£pc
(), 
	`r_°vÆ
());

151 
	`∑nic
("kerneltrap");

155 if(
which_dev
 =2 && 
	`my¥oc
(Ë!0 && my¥oc()->
°©e
 =
RUNNING
)

156 
	`yõld
();

160 
	`w_£pc
(
£pc
);

161 
	`w_s°©us
(
s°©us
);

162 
	}
}

165 
	$˛ocköå
()

167 
	`acquúe
(&
tick¶ock
);

168 
ticks
++;

169 
	`wakeup
(&
ticks
);

170 
	`ªÀa£
(&
tick¶ock
);

171 
	}
}

179 
	$devöå
()

181 
uöt64
 
sˇu£
 = 
	`r_sˇu£
();

183 if((
sˇu£
 & 0x8000000000000000L) &&

184 (
sˇu£
 & 0xff) == 9){

188 
úq
 = 
	`∂ic_˛aim
();

190 if(
úq
 =
UART0_IRQ
){

191 
	`u¨töå
();

192 } if(
úq
 =
VIRTIO0_IRQ
 || irq =
VIRTIO1_IRQ
 ){

193 
	`vútio_disk_öå
(
úq
 - 
VIRTIO0_IRQ
);

194 } if(
úq
 =
E1000_IRQ
){

195 
	`e1000_öå
();

201 if(
úq
)

202 
	`∂ic_com∂ëe
(
úq
);

205 } if(
sˇu£
 == 0x8000000000000001L){

209 if(
	`˝uid
() == 0){

210 
	`˛ocköå
();

215 
	`w_sù
(
	`r_sù
() & ~2);

221 
	}
}

224 
	$sˇu£_desc
(
uöt64
 
°vÆ
)

226 c⁄° *
öå_desc
[16] = {

244 c⁄° *
noöå_desc
[16] = {

262 
uöt64
 
öãºu±
 = 
°vÆ
 & 0x8000000000000000L;

263 
uöt64
 
code
 = 
°vÆ
 & ~0x8000000000000000L;

264 i‡(
öãºu±
) {

265 i‡(
code
 < 
	`NELEM
(
öå_desc
)) {

266  
öå_desc
[
code
];

271 i‡(
code
 < 
	`NELEM
(
noöå_desc
)) {

272  
noöå_desc
[
code
];

273 } i‡(
code
 <= 23) {

275 } i‡(
code
 <= 31) {

277 } i‡(
code
 <= 47) {

279 } i‡(
code
 <= 63) {

285 
	}
}

	@kernel/types.h

1 
	tuöt
;

2 
	tush‹t
;

3 
	tuch¨
;

5 
	tuöt8
;

6 
	tuöt16
;

7 
	tuöt32
;

8 
	tuöt64
;

10 
uöt64
 
	tpde_t
;

	@kernel/uart.c

5 
	~"ty≥s.h
"

6 
	~"∑øm.h
"

7 
	~"memœyout.h
"

8 
	~"riscv.h
"

9 
	~"•ölock.h
"

10 
	~"¥oc.h
"

11 
	~"defs.h
"

16 
	#Reg
(
ªg
Ë((vﬁ©ûê*)(
UART0
 +Ñeg))

	)

22 
	#RHR
 0

23 
	#THR
 0

24 
	#IER
 1

25 
	#FCR
 2

26 
	#ISR
 2

27 
	#LCR
 3

28 
	#LSR
 5

29 

	)

30 
	#RódReg
(
ªg
Ë(*(
	`Reg
‘eg)))

	)

31 
	#WrôeReg
(
ªg
, 
v
Ë(*(
	`Reg
‘eg)Ë(v))

	)

34 
	$u¨töô
()

37 
	`WrôeReg
(
IER
, 0x00);

40 
	`WrôeReg
(
LCR
, 0x80);

43 
	`WrôeReg
(0, 0x03);

46 
	`WrôeReg
(1, 0x00);

50 
	`WrôeReg
(
LCR
, 0x03);

53 
	`WrôeReg
(
FCR
, 0x07);

56 
	`WrôeReg
(
IER
, 0x01);

57 
	}
}

61 
	$u¨çutc
(
c
)

64 (
	`RódReg
(
LSR
) & (1 << 5)) == 0)

66 
	`WrôeReg
(
THR
, 
c
);

67 
	}
}

72 
	$u¨tgëc
()

74 if(
	`RódReg
(
LSR
) & 0x01){

76  
	`RódReg
(
RHR
);

80 
	}
}

84 
	$u¨töå
()

87 
c
 = 
	`u¨tgëc
();

88 if(
c
 == -1)

90 
	`c⁄sﬁeöå
(
c
);

92 
	}
}

	@kernel/virtio.h

13 
	#VIRTIO_MMIO_MAGIC_VALUE
 0x000

14 
	#VIRTIO_MMIO_VERSION
 0x004

15 
	#VIRTIO_MMIO_DEVICE_ID
 0x008

16 
	#VIRTIO_MMIO_VENDOR_ID
 0x00c

17 
	#VIRTIO_MMIO_DEVICE_FEATURES
 0x010

	)

18 
	#VIRTIO_MMIO_DRIVER_FEATURES
 0x020

	)

19 
	#VIRTIO_MMIO_GUEST_PAGE_SIZE
 0x028

20 
	#VIRTIO_MMIO_QUEUE_SEL
 0x030

21 
	#VIRTIO_MMIO_QUEUE_NUM_MAX
 0x034

22 
	#VIRTIO_MMIO_QUEUE_NUM
 0x038

23 
	#VIRTIO_MMIO_QUEUE_ALIGN
 0x03c

24 
	#VIRTIO_MMIO_QUEUE_PFN
 0x040

25 
	#VIRTIO_MMIO_QUEUE_READY
 0x044

26 
	#VIRTIO_MMIO_QUEUE_NOTIFY
 0x050

27 
	#VIRTIO_MMIO_INTERRUPT_STATUS
 0x060

28 
	#VIRTIO_MMIO_INTERRUPT_ACK
 0x064

29 
	#VIRTIO_MMIO_STATUS
 0x070

30 

	)

32 
	#VIRTIO_CONFIG_S_ACKNOWLEDGE
 1

	)

33 
	#VIRTIO_CONFIG_S_DRIVER
 2

	)

34 
	#VIRTIO_CONFIG_S_DRIVER_OK
 4

	)

35 
	#VIRTIO_CONFIG_S_FEATURES_OK
 8

	)

38 
	#VIRTIO_BLK_F_RO
 5

	)

39 
	#VIRTIO_BLK_F_SCSI
 7

	)

40 
	#VIRTIO_BLK_F_CONFIG_WCE
 11

	)

41 
	#VIRTIO_BLK_F_MQ
 12

	)

42 
	#VIRTIO_F_ANY_LAYOUT
 27

	)

43 
	#VIRTIO_RING_F_INDIRECT_DESC
 28

	)

44 
	#VIRTIO_RING_F_EVENT_IDX
 29

	)

48 
	#NUM
 8

	)

50 
	sVRögDesc
 {

51 
uöt64
 
	maddr
;

52 
uöt32
 
	mÀn
;

53 
uöt16
 
	mÊags
;

54 
uöt16
 
	m√xt
;

56 
	#VRING_DESC_F_NEXT
 1

57 
	#VRING_DESC_F_WRITE
 2

58 

	)

59 
	sVRögU£dEÀm
 {

60 
uöt32
 
	mid
;

61 
uöt32
 
	mÀn
;

65 
	#VIRTIO_BLK_T_IN
 0

66 
	#VIRTIO_BLK_T_OUT
 1

67 

	)

68 
	sU£dAªa
 {

69 
uöt16
 
	mÊags
;

70 
uöt16
 
	mid
;

71 
VRögU£dEÀm
 
	mñems
[
NUM
];

	@kernel/virtio_disk.c

9 
	~"ty≥s.h
"

10 
	~"riscv.h
"

11 
	~"defs.h
"

12 
	~"∑øm.h
"

13 
	~"memœyout.h
"

14 
	~"•ölock.h
"

15 
	~"¶ì∂ock.h
"

16 
	~"fs.h
"

17 
	~"buf.h
"

18 
	~"vútio.h
"

21 
	#R
(
n
, 
r
Ë((vﬁ©ûê
uöt32
 *)(
	`VIRTION
“Ë+ (r)))

	)

23 
	sdisk
 {

28 
	m∑ges
[2*
PGSIZE
];

30 
VRögDesc
 *
	mdesc
;

31 
uöt16
 *
	mavaû
;

32 
U£dAªa
 *
	mu£d
;

35 
	m‰ì
[
NUM
];

36 
uöt16
 
	mu£d_idx
;

42 
buf
 *
	mb
;

43 
	m°©us
;

44 } 
	möfo
[
NUM
];

47 
	möô
;

49 
•ölock
 
	mvdisk_lock
;

50 } 
__©åibuã__
 ((
	$Æig√d
 (
PGSIZE
))Ë
disk
[
NDISK
];

55 
	$vútio_disk_öô
(
n
)

57 
uöt32
 
°©us
 = 0;

59 
	`__sync_synchr⁄ize
();

60 if(
disk
[
n
].
öô
)

63 
	`¥ötf
("vútiÿdisk inô %d\n", 
n
);

65 
	`öôlock
(&
disk
[
n
].
vdisk_lock
, "virtio_disk");

67 if(*
	`R
(
n
, 
VIRTIO_MMIO_MAGIC_VALUE
) != 0x74726976 ||

68 *
	`R
(
n
, 
VIRTIO_MMIO_VERSION
) != 1 ||

69 *
	`R
(
n
, 
VIRTIO_MMIO_DEVICE_ID
) != 2 ||

70 *
	`R
(
n
, 
VIRTIO_MMIO_VENDOR_ID
) != 0x554d4551){

71 
	`∑nic
("couldÇot find virtio disk");

74 
°©us
 |
VIRTIO_CONFIG_S_ACKNOWLEDGE
;

75 *
	`R
(
n
, 
VIRTIO_MMIO_STATUS
Ë
°©us
;

77 
°©us
 |
VIRTIO_CONFIG_S_DRIVER
;

78 *
	`R
(
n
, 
VIRTIO_MMIO_STATUS
Ë
°©us
;

81 
uöt64
 
„©uªs
 = *
	`R
(
n
, 
VIRTIO_MMIO_DEVICE_FEATURES
);

82 
„©uªs
 &~(1 << 
VIRTIO_BLK_F_RO
);

83 
„©uªs
 &~(1 << 
VIRTIO_BLK_F_SCSI
);

84 
„©uªs
 &~(1 << 
VIRTIO_BLK_F_CONFIG_WCE
);

85 
„©uªs
 &~(1 << 
VIRTIO_BLK_F_MQ
);

86 
„©uªs
 &~(1 << 
VIRTIO_F_ANY_LAYOUT
);

87 
„©uªs
 &~(1 << 
VIRTIO_RING_F_EVENT_IDX
);

88 
„©uªs
 &~(1 << 
VIRTIO_RING_F_INDIRECT_DESC
);

89 *
	`R
(
n
, 
VIRTIO_MMIO_DRIVER_FEATURES
Ë
„©uªs
;

92 
°©us
 |
VIRTIO_CONFIG_S_FEATURES_OK
;

93 *
	`R
(
n
, 
VIRTIO_MMIO_STATUS
Ë
°©us
;

96 
°©us
 |
VIRTIO_CONFIG_S_DRIVER_OK
;

97 *
	`R
(
n
, 
VIRTIO_MMIO_STATUS
Ë
°©us
;

99 *
	`R
(
n
, 
VIRTIO_MMIO_GUEST_PAGE_SIZE
Ë
PGSIZE
;

102 *
	`R
(
n
, 
VIRTIO_MMIO_QUEUE_SEL
) = 0;

103 
uöt32
 
max
 = *
	`R
(
n
, 
VIRTIO_MMIO_QUEUE_NUM_MAX
);

104 if(
max
 == 0)

105 
	`∑nic
("virtio disk hasÇo queue 0");

106 if(
max
 < 
NUM
)

107 
	`∑nic
("virtio disk max queueÅoo short");

108 *
	`R
(
n
, 
VIRTIO_MMIO_QUEUE_NUM
Ë
NUM
;

109 
	`mem£t
(
disk
[
n
].
∑ges
, 0, (disk[n].pages));

110 *
	`R
(
n
, 
VIRTIO_MMIO_QUEUE_PFN
Ë((
uöt64
)
disk
[n].
∑ges
Ë>> 
PGSHIFT
;

116 
disk
[
n
].
desc
 = (
VRögDesc
 *Ëdisk[n].
∑ges
;

117 
disk
[
n
].
avaû
 = (
uöt16
*)(((*)disk[n].
desc
Ë+ 
NUM
*(
VRögDesc
));

118 
disk
[
n
].
u£d
 = (
U£dAªa
 *Ë(disk[n].
∑ges
 + 
PGSIZE
);

120 
i
 = 0; i < 
NUM
; i++)

121 
disk
[
n
].
‰ì
[
i
] = 1;

123 
disk
[
n
].
öô
 = 1;

125 
	}
}

129 
	$Æloc_desc
(
n
)

131 
i
 = 0; i < 
NUM
; i++){

132 if(
disk
[
n
].
‰ì
[
i
]){

133 
disk
[
n
].
‰ì
[
i
] = 0;

134  
i
;

138 
	}
}

142 
	$‰ì_desc
(
n
, 
i
)

144 if(
i
 >
NUM
)

145 
	`∑nic
("virtio_disk_intr 1");

146 if(
disk
[
n
].
‰ì
[
i
])

147 
	`∑nic
("virtio_disk_intr 2");

148 
disk
[
n
].
desc
[
i
].
addr
 = 0;

149 
disk
[
n
].
‰ì
[
i
] = 1;

150 
	`wakeup
(&
disk
[
n
].
‰ì
[0]);

151 
	}
}

155 
	$‰ì_chaö
(
n
, 
i
)

158 
	`‰ì_desc
(
n
, 
i
);

159 if(
disk
[
n
].
desc
[
i
].
Êags
 & 
VRING_DESC_F_NEXT
)

160 
i
 = 
disk
[
n
].
desc
[i].
√xt
;

164 
	}
}

167 
	$Æloc3_desc
(
n
, *
idx
)

169 
i
 = 0; i < 3; i++){

170 
idx
[
i
] = 
	`Æloc_desc
(
n
);

171 if(
idx
[
i
] < 0){

172 
j
 = 0; j < 
i
; j++)

173 
	`‰ì_desc
(
n
, 
idx
[
j
]);

178 
	}
}

181 
	$vútio_disk_rw
(
n
, 
buf
 *
b
, 
wrôe
)

183 
uöt64
 
£˘‹
 = 
b
->
blockno
 * (
BSIZE
 / 512);

185 
	`acquúe
(&
disk
[
n
].
vdisk_lock
);

192 
idx
[3];

194 if(
	`Æloc3_desc
(
n
, 
idx
) == 0) {

197 
	`¶ìp
(&
disk
[
n
].
‰ì
[0], &disk[n].
vdisk_lock
);

203 
	svútio_blk_outhdr
 {

204 
uöt32
 
ty≥
;

205 
uöt32
 
ª£rved
;

206 
uöt64
 
£˘‹
;

207 } 
buf0
;

209 if(
wrôe
)

210 
buf0
.
ty≥
 = 
VIRTIO_BLK_T_OUT
;

212 
buf0
.
ty≥
 = 
VIRTIO_BLK_T_IN
;

213 
buf0
.
ª£rved
 = 0;

214 
buf0
.
£˘‹
 = sector;

218 
disk
[
n
].
desc
[
idx
[0]].
addr
 = (
uöt64
Ë
	`kvm∑
((uöt64Ë&
buf0
);

219 
disk
[
n
].
desc
[
idx
[0]].
Àn
 = (
buf0
);

220 
disk
[
n
].
desc
[
idx
[0]].
Êags
 = 
VRING_DESC_F_NEXT
;

221 
disk
[
n
].
desc
[
idx
[0]].
√xt
 = idx[1];

223 
disk
[
n
].
desc
[
idx
[1]].
addr
 = (
uöt64
Ë
b
->
d©a
;

224 
disk
[
n
].
desc
[
idx
[1]].
Àn
 = 
BSIZE
;

225 if(
wrôe
)

226 
disk
[
n
].
desc
[
idx
[1]].
Êags
 = 0;

228 
disk
[
n
].
desc
[
idx
[1]].
Êags
 = 
VRING_DESC_F_WRITE
;

229 
disk
[
n
].
desc
[
idx
[1]].
Êags
 |
VRING_DESC_F_NEXT
;

230 
disk
[
n
].
desc
[
idx
[1]].
√xt
 = idx[2];

232 
disk
[
n
].
öfo
[
idx
[0]].
°©us
 = 0;

233 
disk
[
n
].
desc
[
idx
[2]].
addr
 = (
uöt64
Ë&disk[n].
öfo
[idx[0]].
°©us
;

234 
disk
[
n
].
desc
[
idx
[2]].
Àn
 = 1;

235 
disk
[
n
].
desc
[
idx
[2]].
Êags
 = 
VRING_DESC_F_WRITE
;

236 
disk
[
n
].
desc
[
idx
[2]].
√xt
 = 0;

239 
b
->
disk
 = 1;

240 
disk
[
n
].
öfo
[
idx
[0]].
b
 = b;

246 
disk
[
n
].
avaû
[2 + (disk[n].avaû[1] % 
NUM
)] = 
idx
[0];

247 
	`__sync_synchr⁄ize
();

248 
disk
[
n
].
avaû
[1] = disk[n].avail[1] + 1;

250 *
	`R
(
n
, 
VIRTIO_MMIO_QUEUE_NOTIFY
) = 0;

253 
b
->
disk
 == 1) {

254 
	`¶ìp
(
b
, &
disk
[
n
].
vdisk_lock
);

257 
disk
[
n
].
öfo
[
idx
[0]].
b
 = 0;

258 
	`‰ì_chaö
(
n
, 
idx
[0]);

260 
	`ªÀa£
(&
disk
[
n
].
vdisk_lock
);

261 
	}
}

264 
	$vútio_disk_öå
(
n
)

266 
	`acquúe
(&
disk
[
n
].
vdisk_lock
);

268 (
disk
[
n
].
u£d_idx
 % 
NUM
Ë!(disk[n].
u£d
->
id
 % NUM)){

269 
id
 = 
disk
[
n
].
u£d
->
ñems
[disk[n].
u£d_idx
].id;

271 if(
disk
[
n
].
öfo
[
id
].
°©us
 != 0)

272 
	`∑nic
("virtio_disk_intr status");

274 
disk
[
n
].
öfo
[
id
].
b
->disk = 0;

275 
	`wakeup
(
disk
[
n
].
öfo
[
id
].
b
);

277 
disk
[
n
].
u£d_idx
 = (disk[n].u£d_idx + 1Ë% 
NUM
;

280 
	`ªÀa£
(&
disk
[
n
].
vdisk_lock
);

281 
	}
}

	@kernel/vm.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"memœyout.h
"

4 
	~"ñf.h
"

5 
	~"riscv.h
"

6 
	~"defs.h
"

7 
	~"fs.h
"

12 
∑gëabÀ_t
 
	gkî√l_∑gëabÀ
;

14 
ëext
[];

16 
åampﬁöe
[];

18 
¥öt
(
∑gëabÀ_t
);

26 
	$kvmöô
()

28 
kî√l_∑gëabÀ
 = (
∑gëabÀ_t
Ë
	`kÆloc
();

29 
	`mem£t
(
kî√l_∑gëabÀ
, 0, 
PGSIZE
);

32 
	`kvmm≠
(
UART0
, UART0, 
PGSIZE
, 
PTE_R
 | 
PTE_W
);

35 
	`kvmm≠
(
	`VIRTION
(0), VIRTION(0), 
PGSIZE
, 
PTE_R
 | 
PTE_W
);

38 
	`kvmm≠
(
	`VIRTION
(1), VIRTION(1), 
PGSIZE
, 
PTE_R
 | 
PTE_W
);

41 
	`kvmm≠
(0x30000000L, 0x30000000L, 0x10000000, 
PTE_R
 | 
PTE_W
);

44 
	`kvmm≠
(0x40000000L, 0x40000000L, 0x20000, 
PTE_R
 | 
PTE_W
);

47 
	`kvmm≠
(
CLINT
, CLINT, 0x10000, 
PTE_R
 | 
PTE_W
);

50 
	`kvmm≠
(
PLIC
, PLIC, 0x400000, 
PTE_R
 | 
PTE_W
);

53 
	`kvmm≠
(
KERNBASE
, KERNBASE, (
uöt64
)
ëext
-KERNBASE, 
PTE_R
 | 
PTE_X
);

56 
	`kvmm≠
((
uöt64
)
ëext
, (uöt64Îãxt, 
PHYSTOP
-(uöt64Îãxt, 
PTE_R
 | 
PTE_W
);

60 
	`kvmm≠
(
TRAMPOLINE
, (
uöt64
)
åampﬁöe
, 
PGSIZE
, 
PTE_R
 | 
PTE_X
);

61 
	}
}

66 
	$kvmöôh¨t
()

68 
	`w_ßç
(
	`MAKE_SATP
(
kî√l_∑gëabÀ
));

69 
	`s„n˚_vma
();

70 
	}
}

84 
±e_t
 *

85 
	$wÆk
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
va
, 
Æloc
)

87 if(
va
 >
MAXVA
)

88 
	`∑nic
("walk");

90 
Àvñ
 = 2;Üevel > 0;Üevel--) {

91 
±e_t
 *
±e
 = &
∑gëabÀ
[
	`PX
(
Àvñ
, 
va
)];

92 if(*
±e
 & 
PTE_V
) {

93 
∑gëabÀ
 = (
∑gëabÀ_t
)
	`PTE2PA
(*
±e
);

95 if(!
Æloc
 || (
∑gëabÀ
 = (
pde_t
*)
	`kÆloc
()) == 0)

97 
	`mem£t
(
∑gëabÀ
, 0, 
PGSIZE
);

98 *
±e
 = 
	`PA2PTE
(
∑gëabÀ
Ë| 
PTE_V
;

101  &
∑gëabÀ
[
	`PX
(0, 
va
)];

102 
	}
}

107 
uöt64


108 
	$wÆkaddr
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
va
)

110 
±e_t
 *
±e
;

111 
uöt64
 
∑
;

113 if(
va
 >
MAXVA
)

116 
±e
 = 
	`wÆk
(
∑gëabÀ
, 
va
, 0);

117 if(
±e
 == 0)

119 if((*
±e
 & 
PTE_V
) == 0)

121 if((*
±e
 & 
PTE_U
) == 0)

123 
∑
 = 
	`PTE2PA
(*
±e
);

124  
∑
;

125 
	}
}

131 
	$kvmm≠
(
uöt64
 
va
, uöt64 
∑
, uöt64 
sz
, 
≥rm
)

133 if(
	`m≠∑ges
(
kî√l_∑gëabÀ
, 
va
, 
sz
, 
∑
, 
≥rm
) != 0)

134 
	`∑nic
("kvmmap");

135 
	}
}

141 
uöt64


142 
	$kvm∑
(
uöt64
 
va
)

144 
uöt64
 
off
 = 
va
 % 
PGSIZE
;

145 
±e_t
 *
±e
;

146 
uöt64
 
∑
;

148 
±e
 = 
	`wÆk
(
kî√l_∑gëabÀ
, 
va
, 0);

149 if(
±e
 == 0)

150 
	`∑nic
("kvmpa");

151 if((*
±e
 & 
PTE_V
) == 0)

152 
	`∑nic
("kvmpa");

153 
∑
 = 
	`PTE2PA
(*
±e
);

154  
∑
+
off
;

155 
	}
}

162 
	$m≠∑ges
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
va
, uöt64 
size
, uöt64 
∑
, 
≥rm
)

164 
uöt64
 
a
, 
œ°
;

165 
±e_t
 *
±e
;

167 
a
 = 
	`PGROUNDDOWN
(
va
);

168 
œ°
 = 
	`PGROUNDDOWN
(
va
 + 
size
 - 1);

170 if((
±e
 = 
	`wÆk
(
∑gëabÀ
, 
a
, 1)) == 0)

172 if(*
±e
 & 
PTE_V
)

173 
	`∑nic
("remap");

174 *
±e
 = 
	`PA2PTE
(
∑
Ë| 
≥rm
 | 
PTE_V
;

175 if(
a
 =
œ°
)

177 
a
 +
PGSIZE
;

178 
∑
 +
PGSIZE
;

181 
	}
}

187 
	$uvmunm≠
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
va
, uöt64 
size
, 
do_‰ì
)

189 
uöt64
 
a
, 
œ°
;

190 
±e_t
 *
±e
;

191 
uöt64
 
∑
;

193 
a
 = 
	`PGROUNDDOWN
(
va
);

194 
œ°
 = 
	`PGROUNDDOWN
(
va
 + 
size
 - 1);

196 if((
±e
 = 
	`wÆk
(
∑gëabÀ
, 
a
, 0)) == 0)

197 
	`∑nic
("uvmunmap: walk");

198 if((*
±e
 & 
PTE_V
) == 0){

199 
	`¥ötf
("va=%∞±e=%p\n", 
a
, *
±e
);

200 
	`∑nic
("uvmunmap:Çot mapped");

202 if(
	`PTE_FLAGS
(*
±e
Ë=
PTE_V
)

203 
	`∑nic
("uvmunmap:ÇotáÜeaf");

204 if(
do_‰ì
){

205 
∑
 = 
	`PTE2PA
(*
±e
);

206 
	`k‰ì
((*)
∑
);

208 *
±e
 = 0;

209 if(
a
 =
œ°
)

211 
a
 +
PGSIZE
;

212 
∑
 +
PGSIZE
;

214 
	}
}

217 
∑gëabÀ_t


218 
	$uvm¸óã
()

220 
∑gëabÀ_t
 
∑gëabÀ
;

221 
∑gëabÀ
 = (
∑gëabÀ_t
Ë
	`kÆloc
();

222 if(
∑gëabÀ
 == 0)

223 
	`∑nic
("uvmcreate: out of memory");

224 
	`mem£t
(
∑gëabÀ
, 0, 
PGSIZE
);

225  
∑gëabÀ
;

226 
	}
}

232 
	$uvmöô
(
∑gëabÀ_t
 
∑gëabÀ
, 
uch¨
 *
§c
, 
uöt
 
sz
)

234 *
mem
;

236 if(
sz
 >
PGSIZE
)

237 
	`∑nic
("inituvm: moreÅhanáÖage");

238 
mem
 = 
	`kÆloc
();

239 
	`mem£t
(
mem
, 0, 
PGSIZE
);

240 
	`m≠∑ges
(
∑gëabÀ
, 0, 
PGSIZE
, (
uöt64
)
mem
, 
PTE_W
|
PTE_R
|
PTE_X
|
PTE_U
);

241 
	`memmove
(
mem
, 
§c
, 
sz
);

242 
	}
}

246 
uöt64


247 
	$uvmÆloc
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
ﬁdsz
, uöt64 
√wsz
)

249 *
mem
;

250 
uöt64
 
a
;

252 if(
√wsz
 < 
ﬁdsz
)

253  
ﬁdsz
;

255 
ﬁdsz
 = 
	`PGROUNDUP
(oldsz);

256 
a
 = 
ﬁdsz
;

257 ; 
a
 < 
√wsz
;á +
PGSIZE
){

258 
mem
 = 
	`kÆloc
();

259 if(
mem
 == 0){

260 
	`uvmdóŒoc
(
∑gëabÀ
, 
a
, 
ﬁdsz
);

263 
	`mem£t
(
mem
, 0, 
PGSIZE
);

264 if(
	`m≠∑ges
(
∑gëabÀ
, 
a
, 
PGSIZE
, (
uöt64
)
mem
, 
PTE_W
|
PTE_X
|
PTE_R
|
PTE_U
) != 0){

265 
	`k‰ì
(
mem
);

266 
	`uvmdóŒoc
(
∑gëabÀ
, 
a
, 
ﬁdsz
);

270  
√wsz
;

271 
	}
}

277 
uöt64


278 
	$uvmdóŒoc
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
ﬁdsz
, uöt64 
√wsz
)

280 if(
√wsz
 >
ﬁdsz
)

281  
ﬁdsz
;

283 
uöt64
 
√wup
 = 
	`PGROUNDUP
(
√wsz
);

284 if(
√wup
 < 
	`PGROUNDUP
(
ﬁdsz
))

285 
	`uvmunm≠
(
∑gëabÀ
, 
√wup
, 
ﬁdsz
 -Çewup, 1);

287  
√wsz
;

288 
	}
}

293 
	$‰ìwÆk
(
∑gëabÀ_t
 
∑gëabÀ
)

296 
i
 = 0; i < 512; i++){

297 
±e_t
 
±e
 = 
∑gëabÀ
[
i
];

298 if((
±e
 & 
PTE_V
Ë&& (±ê& (
PTE_R
|
PTE_W
|
PTE_X
)) == 0){

300 
uöt64
 
chûd
 = 
	`PTE2PA
(
±e
);

301 
	`‰ìwÆk
((
∑gëabÀ_t
)
chûd
);

302 
∑gëabÀ
[
i
] = 0;

303 } if(
±e
 & 
PTE_V
){

304 
	`∑nic
("freewalk:Üeaf");

307 
	`k‰ì
((*)
∑gëabÀ
);

308 
	}
}

313 
	$uvm‰ì
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
sz
)

315 
	`uvmunm≠
(
∑gëabÀ
, 0, 
sz
, 1);

316 
	`‰ìwÆk
(
∑gëabÀ
);

317 
	}
}

326 
	$uvmc›y
(
∑gëabÀ_t
 
ﬁd
,ÖagëabÀ_à
√w
, 
uöt64
 
sz
)

328 
±e_t
 *
±e
;

329 
uöt64
 
∑
, 
i
;

330 
uöt
 
Êags
;

331 *
mem
;

333 
i
 = 0; i < 
sz
; i +
PGSIZE
){

334 if((
±e
 = 
	`wÆk
(
ﬁd
, 
i
, 0)) == 0)

335 
	`∑nic
("uvmcopy:Öte shouldÉxist");

336 if((*
±e
 & 
PTE_V
) == 0)

337 
	`∑nic
("uvmcopy:ÖageÇotÖresent");

338 
∑
 = 
	`PTE2PA
(*
±e
);

339 
Êags
 = 
	`PTE_FLAGS
(*
±e
);

340 if((
mem
 = 
	`kÆloc
()) == 0)

341 
îr
;

342 
	`memmove
(
mem
, (*)
∑
, 
PGSIZE
);

343 if(
	`m≠∑ges
(
√w
, 
i
, 
PGSIZE
, (
uöt64
)
mem
, 
Êags
) != 0){

344 
	`k‰ì
(
mem
);

345 
îr
;

350 
îr
:

351 
	`uvmunm≠
(
√w
, 0, 
i
, 1);

353 
	}
}

358 
	$uvm˛ór
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
va
)

360 
±e_t
 *
±e
;

362 
±e
 = 
	`wÆk
(
∑gëabÀ
, 
va
, 0);

363 if(
±e
 == 0)

364 
	`∑nic
("uvmclear");

365 *
±e
 &~
PTE_U
;

366 
	}
}

372 
	$c›yout
(
∑gëabÀ_t
 
∑gëabÀ
, 
uöt64
 
d°va
, *
§c
, uöt64 
Àn
)

374 
uöt64
 
n
, 
va0
, 
∑0
;

376 
Àn
 > 0){

377 
va0
 = 
	`PGROUNDDOWN
(
d°va
);

378 
∑0
 = 
	`wÆkaddr
(
∑gëabÀ
, 
va0
);

379 if(
∑0
 == 0)

381 
n
 = 
PGSIZE
 - (
d°va
 - 
va0
);

382 if(
n
 > 
Àn
)

383 
n
 = 
Àn
;

384 
	`memmove
((*)(
∑0
 + (
d°va
 - 
va0
)), 
§c
, 
n
);

386 
Àn
 -
n
;

387 
§c
 +
n
;

388 
d°va
 = 
va0
 + 
PGSIZE
;

391 
	}
}

397 
	$c›yö
(
∑gëabÀ_t
 
∑gëabÀ
, *
d°
, 
uöt64
 
§cva
, uöt64 
Àn
)

399 
uöt64
 
n
, 
va0
, 
∑0
;

401 
Àn
 > 0){

402 
va0
 = 
	`PGROUNDDOWN
(
§cva
);

403 
∑0
 = 
	`wÆkaddr
(
∑gëabÀ
, 
va0
);

404 if(
∑0
 == 0)

406 
n
 = 
PGSIZE
 - (
§cva
 - 
va0
);

407 if(
n
 > 
Àn
)

408 
n
 = 
Àn
;

409 
	`memmove
(
d°
, (*)(
∑0
 + (
§cva
 - 
va0
)), 
n
);

411 
Àn
 -
n
;

412 
d°
 +
n
;

413 
§cva
 = 
va0
 + 
PGSIZE
;

416 
	}
}

423 
	$c›yö°r
(
∑gëabÀ_t
 
∑gëabÀ
, *
d°
, 
uöt64
 
§cva
, uöt64 
max
)

425 
uöt64
 
n
, 
va0
, 
∑0
;

426 
gŸ_nuŒ
 = 0;

428 
gŸ_nuŒ
 =0 && 
max
 > 0){

429 
va0
 = 
	`PGROUNDDOWN
(
§cva
);

430 
∑0
 = 
	`wÆkaddr
(
∑gëabÀ
, 
va0
);

431 if(
∑0
 == 0)

433 
n
 = 
PGSIZE
 - (
§cva
 - 
va0
);

434 if(
n
 > 
max
)

435 
n
 = 
max
;

437 *
p
 = (*Ë(
∑0
 + (
§cva
 - 
va0
));

438 
n
 > 0){

439 if(*
p
 == '\0'){

440 *
d°
 = '\0';

441 
gŸ_nuŒ
 = 1;

444 *
d°
 = *
p
;

446 --
n
;

447 --
max
;

448 
p
++;

449 
d°
++;

452 
§cva
 = 
va0
 + 
PGSIZE
;

454 if(
gŸ_nuŒ
){

459 
	}
}

	@mkfs/mkfs.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<as£π.h
>

8 
	#°©
 
xv6_°©


9 
	~"kî√l/ty≥s.h
"

	)

10 
	~"kî√l/fs.h
"

11 
	~"kî√l/°©.h
"

12 
	~"kî√l/∑øm.h
"

14 #i‚de‡
°©ic_as£π


15 
	#°©ic_as£π
(
a
, 
b
Ëdÿ{ 0Ë0: ◊): ; } 0)

	)

18 
	#NINODES
 200

	)

23 
	gnbôm≠
 = 
FSSIZE
/(
BSIZE
*8) + 1;

24 
	gnöodeblocks
 = 
NINODES
 / 
IPB
 + 1;

25 
	g∆og
 = 
LOGSIZE
;

26 
	gnmëa
;

27 
	gnblocks
;

29 
	gfsfd
;

30 
su≥rblock
 
	gsb
;

31 
	gzî€s
[
BSIZE
];

32 
uöt
 
	g‰ìöode
 = 1;

33 
uöt
 
	g‰ìblock
;

36 
bÆloc
();

37 
w£˘
(
uöt
, *);

38 
wöode
(
uöt
, 
döode
*);

39 
röode
(
uöt
 
öum
, 
döode
 *
ù
);

40 
r£˘
(
uöt
 
£c
, *
buf
);

41 
uöt
 
üŒoc
(
ush‹t
 
ty≥
);

42 
üµíd
(
uöt
 
öum
, *
p
, 
n
);

45 
ush‹t


46 
	$xsh‹t
(
ush‹t
 
x
)

48 
ush‹t
 
y
;

49 
uch¨
 *
a
 = (uch¨*)&
y
;

50 
a
[0] = 
x
;

51 
a
[1] = 
x
 >> 8;

52  
y
;

53 
	}
}

55 
uöt


56 
	$xöt
(
uöt
 
x
)

58 
uöt
 
y
;

59 
uch¨
 *
a
 = (uch¨*)&
y
;

60 
a
[0] = 
x
;

61 
a
[1] = 
x
 >> 8;

62 
a
[2] = 
x
 >> 16;

63 
a
[3] = 
x
 >> 24;

64  
y
;

65 
	}
}

68 
	$maö
(
¨gc
, *
¨gv
[])

70 
i
, 
cc
, 
fd
;

71 
uöt
 
roŸöo
, 
öum
, 
off
;

72 
dúít
 
de
;

73 
buf
[
BSIZE
];

74 
döode
 
dö
;

77 
	`°©ic_as£π
(() == 4, "Integers must be 4 bytes!");

79 if(
¨gc
 < 2){

80 
	`Ârötf
(
°dîr
, "Usage: mkfs fs.img files...\n");

81 
	`exô
(1);

84 
	`as£π
((
BSIZE
 % (
döode
)) == 0);

85 
	`as£π
((
BSIZE
 % (
dúít
)) == 0);

87 
fsfd
 = 
	`›í
(
¨gv
[1], 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0666);

88 if(
fsfd
 < 0){

89 
	`≥º‹
(
¨gv
[1]);

90 
	`exô
(1);

94 
nmëa
 = 2 + 
∆og
 + 
nöodeblocks
 + 
nbôm≠
;

95 
nblocks
 = 
FSSIZE
 - 
nmëa
;

97 
sb
.
magic
 = 
FSMAGIC
;

98 
sb
.
size
 = 
	`xöt
(
FSSIZE
);

99 
sb
.
nblocks
 = 
	`xöt
(nblocks);

100 
sb
.
nöodes
 = 
	`xöt
(
NINODES
);

101 
sb
.
∆og
 = 
	`xöt
(nlog);

102 
sb
.
log°¨t
 = 
	`xöt
(2);

103 
sb
.
öode°¨t
 = 
	`xöt
(2+
∆og
);

104 
sb
.
bm≠°¨t
 = 
	`xöt
(2+
∆og
+
nöodeblocks
);

106 
	`¥ötf
("nmeta %d (boot, super,Üog blocks %u inode blocks %u, bitmap blocks %u) blocks %dÅotal %d\n",

107 
nmëa
, 
∆og
, 
nöodeblocks
, 
nbôm≠
, 
nblocks
, 
FSSIZE
);

109 
‰ìblock
 = 
nmëa
;

111 
i
 = 0; i < 
FSSIZE
; i++)

112 
	`w£˘
(
i
, 
zî€s
);

114 
	`mem£t
(
buf
, 0, (buf));

115 
	`memmove
(
buf
, &
sb
, (sb));

116 
	`w£˘
(1, 
buf
);

118 
roŸöo
 = 
	`üŒoc
(
T_DIR
);

119 
	`as£π
(
roŸöo
 =
ROOTINO
);

121 
	`bzîo
(&
de
, (de));

122 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

123 
	`°r˝y
(
de
.
«me
, ".");

124 
	`üµíd
(
roŸöo
, &
de
, (de));

126 
	`bzîo
(&
de
, (de));

127 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

128 
	`°r˝y
(
de
.
«me
, "..");

129 
	`üµíd
(
roŸöo
, &
de
, (de));

131 
i
 = 2; i < 
¨gc
; i++){

133 *
sh‹äame
;

134 if(
	`°∫cmp
(
¨gv
[
i
], "user/", 5) == 0)

135 
sh‹äame
 = 
¨gv
[
i
] + 5;

137 
sh‹äame
 = 
¨gv
[
i
];

139 
	`as£π
(
	`ödex
(
sh‹äame
, '/') == 0);

141 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

142 
	`≥º‹
(
¨gv
[
i
]);

143 
	`exô
(1);

150 if(
sh‹äame
[0] == '_')

151 
sh‹äame
 += 1;

153 
öum
 = 
	`üŒoc
(
T_FILE
);

155 
	`bzîo
(&
de
, (de));

156 
de
.
öum
 = 
	`xsh‹t
(inum);

157 
	`°∫˝y
(
de
.
«me
, 
sh‹äame
, 
DIRSIZ
);

158 
	`üµíd
(
roŸöo
, &
de
, (de));

160 (
cc
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

161 
	`üµíd
(
öum
, 
buf
, 
cc
);

163 
	`˛o£
(
fd
);

167 
	`röode
(
roŸöo
, &
dö
);

168 
off
 = 
	`xöt
(
dö
.
size
);

169 
off
 = ((off/
BSIZE
) + 1) * BSIZE;

170 
dö
.
size
 = 
	`xöt
(
off
);

171 
	`wöode
(
roŸöo
, &
dö
);

173 
	`bÆloc
(
‰ìblock
);

175 
	`exô
(0);

176 
	}
}

179 
	$w£˘
(
uöt
 
£c
, *
buf
)

181 if(
	`l£ek
(
fsfd
, 
£c
 * 
BSIZE
, 0) != sec * BSIZE){

182 
	`≥º‹
("lseek");

183 
	`exô
(1);

185 if(
	`wrôe
(
fsfd
, 
buf
, 
BSIZE
) != BSIZE){

186 
	`≥º‹
("write");

187 
	`exô
(1);

189 
	}
}

192 
	$wöode
(
uöt
 
öum
, 
döode
 *
ù
)

194 
buf
[
BSIZE
];

195 
uöt
 
bn
;

196 
döode
 *
dù
;

198 
bn
 = 
	`IBLOCK
(
öum
, 
sb
);

199 
	`r£˘
(
bn
, 
buf
);

200 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

201 *
dù
 = *
ù
;

202 
	`w£˘
(
bn
, 
buf
);

203 
	}
}

206 
	$röode
(
uöt
 
öum
, 
döode
 *
ù
)

208 
buf
[
BSIZE
];

209 
uöt
 
bn
;

210 
döode
 *
dù
;

212 
bn
 = 
	`IBLOCK
(
öum
, 
sb
);

213 
	`r£˘
(
bn
, 
buf
);

214 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

215 *
ù
 = *
dù
;

216 
	}
}

219 
	$r£˘
(
uöt
 
£c
, *
buf
)

221 if(
	`l£ek
(
fsfd
, 
£c
 * 
BSIZE
, 0) != sec * BSIZE){

222 
	`≥º‹
("lseek");

223 
	`exô
(1);

225 if(
	`ªad
(
fsfd
, 
buf
, 
BSIZE
) != BSIZE){

226 
	`≥º‹
("read");

227 
	`exô
(1);

229 
	}
}

231 
uöt


232 
	$üŒoc
(
ush‹t
 
ty≥
)

234 
uöt
 
öum
 = 
‰ìöode
++;

235 
döode
 
dö
;

237 
	`bzîo
(&
dö
, (din));

238 
dö
.
ty≥
 = 
	`xsh‹t
(type);

239 
dö
.
∆ök
 = 
	`xsh‹t
(1);

240 
dö
.
size
 = 
	`xöt
(0);

241 
	`wöode
(
öum
, &
dö
);

242  
öum
;

243 
	}
}

246 
	$bÆloc
(
u£d
)

248 
uch¨
 
buf
[
BSIZE
];

249 
i
;

251 
	`¥ötf
("bÆloc: fú° %d block†havêbì¿Æloˇãd\n", 
u£d
);

252 
	`as£π
(
u£d
 < 
BSIZE
*8);

253 
	`bzîo
(
buf
, 
BSIZE
);

254 
i
 = 0; i < 
u£d
; i++){

255 
buf
[
i
/8] = buf[i/8] | (0x1 << (i%8));

257 
	`¥ötf
("bÆloc: wrôêbôm≠ blockáà£˘‹ %d\n", 
sb
.
bm≠°¨t
);

258 
	`w£˘
(
sb
.
bm≠°¨t
, 
buf
);

259 
	}
}

261 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

264 
	$üµíd
(
uöt
 
öum
, *
xp
, 
n
)

266 *
p
 = (*)
xp
;

267 
uöt
 
fbn
, 
off
, 
n1
;

268 
döode
 
dö
;

269 
buf
[
BSIZE
];

270 
uöt
 
ödúe˘
[
NINDIRECT
];

271 
uöt
 
x
;

273 
	`röode
(
öum
, &
dö
);

274 
off
 = 
	`xöt
(
dö
.
size
);

276 
n
 > 0){

277 
fbn
 = 
off
 / 
BSIZE
;

278 
	`as£π
(
fbn
 < 
MAXFILE
);

279 if(
fbn
 < 
NDIRECT
){

280 if(
	`xöt
(
dö
.
addrs
[
fbn
]) == 0){

281 
dö
.
addrs
[
fbn
] = 
	`xöt
(
‰ìblock
++);

283 
x
 = 
	`xöt
(
dö
.
addrs
[
fbn
]);

285 if(
	`xöt
(
dö
.
addrs
[
NDIRECT
]) == 0){

286 
dö
.
addrs
[
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

288 
	`r£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

289 if(
ödúe˘
[
fbn
 - 
NDIRECT
] == 0){

290 
ödúe˘
[
fbn
 - 
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

291 
	`w£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

293 
x
 = 
	`xöt
(
ödúe˘
[
fbn
-
NDIRECT
]);

295 
n1
 = 
	`mö
(
n
, (
fbn
 + 1Ë* 
BSIZE
 - 
off
);

296 
	`r£˘
(
x
, 
buf
);

297 
	`bc›y
(
p
, 
buf
 + 
off
 - (
fbn
 * 
BSIZE
), 
n1
);

298 
	`w£˘
(
x
, 
buf
);

299 
n
 -
n1
;

300 
off
 +
n1
;

301 
p
 +
n1
;

303 
dö
.
size
 = 
	`xöt
(
off
);

304 
	`wöode
(
öum
, &
dö
);

305 
	}
}

	@user/alarmtest.c

9 
	~"kî√l/∑øm.h
"

10 
	~"kî√l/ty≥s.h
"

11 
	~"kî√l/°©.h
"

12 
	~"kî√l/riscv.h
"

13 
	~"u£r/u£r.h
"

15 
ã°0
();

16 
ã°1
();

17 
ã°2
();

18 
≥riodic
();

19 
¶ow_h™dÀr
();

22 
	$maö
(
¨gc
, *
¨gv
[])

24 
	`ã°0
();

25 
	`ã°1
();

26 
	`ã°2
();

27 
	`exô
(0);

28 
	}
}

30 vﬁ©ûê
	gcou¡
;

33 
	$≥riodic
()

35 
cou¡
 = count + 1;

36 
	`¥ötf
("alarm!\n");

37 
	`sigªtu∫
();

38 
	}
}

43 
	$ã°0
()

45 
i
;

46 
	`¥ötf
("test0 start\n");

47 
cou¡
 = 0;

48 
	`sigÆ¨m
(2, 
≥riodic
);

49 
i
 = 0; i < 1000*500000; i++){

50 if((
i
 % 1000000) == 0)

51 
	`wrôe
(2, ".", 1);

52 if(
cou¡
 > 0)

55 
	`sigÆ¨m
(0, 0);

56 if(
cou¡
 > 0){

57 
	`¥ötf
("test0Öassed\n");

59 
	`¥ötf
("\ntest0 failed:Åhe kernelÇever calledÅheálarm handler\n");

61 
	}
}

63 
__©åibuã__
 ((
noölöe
)Ë
	$foo
(
i
, *
j
) {

64 if((
i
 % 2500000) == 0) {

65 
	`wrôe
(2, ".", 1);

67 *
j
 += 1;

68 
	}
}

79 
	$ã°1
()

81 
i
;

82 
j
;

84 
	`¥ötf
("test1 start\n");

85 
cou¡
 = 0;

86 
j
 = 0;

87 
	`sigÆ¨m
(2, 
≥riodic
);

88 
i
 = 0; i < 500000000; i++){

89 if(
cou¡
 >= 10)

91 
	`foo
(
i
, &
j
);

93 if(
cou¡
 < 10){

94 
	`¥ötf
("\ntest1 failed:Åoo few callsÅoÅhe handler\n");

95 } if(
i
 !
j
){

103 
	`¥ötf
("\ntest1 failed: foo()Éxecuted fewerÅimesÅhan it was called\n");

105 
	`¥ötf
("test1Öassed\n");

107 
	}
}

112 
	$ã°2
()

114 
i
;

115 
pid
;

116 
°©us
;

118 
	`¥ötf
("test2 start\n");

119 i‡((
pid
 = 
	`f‹k
()) < 0) {

120 
	`¥ötf
("test2: fork failed\n");

122 i‡(
pid
 == 0) {

123 
cou¡
 = 0;

124 
	`sigÆ¨m
(2, 
¶ow_h™dÀr
);

125 
i
 = 0; i < 1000*500000; i++){

126 if((
i
 % 1000000) == 0)

127 
	`wrôe
(2, ".", 1);

128 if(
cou¡
 > 0)

131 i‡(
cou¡
 == 0) {

132 
	`¥ötf
("\ntest2 failed:álarmÇot called\n");

133 
	`exô
(1);

135 
	`exô
(0);

137 
	`waô
(&
°©us
);

138 i‡(
°©us
 == 0) {

139 
	`¥ötf
("test2Öassed\n");

141 
	}
}

144 
	$¶ow_h™dÀr
()

146 
cou¡
++;

147 
	`¥ötf
("alarm!\n");

148 i‡(
cou¡
 > 1) {

149 
	`¥ötf
("test2 failed:álarm handler called moreÅhan once\n");

150 
	`exô
(1);

152 
i
 = 0; i < 1000*500000; i++) {

153 
asm
 volatile("nop");

155 
	`sigÆ¨m
(0, 0);

156 
	`sigªtu∫
();

157 
	}
}

	@user/alloctest.c

1 
	~"kî√l/∑øm.h
"

2 
	~"kî√l/ty≥s.h
"

3 
	~"kî√l/°©.h
"

4 
	~"kî√l/riscv.h
"

5 
	~"kî√l/f˙é.h
"

6 
	~"kî√l/memœyout.h
"

7 
	~"u£r/u£r.h
"

10 
	$ã°0
() {

11 íum { 
NCHILD
 = 50, 
NFD
 = 10};

12 
i
, 
j
;

13 
fd
;

15 
	`¥ötf
("filetest: start\n");

17 if(
NCHILD
*
NFD
 < 
NFILE
) {

18 
	`¥ötf
("test setup is wrong\n");

19 
	`exô
(1);

22 
i
 = 0; i < 
NCHILD
; i++) {

23 
pid
 = 
	`f‹k
();

24 if(
pid
 < 0){

25 
	`¥ötf
("fork failed");

26 
	`exô
(1);

28 if(
pid
 == 0){

29 
j
 = 0; j < 
NFD
; j++) {

30 i‡((
fd
 = 
	`›í
("README", 
O_RDONLY
)) < 0) {

32 
	`exô
(1);

35 
	`¶ìp
(10);

36 
	`exô
(0);

40 
Æl_ok
 = 1;

41 
i
 = 0; i < 
NCHILD
; i++){

42 
x°©us
;

43 
	`waô
(&
x°©us
);

44 if(
x°©us
 != 0) {

45 if(
Æl_ok
 == 1)

46 
	`¥ötf
("filetest: FAILED\n");

47 
Æl_ok
 = 0;

51 if(
Æl_ok
)

52 
	`¥ötf
("filetest: OK\n");

53 
	}
}

56 
	$ã°1
()

58 *
a
;

59 
tŸ
 = 0;

60 
buf
[1];

61 
fds
[2];

63 
	`¥ötf
("memtest: start\n");

64 if(
	`pùe
(
fds
) != 0){

65 
	`¥ötf
("pipe() failed\n");

66 
	`exô
(1);

68 
pid
 = 
	`f‹k
();

69 if(
pid
 < 0){

70 
	`¥ötf
("fork failed");

71 
	`exô
(1);

73 if(
pid
 == 0){

74 
	`˛o£
(
fds
[0]);

76 
a
 = 
	`sbrk
(
PGSIZE
);

77 i‡(
a
 == (*)0xffffffffffffffffL)

78 
	`exô
(0);

79 *(*)(
a
+4) = 1;

80 i‡(
	`wrôe
(
fds
[1], "x", 1) != 1) {

81 
	`¥ötf
("write failed");

82 
	`exô
(1);

85 
	`exô
(0);

87 
	`˛o£
(
fds
[1]);

89 i‡(
	`ªad
(
fds
[0], 
buf
, 1) != 1) {

92 
tŸ
 += 1;

97 if(
tŸ
 < 31950) {

98 
	`¥ötf
("ex≥˘edÅÿÆloˇãáàÀa° 31950, o∆y gŸ %d\n", 
tŸ
);

99 
	`¥ötf
("memtest: FAILED\n");

101 
	`¥ötf
("memtest: OK\n");

103 
	}
}

106 
	$maö
(
¨gc
, *
¨gv
[])

108 
	`ã°0
();

109 
	`ã°1
();

110 
	`exô
(0);

111 
	}
}

	@user/bcachetest.c

1 
	~"kî√l/f˙é.h
"

2 
	~"kî√l/∑øm.h
"

3 
	~"kî√l/ty≥s.h
"

4 
	~"kî√l/°©.h
"

5 
	~"kî√l/riscv.h
"

6 
	~"kî√l/fs.h
"

7 
	~"u£r/u£r.h
"

9 
ã°0
();

10 
ã°1
();

13 
	$maö
(
¨gc
, *
¨gv
[])

15 
	`ã°0
();

16 
	`ã°1
();

17 
	`exô
(0);

18 
	}
}

21 
	$¸óãfûe
(*
fûe
, 
nblock
)

23 
fd
;

24 
buf
[
BSIZE
];

25 
i
;

27 
fd
 = 
	`›í
(
fûe
, 
O_CREATE
 | 
O_RDWR
);

28 if(
fd
 < 0){

29 
	`¥ötf
("ã°0 cª©ê%†Áûed\n", 
fûe
);

30 
	`exô
(-1);

32 
i
 = 0; i < 
nblock
; i++) {

33 if(
	`wrôe
(
fd
, 
buf
, (buf)) != (buf)) {

34 
	`¥ötf
("wrôê%†Áûed\n", 
fûe
);

35 
	`exô
(-1);

38 
	`˛o£
(
fd
);

39 
	}
}

42 
	$ªadfûe
(*
fûe
, 
nbyãs
, 
öc
)

44 
buf
[
BSIZE
];

45 
fd
;

46 
i
;

48 if(
öc
 > 
BSIZE
) {

49 
	`¥ötf
("test0: incÅooÜarge\n");

50 
	`exô
(-1);

52 i‡((
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
)) < 0) {

53 
	`¥ötf
("ã°0 o≥¿%†Áûed\n", 
fûe
);

54 
	`exô
(-1);

56 
i
 = 0; i < 
nbyãs
; i +
öc
) {

57 if(
	`ªad
(
fd
, 
buf
, 
öc
) != inc) {

58 
	`¥ötf
("ªad %†Áûed f‹ block %d (%d)\n", 
fûe
, 
i
, 
nbyãs
);

59 
	`exô
(-1);

62 
	`˛o£
(
fd
);

63 
	}
}

66 
	$ã°0
()

68 
fûe
[2];

69 
dú
[2];

70 íum { 
N
 = 10, 
NCHILD
 = 3 };

71 
n
;

73 
dú
[0] = '0';

74 
dú
[1] = '\0';

75 
fûe
[0] = 'F';

76 
fûe
[1] = '\0';

78 
	`¥ötf
("startÅest0\n");

79 
i
 = 0; i < 
NCHILD
; i++){

80 
dú
[0] = '0' + 
i
;

81 
	`mkdú
(
dú
);

82 i‡(
	`chdú
(
dú
) < 0) {

83 
	`¥ötf
("chdir failed\n");

84 
	`exô
(1);

86 
	`u∆ök
(
fûe
);

87 
	`¸óãfûe
(
fûe
, 
N
);

88 i‡(
	`chdú
("..") < 0) {

89 
	`¥ötf
("chdir failed\n");

90 
	`exô
(1);

93 
	`¡as
(0);

94 
i
 = 0; i < 
NCHILD
; i++){

95 
dú
[0] = '0' + 
i
;

96 
pid
 = 
	`f‹k
();

97 if(
pid
 < 0){

98 
	`¥ötf
("fork failed");

99 
	`exô
(-1);

101 if(
pid
 == 0){

102 i‡(
	`chdú
(
dú
) < 0) {

103 
	`¥ötf
("chdir failed\n");

104 
	`exô
(1);

107 
	`ªadfûe
(
fûe
, 
N
*
BSIZE
, 1);

109 
	`exô
(0);

113 
i
 = 0; i < 
NCHILD
; i++){

114 
	`waô
(0);

116 
	`¥ötf
("test0Ñesults:\n");

117 
n
 = 
	`¡as
(1);

118 i‡(
n
 < 500)

119 
	`¥ötf
("test0: OK\n");

121 
	`¥ötf
("test0: FAIL\n");

122 
	}
}

124 
	$ã°1
()

126 
fûe
[3];

127 íum { 
N
 = 100, 
BIG
=100, 
NCHILD
=2 };

129 
	`¥ötf
("startÅest1\n");

130 
fûe
[0] = 'B';

131 
fûe
[2] = '\0';

132 
i
 = 0; i < 
NCHILD
; i++){

133 
fûe
[1] = '0' + 
i
;

134 
	`u∆ök
(
fûe
);

135 i‡(
i
 == 0) {

136 
	`¸óãfûe
(
fûe
, 
BIG
);

138 
	`¸óãfûe
(
fûe
, 1);

141 
i
 = 0; i < 
NCHILD
; i++){

142 
fûe
[1] = '0' + 
i
;

143 
pid
 = 
	`f‹k
();

144 if(
pid
 < 0){

145 
	`¥ötf
("fork failed");

146 
	`exô
(-1);

148 if(
pid
 == 0){

149 i‡(
i
==0) {

150 
i
 = 0; i < 
N
; i++) {

151 
	`ªadfûe
(
fûe
, 
BIG
*
BSIZE
, BSIZE);

153 
	`u∆ök
(
fûe
);

154 
	`exô
(0);

156 
i
 = 0; i < 
N
; i++) {

157 
	`ªadfûe
(
fûe
, 1, 
BSIZE
);

159 
	`u∆ök
(
fûe
);

161 
	`exô
(0);

165 
i
 = 0; i < 
NCHILD
; i++){

166 
	`waô
(0);

168 
	`¥ötf
("test1 OK\n");

169 
	}
}

	@user/bigfile.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

4 
	~"kî√l/f˙é.h
"

5 
	~"kî√l/fs.h
"

8 
	$maö
()

10 
buf
[
BSIZE
];

11 
fd
, 
i
, 
blocks
;

13 
fd
 = 
	`›í
("big.fûe", 
O_CREATE
 | 
O_WRONLY
);

14 if(
fd
 < 0){

15 
	`¥ötf
("bigfile: cannot open big.file for writing\n");

16 
	`exô
(-1);

19 
blocks
 = 0;

21 *(*)
buf
 = 
blocks
;

22 
cc
 = 
	`wrôe
(
fd
, 
buf
, (buf));

23 if(
cc
 <= 0)

25 
blocks
++;

26 i‡(
blocks
 % 100 == 0)

27 
	`¥ötf
(".");

30 
	`¥ötf
("\nwrŸê%d blocks\n", 
blocks
);

31 if(
blocks
 != 65803) {

32 
	`¥ötf
("bigfile: file isÅoo small\n");

33 
	`exô
(-1);

36 
	`˛o£
(
fd
);

37 
fd
 = 
	`›í
("big.fûe", 
O_RDONLY
);

38 if(
fd
 < 0){

39 
	`¥ötf
("bigfile: cannotÑe-open big.file forÑeading\n");

40 
	`exô
(-1);

42 
i
 = 0; i < 
blocks
; i++){

43 
cc
 = 
	`ªad
(
fd
, 
buf
, (buf));

44 if(
cc
 <= 0){

45 
	`¥ötf
("bigfûe:ÑódÉº‹áàblock %d\n", 
i
);

46 
	`exô
(-1);

48 if(*(*)
buf
 !
i
){

49 
	`¥ötf
("bigfile:ÑeadÅhe wrong data (%d) for block %d\n",

50 *(*)
buf
, 
i
);

51 
	`exô
(-1);

55 
	`¥ötf
("bigfile done; ok\n");

57 
	`exô
(0);

58 
	}
}

	@user/call.c

1 
	~"kî√l/∑øm.h
"

2 
	~"kî√l/ty≥s.h
"

3 
	~"kî√l/°©.h
"

4 
	~"u£r/u£r.h
"

6 
	$g
(
x
) {

7  
x
+3;

8 
	}
}

10 
	$f
(
x
) {

11  
	`g
(
x
);

12 
	}
}

14 
	$maö
() {

15 
	`¥ötf
("%d %d\n", 
	`f
(8)+1, 13);

16 
	`exô
(0);

17 
	}
}

	@user/cat.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

5 
	gbuf
[512];

8 
	$ˇt
(
fd
)

10 
n
;

12 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0) {

13 i‡(
	`wrôe
(1, 
buf
, 
n
) !=Ç) {

14 
	`¥ötf
("cat: writeÉrror\n");

15 
	`exô
(1);

18 if(
n
 < 0){

19 
	`¥ötf
("cat:ÑeadÉrror\n");

20 
	`exô
(1);

22 
	}
}

25 
	$maö
(
¨gc
, *
¨gv
[])

27 
fd
, 
i
;

29 if(
¨gc
 <= 1){

30 
	`ˇt
(0);

31 
	`exô
(1);

34 
i
 = 1; i < 
¨gc
; i++){

35 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

36 
	`¥ötf
("ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

37 
	`exô
(1);

39 
	`ˇt
(
fd
);

40 
	`˛o£
(
fd
);

42 
	`exô
(0);

43 
	}
}

	@user/cowtest.c

5 
	~"kî√l/ty≥s.h
"

6 
	~"kî√l/memœyout.h
"

7 
	~"u£r/u£r.h
"

13 
	$sim∂ëe°
()

15 
uöt64
 
phys_size
 = 
PHYSTOP
 - 
KERNBASE
;

16 
sz
 = (
phys_size
 / 3) * 2;

18 
	`¥ötf
("simple: ");

20 *
p
 = 
	`sbrk
(
sz
);

21 if(
p
 == (*)0xffffffffffffffffL){

22 
	`¥ötf
("sbrk(%dËÁûed\n", 
sz
);

23 
	`exô
(-1);

26 *
q
 = 
p
; q <Ö + 
sz
; q += 4096){

27 *(*)
q
 = 
	`gëpid
();

30 
pid
 = 
	`f‹k
();

31 if(
pid
 < 0){

32 
	`¥ötf
("fork() failed\n");

33 
	`exô
(-1);

36 if(
pid
 == 0)

37 
	`exô
(0);

39 
	`waô
(0);

41 if(
	`sbrk
(-
sz
) == (*)0xffffffffffffffffL){

42 
	`¥ötf
("sbrk(-%dËÁûed\n", 
sz
);

43 
	`exô
(-1);

46 
	`¥ötf
("ok\n");

47 
	}
}

54 
	$thªëe°
()

56 
uöt64
 
phys_size
 = 
PHYSTOP
 - 
KERNBASE
;

57 
sz
 = 
phys_size
 / 4;

58 
pid1
, 
pid2
;

60 
	`¥ötf
("three: ");

62 *
p
 = 
	`sbrk
(
sz
);

63 if(
p
 == (*)0xffffffffffffffffL){

64 
	`¥ötf
("sbrk(%dËÁûed\n", 
sz
);

65 
	`exô
(-1);

68 
pid1
 = 
	`f‹k
();

69 if(
pid1
 < 0){

70 
	`¥ötf
("fork failed\n");

71 
	`exô
(-1);

73 if(
pid1
 == 0){

74 
pid2
 = 
	`f‹k
();

75 if(
pid2
 < 0){

76 
	`¥ötf
("fork failed");

77 
	`exô
(-1);

79 if(
pid2
 == 0){

80 *
q
 = 
p
; q <Ö + (
sz
/5)*4; q += 4096){

81 *(*)
q
 = 
	`gëpid
();

83 *
q
 = 
p
; q <Ö + (
sz
/5)*4; q += 4096){

84 if(*(*)
q
 !
	`gëpid
()){

85 
	`¥ötf
("wrong content\n");

86 
	`exô
(-1);

89 
	`exô
(-1);

91 *
q
 = 
p
; q <Ö + (
sz
/2); q += 4096){

92 *(*)
q
 = 9999;

94 
	`exô
(0);

97 *
q
 = 
p
; q <Ö + 
sz
; q += 4096){

98 *(*)
q
 = 
	`gëpid
();

101 
	`waô
(0);

103 
	`¶ìp
(1);

105 *
q
 = 
p
; q <Ö + 
sz
; q += 4096){

106 if(*(*)
q
 !
	`gëpid
()){

107 
	`¥ötf
("wrong content\n");

108 
	`exô
(-1);

112 if(
	`sbrk
(-
sz
) == (*)0xffffffffffffffffL){

113 
	`¥ötf
("sbrk(-%dËÁûed\n", 
sz
);

114 
	`exô
(-1);

117 
	`¥ötf
("ok\n");

118 
	}
}

120 
	gjunk1
[4096];

121 
	gfds
[2];

122 
	gjunk2
[4096];

123 
	gbuf
[4096];

124 
	gjunk3
[4096];

128 
	$fûëe°
()

130 
	`¥ötf
("file: ");

132 
buf
[0] = 99;

134 
i
 = 0; i < 4; i++){

135 if(
	`pùe
(
fds
) != 0){

136 
	`¥ötf
("pipe() failed\n");

137 
	`exô
(-1);

139 
pid
 = 
	`f‹k
();

140 if(
pid
 < 0){

141 
	`¥ötf
("fork failed\n");

142 
	`exô
(-1);

144 if(
pid
 == 0){

145 
	`¶ìp
(1);

146 if(
	`ªad
(
fds
[0], 
buf
, (
i
)) != (i)){

147 
	`¥ötf
("error:Ñead failed\n");

148 
	`exô
(1);

150 
	`¶ìp
(1);

151 
j
 = *(*)
buf
;

152 if(
j
 !
i
){

153 
	`¥ötf
("error:ÑeadÅhe wrong value\n");

154 
	`exô
(1);

156 
	`exô
(0);

158 if(
	`wrôe
(
fds
[1], &
i
, (i)) != (i)){

159 
	`¥ötf
("error: write failed\n");

160 
	`exô
(-1);

164 
x°©us
 = 0;

165 
i
 = 0; i < 4; i++) {

166 
	`waô
(&
x°©us
);

167 if(
x°©us
 != 0) {

168 
	`exô
(1);

172 if(
buf
[0] != 99){

173 
	`¥ötf
("error: child overwroteÖarent\n");

174 
	`exô
(1);

177 
	`¥ötf
("ok\n");

178 
	}
}

181 
	$maö
(
¨gc
, *
¨gv
[])

183 
	`sim∂ëe°
();

186 
	`sim∂ëe°
();

188 
	`thªëe°
();

189 
	`thªëe°
();

190 
	`thªëe°
();

192 
	`fûëe°
();

194 
	`¥ötf
("ALL COW TESTS PASSED\n");

196 
	`exô
(0);

197 
	}
}

	@user/echo.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 
i
 = 1; i < 
¨gc
; i++){

11 
	`wrôe
(1, 
¨gv
[
i
], 
	`°æí
(argv[i]));

12 if(
i
 + 1 < 
¨gc
){

13 
	`wrôe
(1, " ", 1);

15 
	`wrôe
(1, "\n", 1);

18 
	`exô
(0);

19 
	}
}

	@user/forktest.c

4 
	~"kî√l/ty≥s.h
"

5 
	~"kî√l/°©.h
"

6 
	~"u£r/u£r.h
"

8 
	#N
 1000

	)

11 
	$¥öt
(c⁄° *
s
)

13 
	`wrôe
(1, 
s
, 
	`°æí
(s));

14 
	}
}

17 
	$f‹kã°
()

19 
n
, 
pid
;

21 
	`¥öt
("forkÅest\n");

23 
n
=0;Ç<
N
;Ç++){

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0)

27 if(
pid
 == 0)

28 
	`exô
(0);

31 if(
n
 =
N
){

32 
	`¥öt
("fork claimedÅo work NÅimes!\n");

33 
	`exô
(1);

36 ; 
n
 > 0;Ç--){

37 if(
	`waô
(0) < 0){

38 
	`¥öt
("wait stoppedÉarly\n");

39 
	`exô
(1);

43 if(
	`waô
(0) != -1){

44 
	`¥öt
("wait gotÅoo many\n");

45 
	`exô
(1);

48 
	`¥öt
("forkÅest OK\n");

49 
	}
}

52 
	$maö
()

54 
	`f‹kã°
();

55 
	`exô
(0);

56 
	}
}

	@user/grep.c

3 
	~"kî√l/ty≥s.h
"

4 
	~"kî√l/°©.h
"

5 
	~"u£r/u£r.h
"

7 
	gbuf
[1024];

8 
m©ch
(*, *);

11 
	$gªp
(*
∑âîn
, 
fd
)

13 
n
, 
m
;

14 *
p
, *
q
;

16 
m
 = 0;

17 (
n
 = 
	`ªad
(
fd
, 
buf
+
m
, (buf)-m-1)) > 0){

18 
m
 +
n
;

19 
buf
[
m
] = '\0';

20 
p
 = 
buf
;

21 (
q
 = 
	`°rchr
(
p
, '\n')) != 0){

22 *
q
 = 0;

23 if(
	`m©ch
(
∑âîn
, 
p
)){

24 *
q
 = '\n';

25 
	`wrôe
(1, 
p
, 
q
+1 -Ö);

27 
p
 = 
q
+1;

29 if(
m
 > 0){

30 
m
 -
p
 - 
buf
;

31 
	`memmove
(
buf
, 
p
, 
m
);

34 
	}
}

37 
	$maö
(
¨gc
, *
¨gv
[])

39 
fd
, 
i
;

40 *
∑âîn
;

42 if(
¨gc
 <= 1){

43 
	`Ârötf
(2, "usage: grepÖattern [file ...]\n");

44 
	`exô
(1);

46 
∑âîn
 = 
¨gv
[1];

48 if(
¨gc
 <= 2){

49 
	`gªp
(
∑âîn
, 0);

50 
	`exô
(0);

53 
i
 = 2; i < 
¨gc
; i++){

54 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

55 
	`¥ötf
("gªp: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

56 
	`exô
(1);

58 
	`gªp
(
∑âîn
, 
fd
);

59 
	`˛o£
(
fd
);

61 
	`exô
(0);

62 
	}
}

67 
m©chhîe
(*, *);

68 
m©ch°¨
(, *, *);

71 
	$m©ch
(*
ª
, *
ãxt
)

73 if(
ª
[0] == '^')

74  
	`m©chhîe
(
ª
+1, 
ãxt
);

76 if(
	`m©chhîe
(
ª
, 
ãxt
))

78 }*
ãxt
++ != '\0');

80 
	}
}

83 
	$m©chhîe
(*
ª
, *
ãxt
)

85 if(
ª
[0] == '\0')

87 if(
ª
[1] == '*')

88  
	`m©ch°¨
(
ª
[0],Ñe+2, 
ãxt
);

89 if(
ª
[0] == '$' &&Ñe[1] == '\0')

90  *
ãxt
 == '\0';

91 if(*
ãxt
!='\0' && (
ª
[0]=='.' ||Ñe[0]==*text))

92  
	`m©chhîe
(
ª
+1, 
ãxt
+1);

94 
	}
}

97 
	$m©ch°¨
(
c
, *
ª
, *
ãxt
)

100 if(
	`m©chhîe
(
ª
, 
ãxt
))

102 }*
ãxt
!='\0' && (*ãxt++==
c
 || c=='.'));

104 
	}
}

	@user/init.c

3 
	~"kî√l/ty≥s.h
"

4 
	~"kî√l/°©.h
"

5 
	~"u£r/u£r.h
"

6 
	~"kî√l/f˙é.h
"

8 *
	g¨gv
[] = { "sh", 0 };

11 
	$maö
()

13 
pid
, 
wpid
;

15 if(
	`›í
("c⁄sﬁe", 
O_RDWR
) < 0){

16 
	`mknod
("console", 1, 1);

17 
	`›í
("c⁄sﬁe", 
O_RDWR
);

19 
	`dup
(0);

20 
	`dup
(0);

23 
	`¥ötf
("init: starting sh\n");

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0){

26 
	`¥ötf
("init: fork failed\n");

27 
	`exô
(1);

29 if(
pid
 == 0){

30 
	`exec
("sh", 
¨gv
);

31 
	`¥ötf
("init:Éxec sh failed\n");

32 
	`exô
(1);

34 (
wpid
=
	`waô
(0)Ë>0 && wpid !
pid
){

38 
	}
}

	@user/kalloctest.c

1 
	~"kî√l/∑øm.h
"

2 
	~"kî√l/ty≥s.h
"

3 
	~"kî√l/°©.h
"

4 
	~"kî√l/riscv.h
"

5 
	~"kî√l/memœyout.h
"

6 
	~"u£r/u£r.h
"

8 
	#NCHILD
 2

	)

9 
	#N
 100000

	)

11 
ã°0
();

12 
ã°1
();

15 
	$maö
(
¨gc
, *
¨gv
[])

17 
	`ã°0
();

18 
	`ã°1
();

19 
	`exô
(0);

20 
	}
}

22 
	$ã°0
()

24 *
a
, *
a1
;

25 
n
 = 0;

26 
	`¥ötf
("startÅest0\n");

27 
	`¡as
(0);

28 
i
 = 0; i < 
NCHILD
; i++){

29 
pid
 = 
	`f‹k
();

30 if(
pid
 < 0){

31 
	`¥ötf
("fork failed");

32 
	`exô
(-1);

34 if(
pid
 == 0){

35 
i
 = 0; i < 
N
; i++) {

36 
a
 = 
	`sbrk
(4096);

37 *(*)(
a
+4) = 1;

38 
a1
 = 
	`sbrk
(-4096);

39 i‡(
a1
 !
a
 + 4096) {

40 
	`¥ötf
("wrong sbrk\n");

41 
	`exô
(-1);

44 
	`exô
(-1);

48 
i
 = 0; i < 
NCHILD
; i++){

49 
	`waô
(0);

51 
	`¥ötf
("test0Ñesults:\n");

52 
n
 = 
	`¡as
(1);

53 if(
n
 < 10)

54 
	`¥ötf
("test0 OK\n");

56 
	`¥ötf
("test0 FAIL\n");

57 
	}
}

60 
	$ã°1
()

62 *
a
;

63 
pùes
[
NCHILD
];

64 
tŸ
 = 0;

65 
buf
[1];

67 
	`¥ötf
("startÅest1\n");

68 
i
 = 0; i < 
NCHILD
; i++){

69 
fds
[2];

70 if(
	`pùe
(
fds
) != 0){

71 
	`¥ötf
("pipe() failed\n");

72 
	`exô
(-1);

74 
pid
 = 
	`f‹k
();

75 if(
pid
 < 0){

76 
	`¥ötf
("fork failed");

77 
	`exô
(-1);

79 if(
pid
 == 0){

80 
	`˛o£
(
fds
[0]);

81 
i
 = 0; i < 
N
; i++) {

82 
a
 = 
	`sbrk
(
PGSIZE
);

83 *(*)(
a
+4) = 1;

84 i‡(
	`wrôe
(
fds
[1], "x", 1) != 1) {

85 
	`¥ötf
("write failed");

86 
	`exô
(-1);

89 
	`exô
(0);

91 
	`˛o£
(
fds
[1]);

92 
pùes
[
i
] = 
fds
[0];

95 
°›
 = 0;

96 !
°›
) {

97 
°›
 = 1;

98 
i
 = 0; i < 
NCHILD
; i++){

99 i‡(
	`ªad
(
pùes
[
i
], 
buf
, 1) == 1) {

100 
tŸ
 += 1;

101 
°›
 = 0;

105 
n
 = (
PHYSTOP
-
KERNBASE
)/
PGSIZE
;

106 
	`¥ötf
("tŸÆáŒoˇãdÇumbî o‡∑ges: %d (ouào‡%d)\n", 
tŸ
, 
n
);

107 if(
n
 - 
tŸ
 > 1000) {

108 
	`¥ötf
("test1 FAILED: cannotállocateÉnough memory");

109 
	`exô
(-1);

111 
	`¥ötf
("test1 OK\n");

112 
	}
}

	@user/kill.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
i
;

10 if(
¨gc
 < 2){

11 
	`Ârötf
(2, "usage: killÖid...\n");

12 
	`exô
(1);

14 
i
=1; i<
¨gc
; i++)

15 
	`kûl
(
	`©oi
(
¨gv
[
i
]));

16 
	`exô
(0);

17 
	}
}

	@user/ln.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 if(
¨gc
 != 3){

9 
	`Ârötf
(2, "Usage:Ün oldÇew\n");

10 
	`exô
(1);

12 if(
	`lök
(
¨gv
[1],árgv[2]) < 0)

13 
	`Ârötf
(2, "lök %†%s: faûed\n", 
¨gv
[1],árgv[2]);

14 
	`exô
(0);

15 
	}
}

	@user/ls.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

4 
	~"kî√l/fs.h
"

7 
	$fmäame
(*
∑th
)

9 
buf
[
DIRSIZ
+1];

10 *
p
;

13 
p
=
∑th
+
	`°æí
(path);Ö >=Öath && *p != '/';Ö--)

15 
p
++;

18 if(
	`°æí
(
p
Ë>
DIRSIZ
)

19  
p
;

20 
	`memmove
(
buf
, 
p
, 
	`°æí
(p));

21 
	`mem£t
(
buf
+
	`°æí
(
p
), ' ', 
DIRSIZ
-strlen(p));

22  
buf
;

23 
	}
}

26 
	$ls
(*
∑th
)

28 
buf
[512], *
p
;

29 
fd
;

30 
dúít
 
de
;

31 
°©
 
°
;

33 if((
fd
 = 
	`›í
(
∑th
, 0)) < 0){

34 
	`Ârötf
(2, "ls: c™nŸ o≥¿%s\n", 
∑th
);

38 if(
	`f°©
(
fd
, &
°
) < 0){

39 
	`Ârötf
(2, "ls: c™nŸ sèà%s\n", 
∑th
);

40 
	`˛o£
(
fd
);

44 
°
.
ty≥
){

45 
T_FILE
:

46 
	`¥ötf
("%†%d %d %l\n", 
	`fmäame
(
∑th
), 
°
.
ty≥
, st.
öo
, st.
size
);

49 
T_DIR
:

50 if(
	`°æí
(
∑th
Ë+ 1 + 
DIRSIZ
 + 1 >  
buf
){

51 
	`¥ötf
("ls:ÖathÅooÜong\n");

54 
	`°r˝y
(
buf
, 
∑th
);

55 
p
 = 
buf
+
	`°æí
(buf);

56 *
p
++ = '/';

57 
	`ªad
(
fd
, &
de
, (de)) == (de)){

58 if(
de
.
öum
 == 0)

60 
	`memmove
(
p
, 
de
.
«me
, 
DIRSIZ
);

61 
p
[
DIRSIZ
] = 0;

62 if(
	`°©
(
buf
, &
°
) < 0){

63 
	`¥ötf
("ls: c™nŸ sèà%s\n", 
buf
);

66 
	`¥ötf
("%†%d %d %d\n", 
	`fmäame
(
buf
), 
°
.
ty≥
, st.
öo
, st.
size
);

70 
	`˛o£
(
fd
);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
i
;

78 if(
¨gc
 < 2){

79 
	`ls
(".");

80 
	`exô
(0);

82 
i
=1; i<
¨gc
; i++)

83 
	`ls
(
¨gv
[
i
]);

84 
	`exô
(0);

85 
	}
}

	@user/mkdir.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`Ârötf
(2, "Usage: mkdir files...\n");

12 
	`exô
(1);

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`mkdú
(
¨gv
[
i
]) < 0){

17 
	`Ârötf
(2, "mkdú: %†ÁûedÅÿ¸óã\n", 
¨gv
[
i
]);

22 
	`exô
(0);

23 
	}
}

	@user/mmaptest.c

1 
	~"kî√l/∑øm.h
"

2 
	~"kî√l/f˙é.h
"

3 
	~"kî√l/ty≥s.h
"

4 
	~"kî√l/°©.h
"

5 
	~"kî√l/riscv.h
"

6 
	~"kî√l/fs.h
"

7 
	~"u£r/u£r.h
"

9 
mm≠_ã°
();

10 
f‹k_ã°
();

11 
	gbuf
[
BSIZE
];

13 
	#MAP_FAILED
 ((*Ë-1)

	)

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
	`mm≠_ã°
();

19 
	`f‹k_ã°
();

20 
	`¥ötf
("mmaptest:állÅests succeeded\n");

21 
	`exô
(0);

22 
	}
}

24 *
	gã°«me
 = "???";

27 
	$îr
(*
why
)

29 
	`¥ötf
("mm≠ã°: %†Áûed: %s,Öid=%d\n", 
ã°«me
, 
why
, 
	`gëpid
());

30 
	`exô
(1);

31 
	}
}

37 
	$_v1
(*
p
)

39 
i
;

40 
i
 = 0; i < 
PGSIZE
*2; i++) {

41 i‡(
i
 < 
PGSIZE
 + (PGSIZE/2)) {

42 i‡(
p
[
i
] != 'A') {

43 
	`¥ötf
("mism©cháà%d, w™ãd 'A', gŸ 0x%x\n", 
i
, 
p
[i]);

44 
	`îr
("v1 mismatch (1)");

47 i‡(
p
[
i
] != 0) {

48 
	`¥ötf
("mism©cháà%d, w™ãd zîo, gŸ 0x%x\n", 
i
, 
p
[i]);

49 
	`îr
("v1 mismatch (2)");

53 
	}
}

60 
	$makefûe
(c⁄° *
f
)

62 
i
;

63 
n
 = 
PGSIZE
/
BSIZE
;

65 
	`u∆ök
(
f
);

66 
fd
 = 
	`›í
(
f
, 
O_WRONLY
 | 
O_CREATE
);

67 i‡(
fd
 == -1)

68 
	`îr
("open");

69 
	`mem£t
(
buf
, 'A', 
BSIZE
);

71 
i
 = 0; i < 
n
 +Ç/2; i++) {

72 i‡(
	`wrôe
(
fd
, 
buf
, 
BSIZE
) != BSIZE)

73 
	`îr
("write 0 makefile");

75 i‡(
	`˛o£
(
fd
) == -1)

76 
	`îr
("close");

77 
	}
}

80 
	$mm≠_ã°
()

82 
fd
;

83 
i
;

84 c⁄° * c⁄° 
f
 = "mmap.dur";

85 
	`¥ötf
("mmap_test starting\n");

86 
ã°«me
 = "mmap_test";

94 
	`makefûe
(
f
);

95 i‡((
fd
 = 
	`›í
(
f
, 
O_RDONLY
)) == -1)

96 
	`îr
("open");

112 *
p
 = 
	`mm≠
(0, 
PGSIZE
*2, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0);

113 i‡(
p
 =
MAP_FAILED
)

114 
	`îr
("mmap (1)");

115 
	`_v1
(
p
);

116 i‡(
	`munm≠
(
p
, 
PGSIZE
*2) == -1)

117 
	`îr
("munmap (1)");

121 
p
 = 
	`mm≠
(0, 
PGSIZE
*2, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

122 i‡(
p
 =
MAP_FAILED
)

123 
	`îr
("mmap (2)");

124 i‡(
	`˛o£
(
fd
) == -1)

125 
	`îr
("close");

126 
	`_v1
(
p
);

127 
i
 = 0; i < 
PGSIZE
*2; i++)

128 
p
[
i
] = 'Z';

129 i‡(
	`munm≠
(
p
, 
PGSIZE
*2) == -1)

130 
	`îr
("munmap (2)");

134 i‡((
fd
 = 
	`›í
(
f
, 
O_RDONLY
)) == -1)

135 
	`îr
("open");

136 
p
 = 
	`mm≠
(0, 
PGSIZE
*3, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

137 i‡(
p
 !
MAP_FAILED
)

138 
	`îr
("mmap call should have failed");

139 i‡(
	`˛o£
(
fd
) == -1)

140 
	`îr
("close");

144 i‡((
fd
 = 
	`›í
(
f
, 
O_RDWR
)) == -1)

145 
	`îr
("open");

146 
p
 = 
	`mm≠
(0, 
PGSIZE
*3, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

147 i‡(
p
 =
MAP_FAILED
)

148 
	`îr
("mmap (3)");

149 i‡(
	`˛o£
(
fd
) == -1)

150 
	`îr
("close");

153 
	`_v1
(
p
);

156 
i
 = 0; i < 
PGSIZE
*2; i++)

157 
p
[
i
] = 'Z';

160 i‡(
	`munm≠
(
p
, 
PGSIZE
*2) == -1)

161 
	`îr
("munmap (3)");

165 i‡((
fd
 = 
	`›í
(
f
, 
O_RDWR
)) == -1)

166 
	`îr
("open");

167 
i
 = 0; i < 
PGSIZE
 + (PGSIZE/2); i++){

168 
b
;

169 i‡(
	`ªad
(
fd
, &
b
, 1) != 1)

170 
	`îr
("read (1)");

171 i‡(
b
 != 'Z')

172 
	`îr
("file doesÇot contain modifications");

174 i‡(
	`˛o£
(
fd
) == -1)

175 
	`îr
("close");

178 i‡(
	`munm≠
(
p
+
PGSIZE
*2, PGSIZE) == -1)

179 
	`îr
("munmap (4)");

184 
fd1
;

185 if((
fd1
 = 
	`›í
("mm≠1", 
O_RDWR
|
O_CREATE
)) < 0)

186 
	`îr
("open mmap1");

187 if(
	`wrôe
(
fd1
, "12345", 5) != 5)

188 
	`îr
("write mmap1");

189 *
p1
 = 
	`mm≠
(0, 
PGSIZE
, 
PROT_READ
, 
MAP_PRIVATE
, 
fd1
, 0);

190 if(
p1
 =
MAP_FAILED
)

191 
	`îr
("mmap mmap1");

192 
	`˛o£
(
fd1
);

193 
	`u∆ök
("mmap1");

195 
fd2
;

196 if((
fd2
 = 
	`›í
("mm≠2", 
O_RDWR
|
O_CREATE
)) < 0)

197 
	`îr
("open mmap2");

198 if(
	`wrôe
(
fd1
, "67890", 5) != 5)

199 
	`îr
("write mmap2");

200 *
p2
 = 
	`mm≠
(0, 
PGSIZE
, 
PROT_READ
, 
MAP_PRIVATE
, 
fd2
, 0);

201 if(
p2
 =
MAP_FAILED
)

202 
	`îr
("mmap mmap2");

203 
	`˛o£
(
fd2
);

204 
	`u∆ök
("mmap2");

206 if(
	`memcmp
(
p1
, "12345", 5) != 0)

207 
	`îr
("mmap1 mismatch");

208 if(
	`memcmp
(
p2
, "67890", 5) != 0)

209 
	`îr
("mmap2 mismatch");

211 
	`munm≠
(
p1
, 
PGSIZE
);

212 if(
	`memcmp
(
p2
, "67890", 5) != 0)

213 
	`îr
("mmap2 mismatch (2)");

214 
	`munm≠
(
p2
, 
PGSIZE
);

216 
	`¥ötf
("mmap_test OK\n");

217 
	}
}

224 
	$f‹k_ã°
()

226 
fd
;

227 
pid
;

228 c⁄° * c⁄° 
f
 = "mmap.dur";

230 
	`¥ötf
("fork_test starting\n");

231 
ã°«me
 = "fork_test";

234 
	`makefûe
(
f
);

235 i‡((
fd
 = 
	`›í
(
f
, 
O_RDONLY
)) == -1)

236 
	`îr
("open");

237 
	`u∆ök
(
f
);

238 *
p1
 = 
	`mm≠
(0, 
PGSIZE
*2, 
PROT_READ
, 
MAP_SHARED
, 
fd
, 0);

239 i‡(
p1
 =
MAP_FAILED
)

240 
	`îr
("mmap (4)");

241 *
p2
 = 
	`mm≠
(0, 
PGSIZE
*2, 
PROT_READ
, 
MAP_SHARED
, 
fd
, 0);

242 i‡(
p2
 =
MAP_FAILED
)

243 
	`îr
("mmap (5)");

246 if(*(
p1
+
PGSIZE
) != 'A')

247 
	`îr
("fork mismatch (1)");

249 if((
pid
 = 
	`f‹k
()) < 0)

250 
	`îr
("fork");

251 i‡(
pid
 == 0) {

252 
	`_v1
(
p1
);

253 
	`munm≠
(
p1
, 
PGSIZE
);

254 
	`exô
(0);

257 
°©us
 = -1;

258 
	`waô
(&
°©us
);

260 if(
°©us
 != 0){

261 
	`¥ötf
("fork_test failed\n");

262 
	`exô
(1);

266 
	`_v1
(
p1
);

267 
	`_v1
(
p2
);

269 
	`¥ötf
("fork_test OK\n");

270 
	}
}

	@user/nettests.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/√t.h
"

3 
	~"kî√l/°©.h
"

4 
	~"u£r/u£r.h
"

11 
	$pög
(
uöt16
 
•‹t
, uöt16 
dp‹t
, 
©ãm±s
)

13 
fd
;

14 
obuf
[13] = "hello world!";

15 
uöt32
 
d°
;

19 
d°
 = (10 << 24) | (0 << 16) | (2 << 8) | (2 << 0);

24 if((
fd
 = 
	`c⁄√˘
(
d°
, 
•‹t
, 
dp‹t
)) < 0){

25 
	`Ârötf
(2, "ping: connect() failed\n");

26 
	`exô
(1);

29 
i
 = 0; i < 
©ãm±s
; i++) {

30 if(
	`wrôe
(
fd
, 
obuf
, (obuf)) < 0){

31 
	`Ârötf
(2, "ping: send() failed\n");

32 
	`exô
(1);

36 
ibuf
[128];

37 
cc
 = 
	`ªad
(
fd
, 
ibuf
, (ibuf));

38 if(
cc
 < 0){

39 
	`Ârötf
(2, "ping:Ñecv() failed\n");

40 
	`exô
(1);

43 
	`˛o£
(
fd
);

44 i‡(
	`°rcmp
(
obuf
, 
ibuf
Ë|| 
cc
 != (obuf)){

45 
	`Ârötf
(2, "ping didn'tÑeceive correctÖayload\n");

46 
	`exô
(1);

48 
	}
}

52 
	$ícode_q«me
(*
qn
, *
ho°
)

54 *
l
 = 
ho°
;

56 *
c
 = 
ho°
; c < ho°+
	`°æí
(host)+1; c++) {

57 if(*
c
 == '.') {

58 *
qn
++ = (Ë(
c
-
l
);

59 *
d
 = 
l
; d < 
c
; d++) {

60 *
qn
++ = *
d
;

62 
l
 = 
c
+1;

65 *
qn
 = '\0';

66 
	}
}

70 
	$decode_q«me
(*
qn
)

72 *
qn
 != '\0') {

73 
l
 = *
qn
;

74 if(
l
 == 0)

76 
i
 = 0; i < 
l
; i++) {

77 *
qn
 = *(qn+1);

78 
qn
++;

80 *
qn
++ = '.';

82 
	}
}

86 
	$dns_ªq
(
uöt8
 *
obuf
)

88 
Àn
 = 0;

90 
dns
 *
hdr
 = (dn†*Ë
obuf
;

91 
hdr
->
id
 = 
	`ht⁄s
(6828);

92 
hdr
->
rd
 = 1;

93 
hdr
->
qdcou¡
 = 
	`ht⁄s
(1);

95 
Àn
 +(
dns
);

98 *
q«me
 = (*Ë(
obuf
 + (
dns
));

99 *
s
 = "pdos.csail.mit.edu.";

100 
	`ícode_q«me
(
q«me
, 
s
);

101 
Àn
 +
	`°æí
(
q«me
) + 1;

104 
dns_que°i⁄
 *
h
 = (dns_que°i⁄ *Ë(
q«me
+
	`°æí
(qname)+1);

105 
h
->
qty≥
 = 
	`ht⁄s
(0x1);

106 
h
->
q˛ass
 = 
	`ht⁄s
(0x1);

108 
Àn
 +(
dns_que°i⁄
);

109  
Àn
;

110 
	}
}

114 
	$dns_ªp
(
uöt8
 *
ibuf
, 
cc
)

116 
dns
 *
hdr
 = (dn†*Ë
ibuf
;

117 
Àn
;

118 *
q«me
 = 0;

119 
ªc‹d
 = 0;

121 if(!
hdr
->
qr
) {

122 
	`exô
(1);

123 
	`¥ötf
("NŸá DNSÑe•⁄£ f‹ %d\n", 
	`¡ohs
(
hdr
->
id
));

126 if(
hdr
->
id
 !
	`ht⁄s
(6828))

127 
	`¥ötf
("DNS wr⁄g id: %d\n", 
	`¡ohs
(
hdr
->
id
));

129 if(
hdr
->
rcode
 != 0) {

130 
	`¥ötf
("DNSÑcodêîr‹: %x\n", 
hdr
->
rcode
);

131 
	`exô
(1);

139 
Àn
 = (
dns
);

141 
i
 =0; i < 
	`¡ohs
(
hdr
->
qdcou¡
); i++) {

142 *
qn
 = (*Ë(
ibuf
+
Àn
);

143 
q«me
 = 
qn
;

144 
	`decode_q«me
(
qn
);

145 
Àn
 +
	`°æí
(
qn
)+1;

146 
Àn
 +(
dns_que°i⁄
);

149 
i
 = 0; i < 
	`¡ohs
(
hdr
->
™cou¡
); i++) {

150 *
qn
 = (*Ë(
ibuf
+
Àn
);

152 if((Ë
qn
[0] > 63) {

153 
qn
 = (*)(
ibuf
+qn[1]);

154 
Àn
 += 2;

156 
	`decode_q«me
(
qn
);

157 
Àn
 +
	`°æí
(
qn
)+1;

160 
dns_d©a
 *
d
 = (dns_d©®*Ë(
ibuf
+
Àn
);

161 
Àn
 +(
dns_d©a
);

163 if(
	`¡ohs
(
d
->
ty≥
Ë=
ARECORD
 &&Çtohs(d->
Àn
) == 4) {

164 
ªc‹d
 = 1;

165 
	`¥ötf
("DNSáªc‹d f‹ %†i†", 
q«me
 ? qname : "" );

166 
uöt8
 *
ù
 = (
ibuf
+
Àn
);

167 
	`¥ötf
("%d.%d.%d.%d\n", 
ù
[0], ip[1], ip[2], ip[3]);

168 if(
ù
[0] != 128 || ip[1] != 52 || ip[2] != 129 || ip[3] != 126) {

169 
	`¥ötf
("wrong ipáddress");

170 
	`exô
(1);

172 
Àn
 += 4;

176 if(
Àn
 !
cc
) {

177 
	`¥ötf
("Pro˚s£d %d d©®byã†buàª˚ived %d\n", 
Àn
, 
cc
);

178 
	`exô
(1);

180 if(!
ªc‹d
) {

181 
	`¥ötf
("Didn'tÑeceiveánárecord\n");

182 
	`exô
(1);

184 
	}
}

187 
	$dns
()

189 
	#N
 1000

	)

190 
uöt8
 
obuf
[
N
];

191 
uöt8
 
ibuf
[
N
];

192 
uöt32
 
d°
;

193 
fd
;

194 
Àn
;

196 
	`mem£t
(
obuf
, 0, 
N
);

197 
	`mem£t
(
ibuf
, 0, 
N
);

200 
d°
 = (8 << 24) | (8 << 16) | (8 << 8) | (8 << 0);

202 if((
fd
 = 
	`c⁄√˘
(
d°
, 10000, 53)) < 0){

203 
	`Ârötf
(2, "ping: connect() failed\n");

204 
	`exô
(1);

207 
Àn
 = 
	`dns_ªq
(
obuf
);

209 if(
	`wrôe
(
fd
, 
obuf
, 
Àn
) < 0){

210 
	`Ârötf
(2, "dns: send() failed\n");

211 
	`exô
(1);

213 
cc
 = 
	`ªad
(
fd
, 
ibuf
, (ibuf));

214 if(
cc
 < 0){

215 
	`Ârötf
(2, "dns:Ñecv() failed\n");

216 
	`exô
(1);

218 
	`dns_ªp
(
ibuf
, 
cc
);

220 
	`˛o£
(
fd
);

221 
	}
}

224 
	$maö
(
¨gc
, *
¨gv
[])

226 
i
, 
ªt
;

227 
uöt16
 
dp‹t
 = 
NET_TESTS_PORT
;

229 
	`¥ötf
("√âe°†ru¬ög o¿p‹à%d\n", 
dp‹t
);

231 
	`¥ötf
("testing oneÖing: ");

232 
	`pög
(2000, 
dp‹t
, 2);

233 
	`¥ötf
("OK\n");

235 
	`¥ötf
("testing single-processÖings: ");

236 
i
 = 0; i < 100; i++)

237 
	`pög
(2000, 
dp‹t
, 1);

238 
	`¥ötf
("OK\n");

240 
	`¥ötf
("testing multi-processÖings: ");

241 
i
 = 0; i < 10; i++){

242 
pid
 = 
	`f‹k
();

243 i‡(
pid
 == 0){

244 
	`pög
(2000 + 
i
 + 1, 
dp‹t
, 1);

245 
	`exô
(0);

248 
i
 = 0; i < 10; i++){

249 
	`waô
(&
ªt
);

250 i‡(
ªt
 != 0)

251 
	`exô
(1);

253 
	`¥ötf
("OK\n");

255 
	`¥ötf
("testing DNS\n");

256 
	`dns
();

257 
	`¥ötf
("DNS OK\n");

259 
	`¥ötf
("allÅestsÖassed.\n");

260 
	`exô
(0);

261 
	}
}

	@user/ping.c

6 
	~"kî√l/ty≥s.h
"

7 
	~"kî√l/°©.h
"

8 
	~"u£r/u£r.h
"

11 
	$maö
(
¨gc
, *
¨gv
[])

13 
obuf
[4] = { 1, 2, 3, 4 };

14 
uöt32
 
d°
;

18 
d°
 = (10 << 24) | (0 << 16) | (2 << 8) | (2 << 0);

23 if(
	`£nd
(
d°
, 3000, 2000, 
obuf
, (obuf)) < 0){

24 
	`Ârötf
(2, "ping: send() failed\n");

25 
	`exô
(1);

28 
uöt32
 
§c
;

29 
uöt16
 
•‹t
;

30 
uöt16
 
dp‹t
;

31 
ibuf
[128];

32 
cc
 = 
	`ªcv
(&
§c
, &
•‹t
, &
dp‹t
, 
ibuf
, (ibuf));

33 if(
cc
 < 0){

34 
	`Ârötf
(2, "ping:Ñecv() failed\n");

35 
	`exô
(1);

37 
	`¥ötf
("ªcv:Ç=%d src=%x sp‹t=%d dp‹t=%d\n", 
cc
, 
§c
, 
•‹t
, 
dp‹t
);

39 
	`exô
(0);

40 
	}
}

	@user/printf.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

5 
	~<°d¨g.h
>

7 
	gdigôs
[] = "0123456789ABCDEF";

10 
	$putc
(
fd
, 
c
)

12 
	`wrôe
(
fd
, &
c
, 1);

13 
	}
}

16 
	$¥ötöt
(
fd
, 
xx
, 
ba£
, 
sgn
)

18 
buf
[16];

19 
i
, 
√g
;

20 
uöt
 
x
;

22 
√g
 = 0;

23 if(
sgn
 && 
xx
 < 0){

24 
√g
 = 1;

25 
x
 = -
xx
;

27 
x
 = 
xx
;

30 
i
 = 0;

32 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

33 }(
x
 /
ba£
) != 0);

34 if(
√g
)

35 
buf
[
i
++] = '-';

37 --
i
 >= 0)

38 
	`putc
(
fd
, 
buf
[
i
]);

39 
	}
}

42 
	$¥öçå
(
fd
, 
uöt64
 
x
) {

43 
i
;

44 
	`putc
(
fd
, '0');

45 
	`putc
(
fd
, 'x');

46 
i
 = 0; i < ((
uöt64
Ë* 2); i++, 
x
 <<= 4)

47 
	`putc
(
fd
, 
digôs
[
x
 >> ((
uöt64
) * 8 - 4)]);

48 
	}
}

52 
	$v¥ötf
(
fd
, c⁄° *
fmt
, 
va_li°
 
≠
)

54 *
s
;

55 
c
, 
i
, 
°©e
;

57 
°©e
 = 0;

58 
i
 = 0; 
fmt
[i]; i++){

59 
c
 = 
fmt
[
i
] & 0xff;

60 if(
°©e
 == 0){

61 if(
c
 == '%'){

62 
°©e
 = '%';

64 
	`putc
(
fd
, 
c
);

66 } if(
°©e
 == '%'){

67 if(
c
 == 'd'){

68 
	`¥ötöt
(
fd
, 
	`va_¨g
(
≠
, ), 10, 1);

69 } if(
c
 == 'l') {

70 
	`¥ötöt
(
fd
, 
	`va_¨g
(
≠
, 
uöt64
), 10, 0);

71 } if(
c
 == 'x') {

72 
	`¥ötöt
(
fd
, 
	`va_¨g
(
≠
, ), 16, 0);

73 } if(
c
 == 'p') {

74 
	`¥öçå
(
fd
, 
	`va_¨g
(
≠
, 
uöt64
));

75 } if(
c
 == 's'){

76 
s
 = 
	`va_¨g
(
≠
, *);

77 if(
s
 == 0)

78 
s
 = "(null)";

79 *
s
 != 0){

80 
	`putc
(
fd
, *
s
);

81 
s
++;

83 } if(
c
 == 'c'){

84 
	`putc
(
fd
, 
	`va_¨g
(
≠
, 
uöt
));

85 } if(
c
 == '%'){

86 
	`putc
(
fd
, 
c
);

89 
	`putc
(
fd
, '%');

90 
	`putc
(
fd
, 
c
);

92 
°©e
 = 0;

95 
	}
}

98 
	$Ârötf
(
fd
, c⁄° *
fmt
, ...)

100 
va_li°
 
≠
;

102 
	`va_°¨t
(
≠
, 
fmt
);

103 
	`v¥ötf
(
fd
, 
fmt
, 
≠
);

104 
	}
}

107 
	$¥ötf
(c⁄° *
fmt
, ...)

109 
va_li°
 
≠
;

111 
	`va_°¨t
(
≠
, 
fmt
);

112 
	`v¥ötf
(1, 
fmt
, 
≠
);

113 
	}
}

	@user/rm.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`Ârötf
(2, "Usage:Ñm files...\n");

12 
	`exô
(1);

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`u∆ök
(
¨gv
[
i
]) < 0){

17 
	`Ârötf
(2, "rm: %†ÁûedÅÿdñëe\n", 
¨gv
[
i
]);

22 
	`exô
(0);

23 
	}
}

	@user/sh.c

3 
	~"kî√l/ty≥s.h
"

4 
	~"u£r/u£r.h
"

5 
	~"kî√l/f˙é.h
"

8 
	#EXEC
 1

	)

9 
	#REDIR
 2

	)

10 
	#PIPE
 3

	)

11 
	#LIST
 4

	)

12 
	#BACK
 5

	)

14 
	#MAXARGS
 10

	)

16 
	scmd
 {

17 
	mty≥
;

20 
	sexeccmd
 {

21 
	mty≥
;

22 *
	m¨gv
[
MAXARGS
];

23 *
	mórgv
[
MAXARGS
];

26 
	sªdúcmd
 {

27 
	mty≥
;

28 
cmd
 *
	mcmd
;

29 *
	mfûe
;

30 *
	mefûe
;

31 
	mmode
;

32 
	mfd
;

35 
	spùecmd
 {

36 
	mty≥
;

37 
cmd
 *
	mÀ·
;

38 
cmd
 *
	mright
;

41 
	sli°cmd
 {

42 
	mty≥
;

43 
cmd
 *
	mÀ·
;

44 
cmd
 *
	mright
;

47 
	sbackcmd
 {

48 
	mty≥
;

49 
cmd
 *
	mcmd
;

52 
f‹k1
();

53 
∑nic
(*);

54 
cmd
 *
∑r£cmd
(*);

58 
	$runcmd
(
cmd
 *cmd)

60 
p
[2];

61 
backcmd
 *
bcmd
;

62 
execcmd
 *
ecmd
;

63 
li°cmd
 *
lcmd
;

64 
pùecmd
 *
pcmd
;

65 
ªdúcmd
 *
rcmd
;

67 if(
cmd
 == 0)

68 
	`exô
(1);

70 
cmd
->
ty≥
){

72 
	`∑nic
("runcmd");

74 
EXEC
:

75 
ecmd
 = (
execcmd
*)
cmd
;

76 if(
ecmd
->
¨gv
[0] == 0)

77 
	`exô
(1);

78 
	`exec
(
ecmd
->
¨gv
[0],Écmd->argv);

79 
	`Ârötf
(2, "exe¯%†Áûed\n", 
ecmd
->
¨gv
[0]);

82 
REDIR
:

83 
rcmd
 = (
ªdúcmd
*)
cmd
;

84 
	`˛o£
(
rcmd
->
fd
);

85 if(
	`›í
(
rcmd
->
fûe
,Ñcmd->
mode
) < 0){

86 
	`Ârötf
(2, "›í %†Áûed\n", 
rcmd
->
fûe
);

87 
	`exô
(1);

89 
	`runcmd
(
rcmd
->
cmd
);

92 
LIST
:

93 
lcmd
 = (
li°cmd
*)
cmd
;

94 if(
	`f‹k1
() == 0)

95 
	`runcmd
(
lcmd
->
À·
);

96 
	`waô
(0);

97 
	`runcmd
(
lcmd
->
right
);

100 
PIPE
:

101 
pcmd
 = (
pùecmd
*)
cmd
;

102 if(
	`pùe
(
p
) < 0)

103 
	`∑nic
("pipe");

104 if(
	`f‹k1
() == 0){

105 
	`˛o£
(1);

106 
	`dup
(
p
[1]);

107 
	`˛o£
(
p
[0]);

108 
	`˛o£
(
p
[1]);

109 
	`runcmd
(
pcmd
->
À·
);

111 if(
	`f‹k1
() == 0){

112 
	`˛o£
(0);

113 
	`dup
(
p
[0]);

114 
	`˛o£
(
p
[0]);

115 
	`˛o£
(
p
[1]);

116 
	`runcmd
(
pcmd
->
right
);

118 
	`˛o£
(
p
[0]);

119 
	`˛o£
(
p
[1]);

120 
	`waô
(0);

121 
	`waô
(0);

124 
BACK
:

125 
bcmd
 = (
backcmd
*)
cmd
;

126 if(
	`f‹k1
() == 0)

127 
	`runcmd
(
bcmd
->
cmd
);

130 
	`exô
(0);

131 
	}
}

134 
	$gëcmd
(*
buf
, 
nbuf
)

136 
	`Ârötf
(2, "$ ");

137 
	`mem£t
(
buf
, 0, 
nbuf
);

138 
	`gës
(
buf
, 
nbuf
);

139 if(
buf
[0] == 0)

142 
	}
}

145 
	$maö
()

147 
buf
[100];

148 
fd
;

151 (
fd
 = 
	`›í
("c⁄sﬁe", 
O_RDWR
)) >= 0){

152 if(
fd
 >= 3){

153 
	`˛o£
(
fd
);

159 
	`gëcmd
(
buf
, (buf)) >= 0){

160 if(
buf
[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){

162 
buf
[
	`°æí
(buf)-1] = 0;

163 if(
	`chdú
(
buf
+3) < 0)

164 
	`Ârötf
(2, "ˇ¬Ÿ cd %s\n", 
buf
+3);

167 if(
	`f‹k1
() == 0)

168 
	`runcmd
(
	`∑r£cmd
(
buf
));

169 
	`waô
(0);

171 
	`exô
(0);

172 
	}
}

175 
	$∑nic
(*
s
)

177 
	`Ârötf
(2, "%s\n", 
s
);

178 
	`exô
(1);

179 
	}
}

182 
	$f‹k1
()

184 
pid
;

186 
pid
 = 
	`f‹k
();

187 if(
pid
 == -1)

188 
	`∑nic
("fork");

189  
pid
;

190 
	}
}

195 
cmd
*

196 
	$execcmd
()

198 
execcmd
 *
cmd
;

200 
cmd
 = 
	`mÆloc
((*cmd));

201 
	`mem£t
(
cmd
, 0, (*cmd));

202 
cmd
->
ty≥
 = 
EXEC
;

203  (
cmd
*)cmd;

204 
	}
}

206 
cmd
*

207 
	$ªdúcmd
(
cmd
 *
subcmd
, *
fûe
, *
efûe
, 
mode
, 
fd
)

209 
ªdúcmd
 *
cmd
;

211 
cmd
 = 
	`mÆloc
((*cmd));

212 
	`mem£t
(
cmd
, 0, (*cmd));

213 
cmd
->
ty≥
 = 
REDIR
;

214 
cmd
->cmd = 
subcmd
;

215 
cmd
->
fûe
 = file;

216 
cmd
->
efûe
 =Éfile;

217 
cmd
->
mode
 = mode;

218 
cmd
->
fd
 = fd;

219  (
cmd
*)cmd;

220 
	}
}

222 
cmd
*

223 
	$pùecmd
(
cmd
 *
À·
, cmd *
right
)

225 
pùecmd
 *
cmd
;

227 
cmd
 = 
	`mÆloc
((*cmd));

228 
	`mem£t
(
cmd
, 0, (*cmd));

229 
cmd
->
ty≥
 = 
PIPE
;

230 
cmd
->
À·
 =Üeft;

231 
cmd
->
right
 =Ñight;

232  (
cmd
*)cmd;

233 
	}
}

235 
cmd
*

236 
	$li°cmd
(
cmd
 *
À·
, cmd *
right
)

238 
li°cmd
 *
cmd
;

240 
cmd
 = 
	`mÆloc
((*cmd));

241 
	`mem£t
(
cmd
, 0, (*cmd));

242 
cmd
->
ty≥
 = 
LIST
;

243 
cmd
->
À·
 =Üeft;

244 
cmd
->
right
 =Ñight;

245  (
cmd
*)cmd;

246 
	}
}

248 
cmd
*

249 
	$backcmd
(
cmd
 *
subcmd
)

251 
backcmd
 *
cmd
;

253 
cmd
 = 
	`mÆloc
((*cmd));

254 
	`mem£t
(
cmd
, 0, (*cmd));

255 
cmd
->
ty≥
 = 
BACK
;

256 
cmd
->cmd = 
subcmd
;

257  (
cmd
*)cmd;

258 
	}
}

262 
	gwhôe•a˚
[] = " \t\r\n\v";

263 
	gsymbﬁs
[] = "<|>&;()";

266 
	$gëtokí
(**
ps
, *
es
, **
q
, **
eq
)

268 *
s
;

269 
ªt
;

271 
s
 = *
ps
;

272 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

273 
s
++;

274 if(
q
)

275 *
q
 = 
s
;

276 
ªt
 = *
s
;

277 *
s
){

286 
s
++;

289 
s
++;

290 if(*
s
 == '>'){

291 
ªt
 = '+';

292 
s
++;

296 
ªt
 = 'a';

297 
s
 < 
es
 && !
	`°rchr
(
whôe•a˚
, *sË&& !°rchr(
symbﬁs
, *s))

298 
s
++;

301 if(
eq
)

302 *
eq
 = 
s
;

304 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

305 
s
++;

306 *
ps
 = 
s
;

307  
ªt
;

308 
	}
}

311 
	$≥ek
(**
ps
, *
es
, *
toks
)

313 *
s
;

315 
s
 = *
ps
;

316 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

317 
s
++;

318 *
ps
 = 
s
;

319  *
s
 && 
	`°rchr
(
toks
, *s);

320 
	}
}

322 
cmd
 *
∑r£löe
(**, *);

323 
cmd
 *
∑r£pùe
(**, *);

324 
cmd
 *
∑r£exec
(**, *);

325 
cmd
 *
nu…îmö©e
(cmd*);

327 
cmd
*

328 
	$∑r£cmd
(*
s
)

330 *
es
;

331 
cmd
 *cmd;

333 
es
 = 
s
 + 
	`°æí
(s);

334 
cmd
 = 
	`∑r£löe
(&
s
, 
es
);

335 
	`≥ek
(&
s
, 
es
, "");

336 if(
s
 !
es
){

337 
	`Ârötf
(2, "À·ovîs: %s\n", 
s
);

338 
	`∑nic
("syntax");

340 
	`nu…îmö©e
(
cmd
);

341  
cmd
;

342 
	}
}

344 
cmd
*

345 
	$∑r£löe
(**
ps
, *
es
)

347 
cmd
 *cmd;

349 
cmd
 = 
	`∑r£pùe
(
ps
, 
es
);

350 
	`≥ek
(
ps
, 
es
, "&")){

351 
	`gëtokí
(
ps
, 
es
, 0, 0);

352 
cmd
 = 
	`backcmd
(cmd);

354 if(
	`≥ek
(
ps
, 
es
, ";")){

355 
	`gëtokí
(
ps
, 
es
, 0, 0);

356 
cmd
 = 
	`li°cmd
(cmd, 
	`∑r£löe
(
ps
, 
es
));

358  
cmd
;

359 
	}
}

361 
cmd
*

362 
	$∑r£pùe
(**
ps
, *
es
)

364 
cmd
 *cmd;

366 
cmd
 = 
	`∑r£exec
(
ps
, 
es
);

367 if(
	`≥ek
(
ps
, 
es
, "|")){

368 
	`gëtokí
(
ps
, 
es
, 0, 0);

369 
cmd
 = 
	`pùecmd
(cmd, 
	`∑r£pùe
(
ps
, 
es
));

371  
cmd
;

372 
	}
}

374 
cmd
*

375 
	$∑r£ªdús
(
cmd
 *cmd, **
ps
, *
es
)

377 
tok
;

378 *
q
, *
eq
;

380 
	`≥ek
(
ps
, 
es
, "<>")){

381 
tok
 = 
	`gëtokí
(
ps
, 
es
, 0, 0);

382 if(
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
) != 'a')

383 
	`∑nic
("missing file forÑedirection");

384 
tok
){

386 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_RDONLY
, 0);

389 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

392 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

396  
cmd
;

397 
	}
}

399 
cmd
*

400 
	$∑r£block
(**
ps
, *
es
)

402 
cmd
 *cmd;

404 if(!
	`≥ek
(
ps
, 
es
, "("))

405 
	`∑nic
("parseblock");

406 
	`gëtokí
(
ps
, 
es
, 0, 0);

407 
cmd
 = 
	`∑r£löe
(
ps
, 
es
);

408 if(!
	`≥ek
(
ps
, 
es
, ")"))

409 
	`∑nic
("syntax - missing )");

410 
	`gëtokí
(
ps
, 
es
, 0, 0);

411 
cmd
 = 
	`∑r£ªdús
(cmd, 
ps
, 
es
);

412  
cmd
;

413 
	}
}

415 
cmd
*

416 
	$∑r£exec
(**
ps
, *
es
)

418 *
q
, *
eq
;

419 
tok
, 
¨gc
;

420 
execcmd
 *
cmd
;

421 
cmd
 *
ªt
;

423 if(
	`≥ek
(
ps
, 
es
, "("))

424  
	`∑r£block
(
ps
, 
es
);

426 
ªt
 = 
	`execcmd
();

427 
cmd
 = (
execcmd
*)
ªt
;

429 
¨gc
 = 0;

430 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

431 !
	`≥ek
(
ps
, 
es
, "|)&;")){

432 if((
tok
=
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
)) == 0)

434 if(
tok
 != 'a')

435 
	`∑nic
("syntax");

436 
cmd
->
¨gv
[
¨gc
] = 
q
;

437 
cmd
->
órgv
[
¨gc
] = 
eq
;

438 
¨gc
++;

439 if(
¨gc
 >
MAXARGS
)

440 
	`∑nic
("too manyárgs");

441 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

443 
cmd
->
¨gv
[
¨gc
] = 0;

444 
cmd
->
órgv
[
¨gc
] = 0;

445  
ªt
;

446 
	}
}

449 
cmd
*

450 
	$nu…îmö©e
(
cmd
 *cmd)

452 
i
;

453 
backcmd
 *
bcmd
;

454 
execcmd
 *
ecmd
;

455 
li°cmd
 *
lcmd
;

456 
pùecmd
 *
pcmd
;

457 
ªdúcmd
 *
rcmd
;

459 if(
cmd
 == 0)

462 
cmd
->
ty≥
){

463 
EXEC
:

464 
ecmd
 = (
execcmd
*)
cmd
;

465 
i
=0; 
ecmd
->
¨gv
[i]; i++)

466 *
ecmd
->
órgv
[
i
] = 0;

469 
REDIR
:

470 
rcmd
 = (
ªdúcmd
*)
cmd
;

471 
	`nu…îmö©e
(
rcmd
->
cmd
);

472 *
rcmd
->
efûe
 = 0;

475 
PIPE
:

476 
pcmd
 = (
pùecmd
*)
cmd
;

477 
	`nu…îmö©e
(
pcmd
->
À·
);

478 
	`nu…îmö©e
(
pcmd
->
right
);

481 
LIST
:

482 
lcmd
 = (
li°cmd
*)
cmd
;

483 
	`nu…îmö©e
(
lcmd
->
À·
);

484 
	`nu…îmö©e
(
lcmd
->
right
);

487 
BACK
:

488 
bcmd
 = (
backcmd
*)
cmd
;

489 
	`nu…îmö©e
(
bcmd
->
cmd
);

492  
cmd
;

493 
	}
}

	@user/stressfs.c

10 
	~"kî√l/ty≥s.h
"

11 
	~"kî√l/°©.h
"

12 
	~"u£r/u£r.h
"

13 
	~"kî√l/fs.h
"

14 
	~"kî√l/f˙é.h
"

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
fd
, 
i
;

20 
∑th
[] = "stressfs0";

21 
d©a
[512];

23 
	`¥ötf
("stressfs starting\n");

24 
	`mem£t
(
d©a
, 'a', (data));

26 
i
 = 0; i < 4; i++)

27 if(
	`f‹k
() > 0)

30 
	`¥ötf
("wrôê%d\n", 
i
);

32 
∑th
[8] +
i
;

33 
fd
 = 
	`›í
(
∑th
, 
O_CREATE
 | 
O_RDWR
);

34 
i
 = 0; i < 20; i++)

36 
	`wrôe
(
fd
, 
d©a
, (data));

37 
	`˛o£
(
fd
);

39 
	`¥ötf
("read\n");

41 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

42 
i
 = 0; i < 20; i++)

43 
	`ªad
(
fd
, 
d©a
, (data));

44 
	`˛o£
(
fd
);

46 
	`waô
(0);

48 
	`exô
(0);

49 
	}
}

	@user/symlinktest.c

1 
	~"kî√l/∑øm.h
"

2 
	~"kî√l/ty≥s.h
"

3 
	~"kî√l/°©.h
"

4 
	~"kî√l/riscv.h
"

5 
	~"kî√l/f˙é.h
"

6 
	~"kî√l/•ölock.h
"

7 
	~"kî√l/¶ì∂ock.h
"

8 
	~"kî√l/fs.h
"

9 
	~"kî√l/fûe.h
"

10 
	~"u£r/u£r.h
"

12 
	#Áû
(
msg
Ëdÿ{
	`¥ötf
("FAILURE: " msg "\n"); 
Áûed
 = 1; 
d⁄e
;} 0);

	)

13 
	gÁûed
 = 0;

15 
ã°symlök
();

16 
c⁄cur
();

17 
˛ónup
();

20 
	$maö
(
¨gc
, *
¨gv
[])

22 
	`˛ónup
();

23 
	`ã°symlök
();

24 
	`c⁄cur
();

25 
	`exô
(
Áûed
);

26 
	}
}

29 
	$˛ónup
()

31 
	`u∆ök
("/testsymlink/a");

32 
	`u∆ök
("/testsymlink/b");

33 
	`u∆ök
("/testsymlink/c");

34 
	`u∆ök
("/testsymlink/1");

35 
	`u∆ök
("/testsymlink/2");

36 
	`u∆ök
("/testsymlink/3");

37 
	`u∆ök
("/testsymlink/4");

38 
	`u∆ök
("/testsymlink/z");

39 
	`u∆ök
("/testsymlink/y");

40 
	`u∆ök
("/testsymlink");

41 
	}
}

45 
	$°©_¶ök
(*
≤
, 
°©
 *
°
)

47 
fd
 = 
	`›í
(
≤
, 
O_RDONLY
 | 
O_NOFOLLOW
);

48 if(
fd
 < 0)

50 if(
	`f°©
(
fd
, 
°
) != 0)

53 
	}
}

56 
	$ã°symlök
()

58 
r
, 
fd1
 = -1, 
fd2
 = -1;

59 
buf
[4] = {'a', 'b', 'c', 'd'};

60 
c
 = 0, 
c2
 = 0;

61 
°©
 
°
;

63 
	`¥ötf
("Start:Åest symlinks\n");

65 
	`mkdú
("/testsymlink");

67 
fd1
 = 
	`›í
("/ã°symlök/a", 
O_CREATE
 | 
O_RDWR
);

68 if(
fd1
 < 0Ë
	`Áû
("failedÅo opená");

70 
r
 = 
	`symlök
("/testsymlink/a", "/testsymlink/b");

71 if(
r
 < 0)

72 
	`Áû
("symlink b ->á failed");

74 if(
	`wrôe
(
fd1
, 
buf
, (buf)) != 4)

75 
	`Áû
("failedÅo writeÅoá");

77 i‡(
	`°©_¶ök
("/ã°symlök/b", &
°
) != 0)

78 
	`Áû
("failedÅo stat b");

79 if(
°
.
ty≥
 !
T_SYMLINK
)

80 
	`Áû
("b isn'tá symlink");

82 
fd2
 = 
	`›í
("/ã°symlök/b", 
O_RDWR
);

83 if(
fd2
 < 0)

84 
	`Áû
("failedÅo open b");

85 
	`ªad
(
fd2
, &
c
, 1);

86 i‡(
c
 != 'a')

87 
	`Áû
("failedÅoÑead bytes from b");

89 
	`u∆ök
("/testsymlink/a");

90 if(
	`›í
("/ã°symlök/b", 
O_RDWR
) >= 0)

91 
	`Áû
("ShouldÇot beábleÅo open báfter deletingá");

93 
r
 = 
	`symlök
("/testsymlink/b", "/testsymlink/a");

94 if(
r
 < 0)

95 
	`Áû
("symlinká -> b failed");

97 
r
 = 
	`›í
("/ã°symlök/b", 
O_RDWR
);

98 if(
r
 >= 0)

99 
	`Áû
("ShouldÇot beábleÅo open b (cycle b->a->b->..)\n");

101 
r
 = 
	`symlök
("/testsymlink/nonexistent", "/testsymlink/c");

102 if(
r
 != 0)

103 
	`Áû
("SymlinkingÅoÇonexistent file should succeed\n");

105 
r
 = 
	`symlök
("/testsymlink/2", "/testsymlink/1");

106 if(
r
Ë
	`Áû
("FailedÅoÜink 1->2");

107 
r
 = 
	`symlök
("/testsymlink/3", "/testsymlink/2");

108 if(
r
Ë
	`Áû
("FailedÅoÜink 2->3");

109 
r
 = 
	`symlök
("/testsymlink/4", "/testsymlink/3");

110 if(
r
Ë
	`Áû
("FailedÅoÜink 3->4");

112 
	`˛o£
(
fd1
);

113 
	`˛o£
(
fd2
);

115 
fd1
 = 
	`›í
("/ã°symlök/4", 
O_CREATE
 | 
O_RDWR
);

116 if(
fd1
<0Ë
	`Áû
("FailedÅo create 4\n");

117 
fd2
 = 
	`›í
("/ã°symlök/1", 
O_RDWR
);

118 if(
fd2
<0Ë
	`Áû
("FailedÅo open 1\n");

120 
c
 = '#';

121 
r
 = 
	`wrôe
(
fd2
, &
c
, 1);

122 if(
r
!=1Ë
	`Áû
("FailedÅo writeÅo 1\n");

123 
r
 = 
	`ªad
(
fd1
, &
c2
, 1);

124 if(
r
!=1Ë
	`Áû
("FailedÅoÑead from 4\n");

125 if(
c
!=
c2
)

126 
	`Áû
("ValueÑead from 4 differed from value writtenÅo 1\n");

128 
	`¥ötf
("test symlinks: ok\n");

129 
d⁄e
:

130 
	`˛o£
(
fd1
);

131 
	`˛o£
(
fd2
);

132 
	}
}

135 
	$c⁄cur
()

137 
pid
, 
i
;

138 
fd
;

139 
°©
 
°
;

140 
nchûd
 = 2;

142 
	`¥ötf
("Start:Åest concurrent symlinks\n");

144 
fd
 = 
	`›í
("/ã°symlök/z", 
O_CREATE
 | 
O_RDWR
);

145 if(
fd
 < 0) {

146 
	`¥ötf
("FAILED: open failed");

147 
	`exô
(1);

149 
	`˛o£
(
fd
);

151 
j
 = 0; j < 
nchûd
; j++) {

152 
pid
 = 
	`f‹k
();

153 if(
pid
 < 0){

154 
	`¥ötf
("FAILED: fork failed\n");

155 
	`exô
(1);

157 if(
pid
 == 0) {

158 
m
 = 0;

159 
x
 = (
pid
 ? 1 : 97);

160 
i
 = 0; i < 100; i++){

161 
x
 = x * 1103515245 + 12345;

162 if((
x
 % 3) == 0) {

163 
	`symlök
("/testsymlink/z", "/testsymlink/y");

164 i‡(
	`°©_¶ök
("/ã°symlök/y", &
°
) == 0) {

165 
m
++;

166 if(
°
.
ty≥
 !
T_SYMLINK
) {

167 
	`¥ötf
("FAILED:ÇŸá symbﬁi¯lök\n", 
°
.
ty≥
);

168 
	`exô
(1);

172 
	`u∆ök
("/testsymlink/y");

175 
	`exô
(0);

179 
r
;

180 
j
 = 0; j < 
nchûd
; j++) {

181 
	`waô
(&
r
);

182 if(
r
 != 0) {

183 
	`¥ötf
("test concurrent symlinks: failed\n");

184 
	`exô
(1);

187 
	`¥ötf
("test concurrent symlinks: ok\n");

188 
	}
}

	@user/testsh.c

7 
	~"kî√l/ty≥s.h
"

8 
	~"u£r/u£r.h
"

9 
	~"kî√l/f˙é.h
"

11 
	g£ed
 = 123456789;

16 
	$ønd
()

18 
a
 = 1103515245;

19 
c
 = 12345;

20 
m
 = (1 << 31);

21 
£ed
 = (
a
 * sìd + 
c
Ë% 
m
;

22  
£ed
;

23 
	}
}

27 
	$ønd°rög
(*
buf
, 
n
)

29 
i
 = 0; i < 
n
-1; i++)

30 
buf
[
i
] = "abcdefghijklmn›qr°uvwxyz"[
	`ønd
() % 26];

31 
buf
[
n
-1] = '\0';

32  
buf
;

33 
	}
}

37 
	$wrôefûe
(*
«me
, *
d©a
)

39 
	`u∆ök
(
«me
);

40 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_WRONLY
);

41 if(
fd
 < 0){

42 
	`Ârötf
(2, "ã°sh: couldÇŸ wrôê%s\n", 
«me
);

43 
	`exô
(-1);

45 if(
	`wrôe
(
fd
, 
d©a
, 
	`°æí
(data)) != strlen(data)){

46 
	`Ârötf
(2, "testsh: write failed\n");

47 
	`exô
(-1);

49 
	`˛o£
(
fd
);

50 
	}
}

54 
	$ªadfûe
(*
«me
, *
d©a
, 
max
)

56 
d©a
[0] = '\0';

57 
fd
 = 
	`›í
(
«me
, 0);

58 if(
fd
 < 0){

59 
	`Ârötf
(2, "ã°sh: o≥¿%†Áûed\n", 
«me
);

62 
n
 = 
	`ªad
(
fd
, 
d©a
, 
max
-1);

63 
	`˛o£
(
fd
);

64 if(
n
 < 0){

65 
	`Ârötf
(2, "ã°sh:Ñód %†Áûed\n", 
«me
);

68 
d©a
[
n
] = '\0';

69 
	}
}

74 
	$°r°r
(*
big
, *
smÆl
)

76 if(
smÆl
[0] == '\0')

77  
big
;

78 
i
 = 0; 
big
[i]; i++){

79 
j
;

80 
j
 = 0; 
smÆl
[j]; j++){

81 if(
big
[
i
+
j
] !
smÆl
[j]){

85 if(
smÆl
[
j
] == '\0'){

86  
big
 + 
i
;

90 
	}
}

93 *
	gsh«me
;

100 
	$⁄e
(*
cmd
, *
ex≥˘
, 
tight
)

102 
öfûe
[12], 
outfûe
[12];

104 
	`ønd°rög
(
öfûe
, (infile));

105 
	`ønd°rög
(
outfûe
, (outfile));

107 
	`wrôefûe
(
öfûe
, 
cmd
);

108 
	`u∆ök
(
outfûe
);

110 
pid
 = 
	`f‹k
();

111 if(
pid
 < 0){

112 
	`Ârötf
(2, "testsh: fork() failed\n");

113 
	`exô
(-1);

116 if(
pid
 == 0){

117 
	`˛o£
(0);

118 if(
	`›í
(
öfûe
, 0) != 0){

119 
	`Ârötf
(2, "testsh: child open != 0\n");

120 
	`exô
(-1);

122 
	`˛o£
(1);

123 if(
	`›í
(
outfûe
, 
O_CREATE
|
O_WRONLY
) != 1){

124 
	`Ârötf
(2, "testsh: child open != 1\n");

125 
	`exô
(-1);

127 *
¨gv
[2];

128 
¨gv
[0] = 
sh«me
;

129 
¨gv
[1] = 0;

130 
	`exec
(
sh«me
, 
¨gv
);

131 
	`Ârötf
(2, "ã°sh:Éxe¯%†Áûed\n", 
sh«me
);

132 
	`exô
(-1);

135 if(
	`waô
(0Ë!
pid
){

136 
	`Ârötf
(2, "testsh: unexpected wait()Ñeturn\n");

137 
	`exô
(-1);

139 
	`u∆ök
(
öfûe
);

141 
out
[256];

142 
	`ªadfûe
(
outfûe
, 
out
, (out));

143 
	`u∆ök
(
outfûe
);

145 if(
	`°r°r
(
out
, 
ex≥˘
) != 0){

146 if(
tight
 && 
	`°æí
(
out
Ë> såÀn(
ex≥˘
) + 10){

147 
	`Ârötf
(2, "testsh: sawÉxpected output, butÅoo muchÉlseás well\n");

153 
	}
}

157 
	$t1
(*
ok
)

159 
	`¥ötf
("simpleÉcho: ");

160 if(
	`⁄e
("echo hello goodbye\n", "hello goodbye", 1) == 0){

161 
	`¥ötf
("FAIL\n");

162 *
ok
 = 0;

164 
	`¥ötf
("PASS\n");

166 
	}
}

170 
	$t2
(*
ok
)

172 
	`¥ötf
("simple grep: ");

173 if(
	`⁄e
("grep constitute README\n", "The code inÅhe filesÅhat constitute xv6 is", 1) == 0){

174 
	`¥ötf
("FAIL\n");

175 *
ok
 = 0;

177 
	`¥ötf
("PASS\n");

179 
	}
}

183 
	$t3
(*
ok
)

185 
	`¥ötf
("two commands: ");

186 if(
	`⁄e
("echo x\necho goodbye\n", "goodbye", 1) == 0){

187 
	`¥ötf
("FAIL\n");

188 *
ok
 = 0;

190 
	`¥ötf
("PASS\n");

192 
	}
}

196 
	$t4
(*
ok
)

198 
	`¥ötf
("outputÑedirection: ");

200 
fûe
[16];

201 
	`ønd°rög
(
fûe
, 12);

203 
d©a
[16];

204 
	`ønd°rög
(
d©a
, 12);

206 
cmd
[64];

207 
	`°r˝y
(
cmd
, "echo ");

208 
	`°r˝y
(
cmd
+
	`°æí
(cmd), 
d©a
);

209 
	`°r˝y
(
cmd
+
	`°æí
(cmd), " > ");

210 
	`°r˝y
(
cmd
+
	`°æí
(cmd), 
fûe
);

211 
	`°r˝y
(
cmd
+
	`°æí
(cmd), "\n");

213 if(
	`⁄e
(
cmd
, "", 1) == 0){

214 
	`¥ötf
("FAIL\n");

215 *
ok
 = 0;

217 
buf
[64];

218 
	`ªadfûe
(
fûe
, 
buf
, (buf));

219 if(
	`°r°r
(
buf
, 
d©a
) == 0){

220 
	`¥ötf
("FAIL\n");

221 *
ok
 = 0;

223 
	`¥ötf
("PASS\n");

227 
	`u∆ök
(
fûe
);

228 
	}
}

232 
	$t5
(*
ok
)

234 
	`¥ötf
("inputÑedirection: ");

236 
fûe
[32];

237 
	`ønd°rög
(
fûe
, 12);

239 
d©a
[32];

240 
	`ønd°rög
(
d©a
, 12);

241 
	`wrôefûe
(
fûe
, 
d©a
);

243 
cmd
[32];

244 
	`°r˝y
(
cmd
, "cat < ");

245 
	`°r˝y
(
cmd
+
	`°æí
(cmd), 
fûe
);

246 
	`°r˝y
(
cmd
+
	`°æí
(cmd), "\n");

248 if(
	`⁄e
(
cmd
, 
d©a
, 1) == 0){

249 
	`¥ötf
("FAIL\n");

250 *
ok
 = 0;

252 
	`¥ötf
("PASS\n");

255 
	`u∆ök
(
fûe
);

256 
	}
}

260 
	$t6
(*
ok
)

262 
	`¥ötf
("bothÑedirections: ");

263 
	`u∆ök
("testsh.out");

264 if(
	`⁄e
("grepÖointers < README >Åestsh.out\n", "", 1) == 0){

265 
	`¥ötf
("FAIL\n");

266 *
ok
 = 0;

268 
buf
[64];

269 
	`ªadfûe
("ã°sh.out", 
buf
, (buf));

270 if(
	`°r°r
(
buf
, "providesÖointersÅo on-lineÑesources") == 0){

271 
	`¥ötf
("FAIL\n");

272 *
ok
 = 0;

274 
	`¥ötf
("PASS\n");

277 
	`u∆ök
("testsh.out");

278 
	}
}

282 
	$t7
(*
ok
)

284 
	`¥ötf
("simpleÖipe: ");

286 
«me
[32], 
d©a
[32];

287 
	`ønd°rög
(
«me
, 12);

288 
	`ønd°rög
(
d©a
, 12);

289 
	`wrôefûe
(
«me
, 
d©a
);

291 
cmd
[64];

292 
	`°r˝y
(
cmd
, "cat ");

293 
	`°r˝y
(
cmd
 + 
	`°æí
(cmd), 
«me
);

294 
	`°r˝y
(
cmd
 + 
	`°æí
(cmd), " | cat\n");

296 if(
	`⁄e
(
cmd
, 
d©a
, 1) == 0){

297 
	`¥ötf
("FAIL\n");

298 *
ok
 = 0;

300 
	`¥ötf
("PASS\n");

303 
	`u∆ök
(
«me
);

304 
	}
}

308 
	$t8
(*
ok
)

310 
	`¥ötf
("pipeándÑedirects: ");

312 if(
	`⁄e
("grep suggestions < README | wc >Åestsh.out\n", "", 1) == 0){

313 
	`¥ötf
("FAIL\n");

314 *
ok
 = 0;

316 
buf
[64];

317 
	`ªadfûe
("ã°sh.out", 
buf
, (buf));

318 if(
	`°r°r
(
buf
, "1 11 71") == 0){

319 
	`¥ötf
("FAIL\n");

320 *
ok
 = 0;

322 
	`¥ötf
("PASS\n");

326 
	`u∆ök
("testsh.out");

327 
	}
}

332 
	$t9
(*
ok
)

334 
	`¥ötf
("lots of commands: ");

336 
ãrm
[32];

337 
	`ønd°rög
(
ãrm
, 12);

339 *
cmd
 = 
	`mÆloc
(25 * 36 + 100);

340 if(
cmd
 == 0){

341 
	`Ârötf
(2, "testsh: malloc failed\n");

342 
	`exô
(-1);

345 
cmd
[0] = '\0';

346 
i
 = 0; i < 17+(
	`ønd
()%6); i++){

347 
	`°r˝y
(
cmd
 + 
	`°æí
(cmd), "echo x < README >Åso\n");

348 
	`°r˝y
(
cmd
 + 
	`°æí
(cmd), "echo x |Écho\n");

350 
	`°r˝y
(
cmd
 + 
	`°æí
(cmd), "echo ");

351 
	`°r˝y
(
cmd
 + 
	`°æí
(cmd), 
ãrm
);

352 
	`°r˝y
(
cmd
 + 
	`°æí
(cmd), " >Åso\n");

353 
	`°r˝y
(
cmd
 + 
	`°æí
(cmd), "cat <Åso\n");

355 if(
	`⁄e
(
cmd
, 
ãrm
, 0) == 0){

356 
	`¥ötf
("FAIL\n");

357 *
ok
 = 0;

359 
	`¥ötf
("PASS\n");

362 
	`u∆ök
("tso");

363 
	`‰ì
(
cmd
);

364 
	}
}

367 
	$maö
(
¨gc
, *
¨gv
[])

369 if(
¨gc
 != 2){

370 
	`Ârötf
(2, "Usage:ÅestshÇsh\n");

371 
	`exô
(-1);

373 
sh«me
 = 
¨gv
[1];

375 
£ed
 +
	`gëpid
();

377 
ok
 = 1;

379 
	`t1
(&
ok
);

380 
	`t2
(&
ok
);

381 
	`t3
(&
ok
);

382 
	`t4
(&
ok
);

383 
	`t5
(&
ok
);

384 
	`t6
(&
ok
);

385 
	`t7
(&
ok
);

386 
	`t8
(&
ok
);

387 
	`t9
(&
ok
);

389 if(
ok
){

390 
	`¥ötf
("passedállÅests\n");

392 
	`¥ötf
("failed someÅests\n");

395 
	`exô
(0);

396 
	}
}

	@user/ulib.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"kî√l/f˙é.h
"

4 
	~"u£r/u£r.h
"

7 
	$°r˝y
(*
s
, c⁄° *
t
)

9 *
os
;

11 
os
 = 
s
;

12 (*
s
++ = *
t
++) != 0)

14  
os
;

15 
	}
}

18 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

20 *
p
 && *∞=*
q
)

21 
p
++, 
q
++;

22  (
uch¨
)*
p
 - (uch¨)*
q
;

23 
	}
}

25 
uöt


26 
	$°æí
(c⁄° *
s
)

28 
n
;

30 
n
 = 0; 
s
[n];Ç++)

32  
n
;

33 
	}
}

36 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

38 *
cd°
 = (*Ë
d°
;

39 
i
;

40 
i
 = 0; i < 
n
; i++){

41 
cd°
[
i
] = 
c
;

43  
d°
;

44 
	}
}

47 
	$°rchr
(c⁄° *
s
, 
c
)

49 ; *
s
; s++)

50 if(*
s
 =
c
)

51  (*)
s
;

53 
	}
}

56 
	$gës
(*
buf
, 
max
)

58 
i
, 
cc
;

59 
c
;

61 
i
=0; i+1 < 
max
; ){

62 
cc
 = 
	`ªad
(0, &
c
, 1);

63 if(
cc
 < 1)

65 
buf
[
i
++] = 
c
;

66 if(
c
 == '\n' || c == '\r')

69 
buf
[
i
] = '\0';

70  
buf
;

71 
	}
}

74 
	$°©
(c⁄° *
n
, 
°©
 *
°
)

76 
fd
;

77 
r
;

79 
fd
 = 
	`›í
(
n
, 
O_RDONLY
);

80 if(
fd
 < 0)

82 
r
 = 
	`f°©
(
fd
, 
°
);

83 
	`˛o£
(
fd
);

84  
r
;

85 
	}
}

88 
	$©oi
(c⁄° *
s
)

90 
n
;

92 
n
 = 0;

93 '0' <*
s
 && *s <= '9')

94 
n
 =Ç*10 + *
s
++ - '0';

95  
n
;

96 
	}
}

99 
	$memmove
(*
vd°
, c⁄° *
v§c
, 
n
)

101 *
d°
;

102 c⁄° *
§c
;

104 
d°
 = 
vd°
;

105 
§c
 = 
v§c
;

106 i‡(
§c
 > 
d°
) {

107 
n
-- > 0)

108 *
d°
++ = *
§c
++;

110 
d°
 +
n
;

111 
§c
 +
n
;

112 
n
-- > 0)

113 *--
d°
 = *--
§c
;

115  
vd°
;

116 
	}
}

119 
	$memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
uöt
 
n
)

121 c⁄° *
p1
 = 
s1
, *
p2
 = 
s2
;

122 
n
-- > 0) {

123 i‡(*
p1
 !*
p2
) {

124  *
p1
 - *
p2
;

126 
p1
++;

127 
p2
++;

130 
	}
}

133 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

135  
	`memmove
(
d°
, 
§c
, 
n
);

136 
	}
}

	@user/umalloc.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

4 
	~"kî√l/∑øm.h
"

9 
	tAlign
;

11 
	uhódî
 {

13 
hódî
 *
	m±r
;

14 
uöt
 
	msize
;

15 } 
	ms
;

16 
Align
 
	mx
;

19 
hódî
 
	tHódî
;

21 
Hódî
 
	gba£
;

22 
Hódî
 *
	g‰ìp
;

25 
	$‰ì
(*
≠
)

27 
Hódî
 *
bp
, *
p
;

29 
bp
 = (
Hódî
*)
≠
 - 1;

30 
p
 = 
‰ìp
; !(
bp
 >Ö && b∞<Ö->
s
.
±r
);Ö =Ö->s.ptr)

31 if(
p
 >p->
s
.
±r
 && (
bp
 >Ö || bp <Ö->s.ptr))

33 if(
bp
 + bp->
s
.
size
 =
p
->s.
±r
){

34 
bp
->
s
.
size
 +
p
->s.
±r
->s.size;

35 
bp
->
s
.
±r
 = 
p
->s.ptr->s.ptr;

37 
bp
->
s
.
±r
 = 
p
->s.ptr;

38 if(
p
 +Ö->
s
.
size
 =
bp
){

39 
p
->
s
.
size
 +
bp
->s.size;

40 
p
->
s
.
±r
 = 
bp
->s.ptr;

42 
p
->
s
.
±r
 = 
bp
;

43 
‰ìp
 = 
p
;

44 
	}
}

46 
Hódî
*

47 
	$m‹ec‹e
(
uöt
 
nu
)

49 *
p
;

50 
Hódî
 *
hp
;

52 if(
nu
 < 4096)

53 
nu
 = 4096;

54 
p
 = 
	`sbrk
(
nu
 * (
Hódî
));

55 if(
p
 == (*)-1)

57 
hp
 = (
Hódî
*)
p
;

58 
hp
->
s
.
size
 = 
nu
;

59 
	`‰ì
((*)(
hp
 + 1));

60  
‰ìp
;

61 
	}
}

64 
	$mÆloc
(
uöt
 
nbyãs
)

66 
Hódî
 *
p
, *
¥evp
;

67 
uöt
 
nunôs
;

69 
nunôs
 = (
nbyãs
 + (
Hódî
) - 1)/(Header) + 1;

70 if((
¥evp
 = 
‰ìp
) == 0){

71 
ba£
.
s
.
±r
 = 
‰ìp
 = 
¥evp
 = &base;

72 
ba£
.
s
.
size
 = 0;

74 
p
 = 
¥evp
->
s
.
±r
; ;Örevp =Ö,Ö =Ö->s.ptr){

75 if(
p
->
s
.
size
 >
nunôs
){

76 if(
p
->
s
.
size
 =
nunôs
)

77 
¥evp
->
s
.
±r
 = 
p
->s.ptr;

79 
p
->
s
.
size
 -
nunôs
;

80 
p
 +p->
s
.
size
;

81 
p
->
s
.
size
 = 
nunôs
;

83 
‰ìp
 = 
¥evp
;

84  (*)(
p
 + 1);

86 if(
p
 =
‰ìp
)

87 if((
p
 = 
	`m‹ec‹e
(
nunôs
)) == 0)

90 
	}
}

	@user/user.h

1 
	g°©
;

2 
	gπcd©e
;

5 
f‹k
();

6 
	$exô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

7 
	`waô
(*);

8 
	`pùe
(*);

9 
	`wrôe
(, const *, );

10 
	`ªad
(, *, );

11 
	`˛o£
();

12 
	`kûl
();

13 
	`exec
(*, **);

14 
	`›í
(const *, );

15 
	`mknod
(const *, , );

16 
	`u∆ök
(const *);

17 
	`f°©
(
fd
, 
°©
*);

18 
	`lök
(const *, const *);

19 
	`mkdú
(const *);

20 
	`chdú
(const *);

21 
	`dup
();

22 
	`gëpid
();

23 * 
	`sbrk
();

24 
	`¶ìp
();

25 
	`u±ime
();

26 
	`c⁄√˘
(
uöt32
, 
uöt16
, uint16);

27 
	`¡as
();

28 
	`¸ash
(const *, );

29 
	`mou¡
(*, *);

30 
	`umou¡
(*);

33 
	`°©
(c⁄° *, 
°©
*);

34 * 
	`°r˝y
(*, const *);

35 *
	`memmove
(*, const *, );

36 * 
	`°rchr
(c⁄° *, 
c
);

37 
	`°rcmp
(const *, const *);

38 
	`Ârötf
(, const *, ...);

39 
	`¥ötf
(const *, ...);

40 * 
	`gës
(*, 
max
);

41 
uöt
 
	`°æí
(const *);

42 * 
	`mem£t
(*, , 
uöt
);

43 * 
	`mÆloc
(
uöt
);

44 
	`‰ì
(*);

45 
	`©oi
(const *);

46 
	`memcmp
(c⁄° *, c⁄° *, 
uöt
);

47 *
	`mem˝y
(*, c⁄° *, 
uöt
);

	@user/usertests.c

1 
	~"kî√l/∑øm.h
"

2 
	~"kî√l/ty≥s.h
"

3 
	~"kî√l/°©.h
"

4 
	~"u£r/u£r.h
"

5 
	~"kî√l/fs.h
"

6 
	~"kî√l/f˙é.h
"

7 
	~"kî√l/sysˇŒ.h
"

8 
	~"kî√l/memœyout.h
"

9 
	~"kî√l/riscv.h
"

20 
	#BUFSZ
 (
MAXOPBLOCKS
+2)*
BSIZE


	)

22 
	gbuf
[
BUFSZ
];

23 
	g«me
[3];

27 
	$ùuâe°
(*
s
)

29 if(
	`mkdú
("iputdir") < 0){

30 
	`¥ötf
("%s: mkdú faûed\n", 
s
);

31 
	`exô
(1);

33 if(
	`chdú
("iputdir") < 0){

34 
	`¥ötf
("%s: chdú iputdú faûed\n", 
s
);

35 
	`exô
(1);

37 if(
	`u∆ök
("../iputdir") < 0){

38 
	`¥ötf
("%s: u∆ök ../ùutdú faûed\n", 
s
);

39 
	`exô
(1);

41 if(
	`chdú
("/") < 0){

42 
	`¥ötf
("%s: chdú / faûed\n", 
s
);

43 
	`exô
(1);

45 
	}
}

49 
	$exôùuâe°
(*
s
)

51 
pid
, 
x°©us
;

53 
pid
 = 
	`f‹k
();

54 if(
pid
 < 0){

55 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

56 
	`exô
(1);

58 if(
pid
 == 0){

59 if(
	`mkdú
("iputdir") < 0){

60 
	`¥ötf
("%s: mkdú faûed\n", 
s
);

61 
	`exô
(1);

63 if(
	`chdú
("iputdir") < 0){

64 
	`¥ötf
("%s: chûd chdú faûed\n", 
s
);

65 
	`exô
(1);

67 if(
	`u∆ök
("../iputdir") < 0){

68 
	`¥ötf
("%s: u∆ök ../ùutdú faûed\n", 
s
);

69 
	`exô
(1);

71 
	`exô
(0);

73 
	`waô
(&
x°©us
);

74 
	`exô
(
x°©us
);

75 
	}
}

89 
	$›íùuâe°
(*
s
)

91 
pid
, 
x°©us
;

93 if(
	`mkdú
("oidir") < 0){

94 
	`¥ötf
("%s: mkdú oidú faûed\n", 
s
);

95 
	`exô
(1);

97 
pid
 = 
	`f‹k
();

98 if(
pid
 < 0){

99 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

100 
	`exô
(1);

102 if(
pid
 == 0){

103 
fd
 = 
	`›í
("oidú", 
O_RDWR
);

104 if(
fd
 >= 0){

105 
	`¥ötf
("%s: o≥¿dúe˘‹y f‹ wrôêsuc˚eded\n", 
s
);

106 
	`exô
(1);

108 
	`exô
(0);

110 
	`¶ìp
(1);

111 if(
	`u∆ök
("oidir") != 0){

112 
	`¥ötf
("%s: u∆ök faûed\n", 
s
);

113 
	`exô
(1);

115 
	`waô
(&
x°©us
);

116 
	`exô
(
x°©us
);

117 
	}
}

122 
	$›íã°
(*
s
)

124 
fd
;

126 
fd
 = 
	`›í
("echo", 0);

127 if(
fd
 < 0){

128 
	`¥ötf
("%s: o≥¿echÿÁûed!\n", 
s
);

129 
	`exô
(1);

131 
	`˛o£
(
fd
);

132 
fd
 = 
	`›í
("doesnotexist", 0);

133 if(
fd
 >= 0){

134 
	`¥ötf
("%s: o≥¿d€¢Ÿexi° suc˚eded!\n", 
s
);

135 
	`exô
(1);

137 
	}
}

140 
	$wrôëe°
(*
s
)

142 
fd
;

143 
i
;

144 íum { 
N
=100, 
SZ
=10 };

146 
fd
 = 
	`›í
("smÆl", 
O_CREATE
|
O_RDWR
);

147 if(
fd
 < 0){

148 
	`¥ötf
("%s:Éº‹: cª© smÆ»Áûed!\n", 
s
);

149 
	`exô
(1);

151 
i
 = 0; i < 
N
; i++){

152 if(
	`wrôe
(
fd
, "ØØØØØ", 
SZ
) != SZ){

153 
	`¥ötf
("%s:Éº‹: wrôêØ %dÇew fûêÁûed\n", 
i
);

154 
	`exô
(1);

156 if(
	`wrôe
(
fd
, "bbbbbbbbbb", 
SZ
) != SZ){

157 
	`¥ötf
("%s:Éº‹: wrôêbb %dÇew fûêÁûed\n", 
i
);

158 
	`exô
(1);

161 
	`˛o£
(
fd
);

162 
fd
 = 
	`›í
("smÆl", 
O_RDONLY
);

163 if(
fd
 < 0){

164 
	`¥ötf
("%s:Éº‹: o≥¿smÆ»Áûed!\n", 
s
);

165 
	`exô
(1);

167 
i
 = 
	`ªad
(
fd
, 
buf
, 
N
*
SZ
*2);

168 if(
i
 !
N
*
SZ
*2){

169 
	`¥ötf
("%s:Ñód faûed\n", 
s
);

170 
	`exô
(1);

172 
	`˛o£
(
fd
);

174 if(
	`u∆ök
("small") < 0){

175 
	`¥ötf
("%s: u∆ök smÆ»Áûed\n", 
s
);

176 
	`exô
(1);

178 
	}
}

181 
	$wrôebig
(*
s
)

183 
i
, 
fd
, 
n
;

185 
fd
 = 
	`›í
("big", 
O_CREATE
|
O_RDWR
);

186 if(
fd
 < 0){

187 
	`¥ötf
("%s:Éº‹: cª© big faûed!\n", 
s
);

188 
	`exô
(1);

191 
i
 = 0; i < 
MAXFILE
; i++){

192 ((*)
buf
)[0] = 
i
;

193 if(
	`wrôe
(
fd
, 
buf
, 
BSIZE
) != BSIZE){

194 
	`¥ötf
("%s:Éº‹: wrôêbig fûêÁûed\n", 
i
);

195 
	`exô
(1);

199 
	`˛o£
(
fd
);

201 
fd
 = 
	`›í
("big", 
O_RDONLY
);

202 if(
fd
 < 0){

203 
	`¥ötf
("%s:Éº‹: o≥¿big faûed!\n", 
s
);

204 
	`exô
(1);

207 
n
 = 0;

209 
i
 = 
	`ªad
(
fd
, 
buf
, 
BSIZE
);

210 if(
i
 == 0){

211 if(
n
 =
MAXFILE
 - 1){

212 
	`¥ötf
("%s:Ñód o∆y %d block†‰om big", 
n
);

213 
	`exô
(1);

216 } if(
i
 !
BSIZE
){

217 
	`¥ötf
("%s:Ñód faûed %d\n", 
i
);

218 
	`exô
(1);

220 if(((*)
buf
)[0] !
n
){

221 
	`¥ötf
("%s:Ñead content of block %d is %d\n",

222 
n
, ((*)
buf
)[0]);

223 
	`exô
(1);

225 
n
++;

227 
	`˛o£
(
fd
);

228 if(
	`u∆ök
("big") < 0){

229 
	`¥ötf
("%s: u∆ök big faûed\n", 
s
);

230 
	`exô
(1);

232 
	}
}

236 
	$¸óãã°
(*
s
)

238 
i
, 
fd
;

239 íum { 
N
=52 };

241 
«me
[0] = 'a';

242 
«me
[2] = '\0';

243 
i
 = 0; i < 
N
; i++){

244 
«me
[1] = '0' + 
i
;

245 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

246 
	`˛o£
(
fd
);

248 
«me
[0] = 'a';

249 
«me
[2] = '\0';

250 
i
 = 0; i < 
N
; i++){

251 
«me
[1] = '0' + 
i
;

252 
	`u∆ök
(
«me
);

254 
	}
}

256 
	$dúã°
(*
s
)

258 
	`¥ötf
("mkdirÅest\n");

260 if(
	`mkdú
("dir0") < 0){

261 
	`¥ötf
("%s: mkdú faûed\n", 
s
);

262 
	`exô
(1);

265 if(
	`chdú
("dir0") < 0){

266 
	`¥ötf
("%s: chdú dú0 faûed\n", 
s
);

267 
	`exô
(1);

270 if(
	`chdú
("..") < 0){

271 
	`¥ötf
("%s: chdú .. faûed\n", 
s
);

272 
	`exô
(1);

275 if(
	`u∆ök
("dir0") < 0){

276 
	`¥ötf
("%s: u∆ök dú0 faûed\n", 
s
);

277 
	`exô
(1);

279 
	`¥ötf
("%s: mkdirÅest ok\n");

280 
	}
}

283 
	$exe˘e°
(*
s
)

285 
fd
, 
x°©us
, 
pid
;

286 *
echﬂrgv
[] = { "echo", "OK", 0 };

287 
buf
[3];

289 
	`u∆ök
("echo-ok");

290 
pid
 = 
	`f‹k
();

291 if(
pid
 < 0) {

292 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

293 
	`exô
(1);

295 if(
pid
 == 0) {

296 
	`˛o£
(1);

297 
fd
 = 
	`›í
("echo-ok", 
O_CREATE
|
O_WRONLY
);

298 if(
fd
 < 0) {

299 
	`¥ötf
("%s: cª©êÁûed\n", 
s
);

300 
	`exô
(1);

302 if(
fd
 != 1) {

303 
	`¥ötf
("%s: wr⁄g fd\n", 
s
);

304 
	`exô
(1);

306 if(
	`exec
("echo", 
echﬂrgv
) < 0){

307 
	`¥ötf
("%s:Éxe¯echÿÁûed\n", 
s
);

308 
	`exô
(1);

312 i‡(
	`waô
(&
x°©us
Ë!
pid
) {

313 
	`¥ötf
("%s: waô faûed!\n", 
s
);

315 if(
x°©us
 != 0)

316 
	`exô
(
x°©us
);

318 
fd
 = 
	`›í
("echo-ok", 
O_RDONLY
);

319 if(
fd
 < 0) {

320 
	`¥ötf
("%s: o≥¿Áûed\n", 
s
);

321 
	`exô
(1);

323 i‡(
	`ªad
(
fd
, 
buf
, 2) != 2) {

324 
	`¥ötf
("%s:Ñód faûed\n", 
s
);

325 
	`exô
(1);

327 
	`u∆ök
("echo-ok");

328 if(
buf
[0] == 'O' && buf[1] == 'K')

329 
	`exô
(0);

331 
	`¥ötf
("%s: wr⁄g ouçut\n", 
s
);

332 
	`exô
(1);

335 
	}
}

340 
	$pùe1
(*
s
)

342 
fds
[2], 
pid
, 
x°©us
;

343 
£q
, 
i
, 
n
, 
cc
, 
tŸÆ
;

344 íum { 
N
=5, 
SZ
=1033 };

346 if(
	`pùe
(
fds
) != 0){

347 
	`¥ötf
("%s:Öùe(ËÁûed\n", 
s
);

348 
	`exô
(1);

350 
pid
 = 
	`f‹k
();

351 
£q
 = 0;

352 if(
pid
 == 0){

353 
	`˛o£
(
fds
[0]);

354 
n
 = 0;Ç < 
N
;Ç++){

355 
i
 = 0; i < 
SZ
; i++)

356 
buf
[
i
] = 
£q
++;

357 if(
	`wrôe
(
fds
[1], 
buf
, 
SZ
) != SZ){

358 
	`¥ötf
("%s:Öùe1 o›†1\n", 
s
);

359 
	`exô
(1);

362 
	`exô
(0);

363 } if(
pid
 > 0){

364 
	`˛o£
(
fds
[1]);

365 
tŸÆ
 = 0;

366 
cc
 = 1;

367 (
n
 = 
	`ªad
(
fds
[0], 
buf
, 
cc
)) > 0){

368 
i
 = 0; i < 
n
; i++){

369 if((
buf
[
i
] & 0xffË!(
£q
++ & 0xff)){

370 
	`¥ötf
("%s:Öùe1 o›†2\n", 
s
);

374 
tŸÆ
 +
n
;

375 
cc
 = cc * 2;

376 if(
cc
 > (
buf
))

377 
cc
 = (
buf
);

379 if(
tŸÆ
 !
N
 * 
SZ
){

380 
	`¥ötf
("%s:Öùe1 o›†3ÅŸÆ %d\n", 
tŸÆ
);

381 
	`exô
(1);

383 
	`˛o£
(
fds
[0]);

384 
	`waô
(&
x°©us
);

385 
	`exô
(
x°©us
);

387 
	`¥ötf
("%s: f‹k(ËÁûed\n", 
s
);

388 
	`exô
(1);

390 
	}
}

394 
	$¥ìm±
(*
s
)

396 
pid1
, 
pid2
, 
pid3
;

397 
pfds
[2];

399 
pid1
 = 
	`f‹k
();

400 if(
pid1
 < 0) {

401 
	`¥ötf
("%s: fork failed");

402 
	`exô
(1);

404 if(
pid1
 == 0)

408 
pid2
 = 
	`f‹k
();

409 if(
pid2
 < 0) {

410 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

411 
	`exô
(1);

413 if(
pid2
 == 0)

417 
	`pùe
(
pfds
);

418 
pid3
 = 
	`f‹k
();

419 if(
pid3
 < 0) {

420 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

421 
	`exô
(1);

423 if(
pid3
 == 0){

424 
	`˛o£
(
pfds
[0]);

425 if(
	`wrôe
(
pfds
[1], "x", 1) != 1)

426 
	`¥ötf
("%s:Öreempt writeÉrror");

427 
	`˛o£
(
pfds
[1]);

432 
	`˛o£
(
pfds
[1]);

433 if(
	`ªad
(
pfds
[0], 
buf
, (buf)) != 1){

434 
	`¥ötf
("%s:ÖreemptÑeadÉrror");

437 
	`˛o£
(
pfds
[0]);

438 
	`¥ötf
("kill... ");

439 
	`kûl
(
pid1
);

440 
	`kûl
(
pid2
);

441 
	`kûl
(
pid3
);

442 
	`¥ötf
("wait... ");

443 
	`waô
(0);

444 
	`waô
(0);

445 
	`waô
(0);

446 
	}
}

450 
	$exôwaô
(*
s
)

452 
i
, 
pid
;

454 
i
 = 0; i < 100; i++){

455 
pid
 = 
	`f‹k
();

456 if(
pid
 < 0){

457 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

458 
	`exô
(1);

460 if(
pid
){

461 
x°©e
;

462 if(
	`waô
(&
x°©e
Ë!
pid
){

463 
	`¥ötf
("%s: waô wr⁄gÖid\n", 
s
);

464 
	`exô
(1);

466 if(
i
 !
x°©e
) {

467 
	`¥ötf
("%s: waô wr⁄gÉxô sètus\n", 
s
);

468 
	`exô
(1);

471 
	`exô
(
i
);

474 
	}
}

480 
	$ª∑ª¡
(*
s
)

482 
ma°î_pid
 = 
	`gëpid
();

483 
i
 = 0; i < 200; i++){

484 
pid
 = 
	`f‹k
();

485 if(
pid
 < 0){

486 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

487 
	`exô
(1);

489 if(
pid
){

490 if(
	`waô
(0Ë!
pid
){

491 
	`¥ötf
("%s: waô wr⁄gÖid\n", 
s
);

492 
	`exô
(1);

495 
pid2
 = 
	`f‹k
();

496 if(
pid2
 < 0){

497 
	`kûl
(
ma°î_pid
);

498 
	`exô
(1);

500 
	`exô
(0);

503 
	`exô
(0);

504 
	}
}

508 
	$twochûdªn
(*
s
)

510 
i
 = 0; i < 1000; i++){

511 
pid1
 = 
	`f‹k
();

512 if(
pid1
 < 0){

513 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

514 
	`exô
(1);

516 if(
pid1
 == 0){

517 
	`exô
(0);

519 
pid2
 = 
	`f‹k
();

520 if(
pid2
 < 0){

521 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

522 
	`exô
(1);

524 if(
pid2
 == 0){

525 
	`exô
(0);

527 
	`waô
(0);

528 
	`waô
(0);

532 
	}
}

536 
	$f‹kf‹k
(*
s
)

538 íum { 
N
=2 };

540 
i
 = 0; i < 
N
; i++){

541 
pid
 = 
	`f‹k
();

542 if(
pid
 < 0){

543 
	`¥ötf
("%s: f‹k faûed", 
s
);

544 
	`exô
(1);

546 if(
pid
 == 0){

547 
j
 = 0; j < 200; j++){

548 
pid1
 = 
	`f‹k
();

549 if(
pid1
 < 0){

550 
	`exô
(1);

552 if(
pid1
 == 0){

553 
	`exô
(0);

555 
	`waô
(0);

557 
	`exô
(0);

561 
x°©us
;

562 
i
 = 0; i < 
N
; i++){

563 
	`waô
(&
x°©us
);

564 if(
x°©us
 != 0) {

565 
	`¥ötf
("%s: f‹k i¿chûd faûed", 
s
);

566 
	`exô
(1);

569 
	}
}

572 
	$f‹kf‹kf‹k
(*
s
)

574 
	`u∆ök
("stopforking");

576 
pid
 = 
	`f‹k
();

577 if(
pid
 < 0){

578 
	`¥ötf
("%s: f‹k faûed", 
s
);

579 
	`exô
(1);

581 if(
pid
 == 0){

583 
fd
 = 
	`›í
("stopforking", 0);

584 if(
fd
 >= 0){

585 
	`exô
(0);

587 if(
	`f‹k
() < 0){

588 
	`˛o£
(
	`›í
("°›f‹kög", 
O_CREATE
|
O_RDWR
));

592 
	`exô
(0);

595 
	`¶ìp
(20);

596 
	`˛o£
(
	`›í
("°›f‹kög", 
O_CREATE
|
O_RDWR
));

597 
	`waô
(0);

598 
	`¶ìp
(10);

599 
	}
}

607 
	$ª∑ª¡2
(*
s
)

609 
i
 = 0; i < 800; i++){

610 
pid1
 = 
	`f‹k
();

611 if(
pid1
 < 0){

612 
	`¥ötf
("fork failed\n");

613 
	`exô
(1);

615 if(
pid1
 == 0){

616 
	`f‹k
();

617 
	`f‹k
();

618 
	`exô
(0);

620 
	`waô
(0);

623 
	`exô
(0);

624 
	}
}

628 
	$mem
(*
s
)

630 *
m1
, *
m2
;

631 
pid
;

633 if((
pid
 = 
	`f‹k
()) == 0){

634 
m1
 = 0;

635 (
m2
 = 
	`mÆloc
(10001)) != 0){

636 *(**)
m2
 = 
m1
;

637 
m1
 = 
m2
;

639 
m1
){

640 
m2
 = *(**)
m1
;

641 
	`‰ì
(
m1
);

642 
m1
 = 
m2
;

644 
m1
 = 
	`mÆloc
(1024*20);

645 if(
m1
 == 0){

646 
	`¥ötf
("couldn'àÆloˇã mem?!!\n", 
s
);

647 
	`exô
(1);

649 
	`‰ì
(
m1
);

650 
	`exô
(0);

652 
x°©us
;

653 
	`waô
(&
x°©us
);

654 
	`exô
(
x°©us
);

656 
	}
}

663 
	$sh¨edfd
(*
s
)

665 
fd
, 
pid
, 
i
, 
n
, 
nc
, 
≈
;

666 íum { 
N
 = 1000, 
SZ
=10};

667 
buf
[
SZ
];

669 
	`u∆ök
("sharedfd");

670 
fd
 = 
	`›í
("sh¨edfd", 
O_CREATE
|
O_RDWR
);

671 if(
fd
 < 0){

672 
	`¥ötf
("%s: c™nŸ o≥¿sh¨edfd f‹ wrôög", 
s
);

673 
	`exô
(1);

675 
pid
 = 
	`f‹k
();

676 
	`mem£t
(
buf
, 
pid
==0?'c':'p', (buf));

677 
i
 = 0; i < 
N
; i++){

678 if(
	`wrôe
(
fd
, 
buf
, (buf)) != (buf)){

679 
	`¥ötf
("%s: wrôêsh¨edfd faûed\n", 
s
);

680 
	`exô
(1);

683 if(
pid
 == 0) {

684 
	`exô
(0);

686 
x°©us
;

687 
	`waô
(&
x°©us
);

688 if(
x°©us
 != 0)

689 
	`exô
(
x°©us
);

692 
	`˛o£
(
fd
);

693 
fd
 = 
	`›í
("sharedfd", 0);

694 if(
fd
 < 0){

695 
	`¥ötf
("%s: c™nŸ o≥¿sh¨edfd f‹Ñódög\n", 
s
);

696 
	`exô
(1);

698 
nc
 = 
≈
 = 0;

699 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

700 
i
 = 0; i < (
buf
); i++){

701 if(
buf
[
i
] == 'c')

702 
nc
++;

703 if(
buf
[
i
] == 'p')

704 
≈
++;

707 
	`˛o£
(
fd
);

708 
	`u∆ök
("sharedfd");

709 if(
nc
 =
N
*
SZ
 && 
≈
 == N*SZ){

710 
	`exô
(0);

712 
	`¥ötf
("%s:Çc/≈Åe° faûs\n", 
s
);

713 
	`exô
(1);

715 
	}
}

720 
	$fourfûes
(*
s
)

722 
fd
, 
pid
, 
i
, 
j
, 
n
, 
tŸÆ
, 
pi
;

723 *
«mes
[] = { "f0", "f1", "f2", "f3" };

724 *
‚ame
;

725 íum { 
N
=12, 
NCHILD
=4, 
SZ
=500 };

727 
pi
 = 0;Öò< 
NCHILD
;Öi++){

728 
‚ame
 = 
«mes
[
pi
];

729 
	`u∆ök
(
‚ame
);

731 
pid
 = 
	`f‹k
();

732 if(
pid
 < 0){

733 
	`¥ötf
("f‹k faûed\n", 
s
);

734 
	`exô
(1);

737 if(
pid
 == 0){

738 
fd
 = 
	`›í
(
‚ame
, 
O_CREATE
 | 
O_RDWR
);

739 if(
fd
 < 0){

740 
	`¥ötf
("¸óã faûed\n", 
s
);

741 
	`exô
(1);

744 
	`mem£t
(
buf
, '0'+
pi
, 
SZ
);

745 
i
 = 0; i < 
N
; i++){

746 if((
n
 = 
	`wrôe
(
fd
, 
buf
, 
SZ
)) != SZ){

747 
	`¥ötf
("wrôêÁûed %d\n", 
n
);

748 
	`exô
(1);

751 
	`exô
(0);

755 
x°©us
;

756 
pi
 = 0;Öò< 
NCHILD
;Öi++){

757 
	`waô
(&
x°©us
);

758 if(
x°©us
 != 0)

759 
	`exô
(
x°©us
);

762 
i
 = 0; i < 
NCHILD
; i++){

763 
‚ame
 = 
«mes
[
i
];

764 
fd
 = 
	`›í
(
‚ame
, 0);

765 
tŸÆ
 = 0;

766 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

767 
j
 = 0; j < 
n
; j++){

768 if(
buf
[
j
] !'0'+
i
){

769 
	`¥ötf
("wr⁄g ch¨\n", 
s
);

770 
	`exô
(1);

773 
tŸÆ
 +
n
;

775 
	`˛o£
(
fd
);

776 if(
tŸÆ
 !
N
*
SZ
){

777 
	`¥ötf
("wr⁄gÜígth %d\n", 
tŸÆ
);

778 
	`exô
(1);

780 
	`u∆ök
(
‚ame
);

782 
	}
}

786 
	$¸óãdñëe
(*
s
)

788 íum { 
N
 = 20, 
NCHILD
=4 };

789 
pid
, 
i
, 
fd
, 
pi
;

790 
«me
[32];

792 
pi
 = 0;Öò< 
NCHILD
;Öi++){

793 
pid
 = 
	`f‹k
();

794 if(
pid
 < 0){

795 
	`¥ötf
("f‹k faûed\n", 
s
);

796 
	`exô
(1);

799 if(
pid
 == 0){

800 
«me
[0] = 'p' + 
pi
;

801 
«me
[2] = '\0';

802 
i
 = 0; i < 
N
; i++){

803 
«me
[1] = '0' + 
i
;

804 
fd
 = 
	`›í
(
«me
, 
O_CREATE
 | 
O_RDWR
);

805 if(
fd
 < 0){

806 
	`¥ötf
("%s: cª©êÁûed\n", 
s
);

807 
	`exô
(1);

809 
	`˛o£
(
fd
);

810 if(
i
 > 0 && (i % 2 ) == 0){

811 
«me
[1] = '0' + (
i
 / 2);

812 if(
	`u∆ök
(
«me
) < 0){

813 
	`¥ötf
("%s: u∆ök faûed\n", 
s
);

814 
	`exô
(1);

818 
	`exô
(0);

822 
x°©us
;

823 
pi
 = 0;Öò< 
NCHILD
;Öi++){

824 
	`waô
(&
x°©us
);

825 if(
x°©us
 != 0)

826 
	`exô
(1);

829 
«me
[0] =Çame[1] =Çame[2] = 0;

830 
i
 = 0; i < 
N
; i++){

831 
pi
 = 0;Öò< 
NCHILD
;Öi++){

832 
«me
[0] = 'p' + 
pi
;

833 
«me
[1] = '0' + 
i
;

834 
fd
 = 
	`›í
(
«me
, 0);

835 if((
i
 =0 || i >
N
/2Ë&& 
fd
 < 0){

836 
	`¥ötf
("%s: o›†¸óãdñëê%†didn'àexi°\n", 
s
, 
«me
);

837 
	`exô
(1);

838 } if((
i
 >1 && i < 
N
/2Ë&& 
fd
 >= 0){

839 
	`¥ötf
("%s: o›†¸óãdñëê%†didÉxi°\n", 
s
, 
«me
);

840 
	`exô
(1);

842 if(
fd
 >= 0)

843 
	`˛o£
(
fd
);

847 
i
 = 0; i < 
N
; i++){

848 
pi
 = 0;Öò< 
NCHILD
;Öi++){

849 
«me
[0] = 'p' + 
i
;

850 
«me
[1] = '0' + 
i
;

851 
	`u∆ök
(
«me
);

854 
	}
}

858 
	$u∆ökªad
(*
s
)

860 íum { 
SZ
 = 5 };

861 
fd
, 
fd1
;

863 
fd
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

864 if(
fd
 < 0){

865 
	`¥ötf
("%s: cª©êu∆ökªad faûed\n", 
s
);

866 
	`exô
(1);

868 
	`wrôe
(
fd
, "hñlo", 
SZ
);

869 
	`˛o£
(
fd
);

871 
fd
 = 
	`›í
("u∆ökªad", 
O_RDWR
);

872 if(
fd
 < 0){

873 
	`¥ötf
("%s: o≥¿u∆ökªad faûed\n", 
s
);

874 
	`exô
(1);

876 if(
	`u∆ök
("unlinkread") != 0){

877 
	`¥ötf
("%s: u∆ök u∆ökªad faûed\n", 
s
);

878 
	`exô
(1);

881 
fd1
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

882 
	`wrôe
(
fd1
, "yyy", 3);

883 
	`˛o£
(
fd1
);

885 if(
	`ªad
(
fd
, 
buf
, (buf)Ë!
SZ
){

886 
	`¥ötf
("%s: u∆ökªadÑód faûed", 
s
);

887 
	`exô
(1);

889 if(
buf
[0] != 'h'){

890 
	`¥ötf
("%s: u∆ökªad wr⁄g d©a\n", 
s
);

891 
	`exô
(1);

893 if(
	`wrôe
(
fd
, 
buf
, 10) != 10){

894 
	`¥ötf
("%s: u∆ökªad wrôêÁûed\n", 
s
);

895 
	`exô
(1);

897 
	`˛o£
(
fd
);

898 
	`u∆ök
("unlinkread");

899 
	}
}

902 
	$lökã°
(*
s
)

904 íum { 
SZ
 = 5 };

905 
fd
;

907 
	`u∆ök
("lf1");

908 
	`u∆ök
("lf2");

910 
fd
 = 
	`›í
("lf1", 
O_CREATE
|
O_RDWR
);

911 if(
fd
 < 0){

912 
	`¥ötf
("%s: cª©êlf1 faûed\n", 
s
);

913 
	`exô
(1);

915 if(
	`wrôe
(
fd
, "hñlo", 
SZ
) != SZ){

916 
	`¥ötf
("%s: wrôêlf1 faûed\n", 
s
);

917 
	`exô
(1);

919 
	`˛o£
(
fd
);

921 if(
	`lök
("lf1", "lf2") < 0){

922 
	`¥ötf
("%s:ÜökÜf1Üf2 faûed\n", 
s
);

923 
	`exô
(1);

925 
	`u∆ök
("lf1");

927 if(
	`›í
("lf1", 0) >= 0){

928 
	`¥ötf
("%s: u∆ökedÜf1 buàô i†°û»thîe!\n", 
s
);

929 
	`exô
(1);

932 
fd
 = 
	`›í
("lf2", 0);

933 if(
fd
 < 0){

934 
	`¥ötf
("%s: o≥¿lf2 faûed\n", 
s
);

935 
	`exô
(1);

937 if(
	`ªad
(
fd
, 
buf
, (buf)Ë!
SZ
){

938 
	`¥ötf
("%s:ÑódÜf2 faûed\n", 
s
);

939 
	`exô
(1);

941 
	`˛o£
(
fd
);

943 if(
	`lök
("lf2", "lf2") >= 0){

944 
	`¥ötf
("%s:ÜökÜf2Üf2 suc˚eded! o›s\n", 
s
);

945 
	`exô
(1);

948 
	`u∆ök
("lf2");

949 if(
	`lök
("lf2", "lf1") >= 0){

950 
	`¥ötf
("%s:ÜökÇ⁄-exi°™àsuc˚eded! o›s\n", 
s
);

951 
	`exô
(1);

954 if(
	`lök
(".", "lf1") >= 0){

955 
	`¥ötf
("%s:Üök .Üf1 suc˚eded! o›s\n", 
s
);

956 
	`exô
(1);

958 
	}
}

962 
	$c⁄¸óã
(*
s
)

964 íum { 
N
 = 40 };

965 
fûe
[3];

966 
i
, 
pid
, 
n
, 
fd
;

967 
Á
[
N
];

969 
ush‹t
 
öum
;

970 
«me
[
DIRSIZ
];

971 } 
de
;

973 
fûe
[0] = 'C';

974 
fûe
[2] = '\0';

975 
i
 = 0; i < 
N
; i++){

976 
fûe
[1] = '0' + 
i
;

977 
	`u∆ök
(
fûe
);

978 
pid
 = 
	`f‹k
();

979 if(
pid
 && (
i
 % 3) == 1){

980 
	`lök
("C0", 
fûe
);

981 } if(
pid
 =0 && (
i
 % 5) == 1){

982 
	`lök
("C0", 
fûe
);

984 
fd
 = 
	`›í
(
fûe
, 
O_CREATE
 | 
O_RDWR
);

985 if(
fd
 < 0){

986 
	`¥ötf
("c⁄¸óã cª©ê%†Áûed\n", 
fûe
);

987 
	`exô
(1);

989 
	`˛o£
(
fd
);

991 if(
pid
 == 0) {

992 
	`exô
(0);

994 
x°©us
;

995 
	`waô
(&
x°©us
);

996 if(
x°©us
 != 0)

997 
	`exô
(1);

1001 
	`mem£t
(
Á
, 0, (fa));

1002 
fd
 = 
	`›í
(".", 0);

1003 
n
 = 0;

1004 
	`ªad
(
fd
, &
de
, (de)) > 0){

1005 if(
de
.
öum
 == 0)

1007 if(
de
.
«me
[0] == 'C' && de.name[2] == '\0'){

1008 
i
 = 
de
.
«me
[1] - '0';

1009 if(
i
 < 0 || i >(
Á
)){

1010 
	`¥ötf
("%s: c⁄¸óã weúd fûê%s\n", 
s
, 
de
.
«me
);

1011 
	`exô
(1);

1013 if(
Á
[
i
]){

1014 
	`¥ötf
("%s: c⁄¸óã du∂iˇã fûê%s\n", 
s
, 
de
.
«me
);

1015 
	`exô
(1);

1017 
Á
[
i
] = 1;

1018 
n
++;

1021 
	`˛o£
(
fd
);

1023 if(
n
 !
N
){

1024 
	`¥ötf
("%s: c⁄¸óãÇŸÉnough fûe†ö dúe˘‹yÜi°ög\n", 
s
);

1025 
	`exô
(1);

1028 
i
 = 0; i < 
N
; i++){

1029 
fûe
[1] = '0' + 
i
;

1030 
pid
 = 
	`f‹k
();

1031 if(
pid
 < 0){

1032 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

1033 
	`exô
(1);

1035 if(((
i
 % 3Ë=0 && 
pid
 == 0) ||

1036 ((
i
 % 3Ë=1 && 
pid
 != 0)){

1037 
	`˛o£
(
	`›í
(
fûe
, 0));

1038 
	`˛o£
(
	`›í
(
fûe
, 0));

1039 
	`˛o£
(
	`›í
(
fûe
, 0));

1040 
	`˛o£
(
	`›í
(
fûe
, 0));

1042 
	`u∆ök
(
fûe
);

1043 
	`u∆ök
(
fûe
);

1044 
	`u∆ök
(
fûe
);

1045 
	`u∆ök
(
fûe
);

1047 if(
pid
 == 0)

1048 
	`exô
(0);

1050 
	`waô
(0);

1052 
	}
}

1057 
	$löku∆ök
(*
s
)

1059 
pid
, 
i
;

1061 
	`u∆ök
("x");

1062 
pid
 = 
	`f‹k
();

1063 if(
pid
 < 0){

1064 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

1065 
	`exô
(1);

1068 
x
 = (
pid
 ? 1 : 97);

1069 
i
 = 0; i < 100; i++){

1070 
x
 = x * 1103515245 + 12345;

1071 if((
x
 % 3) == 0){

1072 
	`˛o£
(
	`›í
("x", 
O_RDWR
 | 
O_CREATE
));

1073 } if((
x
 % 3) == 1){

1074 
	`lök
("cat", "x");

1076 
	`u∆ök
("x");

1080 if(
pid
)

1081 
	`waô
(0);

1083 
	`exô
(0);

1084 
	}
}

1088 
	$bigdú
(*
s
)

1090 íum { 
N
 = 500 };

1091 
i
, 
fd
;

1092 
«me
[10];

1094 
	`u∆ök
("bd");

1096 
fd
 = 
	`›í
("bd", 
O_CREATE
);

1097 if(
fd
 < 0){

1098 
	`¥ötf
("%s: bigdú cª©êÁûed\n", 
s
);

1099 
	`exô
(1);

1101 
	`˛o£
(
fd
);

1103 
i
 = 0; i < 
N
; i++){

1104 
«me
[0] = 'x';

1105 
«me
[1] = '0' + (
i
 / 64);

1106 
«me
[2] = '0' + (
i
 % 64);

1107 
«me
[3] = '\0';

1108 if(
	`lök
("bd", 
«me
) != 0){

1109 
	`¥ötf
("%s: bigdúÜök faûed\n", 
s
);

1110 
	`exô
(1);

1114 
	`u∆ök
("bd");

1115 
i
 = 0; i < 
N
; i++){

1116 
«me
[0] = 'x';

1117 
«me
[1] = '0' + (
i
 / 64);

1118 
«me
[2] = '0' + (
i
 % 64);

1119 
«me
[3] = '\0';

1120 if(
	`u∆ök
(
«me
) != 0){

1121 
	`¥ötf
("%s: bigdú u∆ök faûed", 
s
);

1122 
	`exô
(1);

1125 
	}
}

1128 
	$subdú
(*
s
)

1130 
fd
, 
cc
;

1132 
	`u∆ök
("ff");

1133 if(
	`mkdú
("dd") != 0){

1134 
	`¥ötf
("%s: mkdú dd faûed\n", 
s
);

1135 
	`exô
(1);

1138 
fd
 = 
	`›í
("dd/ff", 
O_CREATE
 | 
O_RDWR
);

1139 if(
fd
 < 0){

1140 
	`¥ötf
("%s: cª©êdd/f‡Áûed\n", 
s
);

1141 
	`exô
(1);

1143 
	`wrôe
(
fd
, "ff", 2);

1144 
	`˛o£
(
fd
);

1146 if(
	`u∆ök
("dd") >= 0){

1147 
	`¥ötf
("%s: u∆ök dd (n⁄-em±y dúËsuc˚eded!\n", 
s
);

1148 
	`exô
(1);

1151 if(
	`mkdú
("/dd/dd") != 0){

1152 
	`¥ötf
("subdú mkdú dd/dd faûed\n", 
s
);

1153 
	`exô
(1);

1156 
fd
 = 
	`›í
("dd/dd/ff", 
O_CREATE
 | 
O_RDWR
);

1157 if(
fd
 < 0){

1158 
	`¥ötf
("%s: cª©êdd/dd/f‡Áûed\n", 
s
);

1159 
	`exô
(1);

1161 
	`wrôe
(
fd
, "FF", 2);

1162 
	`˛o£
(
fd
);

1164 
fd
 = 
	`›í
("dd/dd/../ff", 0);

1165 if(
fd
 < 0){

1166 
	`¥ötf
("%s: o≥¿dd/dd/../f‡Áûed\n", 
s
);

1167 
	`exô
(1);

1169 
cc
 = 
	`ªad
(
fd
, 
buf
, (buf));

1170 if(
cc
 !2 || 
buf
[0] != 'f'){

1171 
	`¥ötf
("%s: dd/dd/../f‡wr⁄g c⁄ã¡\n", 
s
);

1172 
	`exô
(1);

1174 
	`˛o£
(
fd
);

1176 if(
	`lök
("dd/dd/ff", "dd/dd/ffff") != 0){

1177 
	`¥ötf
("lök dd/dd/f‡dd/dd/fff‡Áûed\n", 
s
);

1178 
	`exô
(1);

1181 if(
	`u∆ök
("dd/dd/ff") != 0){

1182 
	`¥ötf
("%s: u∆ök dd/dd/f‡Áûed\n", 
s
);

1183 
	`exô
(1);

1185 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

1186 
	`¥ötf
("%s: o≥¿(u∆ökedËdd/dd/f‡suc˚eded\n", 
s
);

1187 
	`exô
(1);

1190 if(
	`chdú
("dd") != 0){

1191 
	`¥ötf
("%s: chdú dd faûed\n", 
s
);

1192 
	`exô
(1);

1194 if(
	`chdú
("dd/../../dd") != 0){

1195 
	`¥ötf
("%s: chdú dd/../../dd faûed\n", 
s
);

1196 
	`exô
(1);

1198 if(
	`chdú
("dd/../../../dd") != 0){

1199 
	`¥ötf
("chdú dd/../../dd faûed\n", 
s
);

1200 
	`exô
(1);

1202 if(
	`chdú
("./..") != 0){

1203 
	`¥ötf
("%s: chdú ./.. faûed\n", 
s
);

1204 
	`exô
(1);

1207 
fd
 = 
	`›í
("dd/dd/ffff", 0);

1208 if(
fd
 < 0){

1209 
	`¥ötf
("%s: o≥¿dd/dd/fff‡Áûed\n", 
s
);

1210 
	`exô
(1);

1212 if(
	`ªad
(
fd
, 
buf
, (buf)) != 2){

1213 
	`¥ötf
("%s:Ñód dd/dd/fff‡wr⁄gÜí\n", 
s
);

1214 
	`exô
(1);

1216 
	`˛o£
(
fd
);

1218 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

1219 
	`¥ötf
("%s: o≥¿(u∆ökedËdd/dd/f‡suc˚eded!\n", 
s
);

1220 
	`exô
(1);

1223 if(
	`›í
("dd/ff/ff", 
O_CREATE
|
O_RDWR
) >= 0){

1224 
	`¥ötf
("%s: cª©êdd/ff/f‡suc˚eded!\n", 
s
);

1225 
	`exô
(1);

1227 if(
	`›í
("dd/xx/ff", 
O_CREATE
|
O_RDWR
) >= 0){

1228 
	`¥ötf
("%s: cª©êdd/xx/f‡suc˚eded!\n", 
s
);

1229 
	`exô
(1);

1231 if(
	`›í
("dd", 
O_CREATE
) >= 0){

1232 
	`¥ötf
("%s: cª©êdd suc˚eded!\n", 
s
);

1233 
	`exô
(1);

1235 if(
	`›í
("dd", 
O_RDWR
) >= 0){

1236 
	`¥ötf
("%s: o≥¿ddÑdw∏suc˚eded!\n", 
s
);

1237 
	`exô
(1);

1239 if(
	`›í
("dd", 
O_WRONLY
) >= 0){

1240 
	`¥ötf
("%s: o≥¿dd wr⁄ly suc˚eded!\n", 
s
);

1241 
	`exô
(1);

1243 if(
	`lök
("dd/ff/ff", "dd/dd/xx") == 0){

1244 
	`¥ötf
("%s:Üök dd/ff/f‡dd/dd/xx suc˚eded!\n", 
s
);

1245 
	`exô
(1);

1247 if(
	`lök
("dd/xx/ff", "dd/dd/xx") == 0){

1248 
	`¥ötf
("%s:Üök dd/xx/f‡dd/dd/xx suc˚eded!\n", 
s
);

1249 
	`exô
(1);

1251 if(
	`lök
("dd/ff", "dd/dd/ffff") == 0){

1252 
	`¥ötf
("%s:Üök dd/f‡dd/dd/fff‡suc˚eded!\n", 
s
);

1253 
	`exô
(1);

1255 if(
	`mkdú
("dd/ff/ff") == 0){

1256 
	`¥ötf
("%s: mkdú dd/ff/f‡suc˚eded!\n", 
s
);

1257 
	`exô
(1);

1259 if(
	`mkdú
("dd/xx/ff") == 0){

1260 
	`¥ötf
("%s: mkdú dd/xx/f‡suc˚eded!\n", 
s
);

1261 
	`exô
(1);

1263 if(
	`mkdú
("dd/dd/ffff") == 0){

1264 
	`¥ötf
("%s: mkdú dd/dd/fff‡suc˚eded!\n", 
s
);

1265 
	`exô
(1);

1267 if(
	`u∆ök
("dd/xx/ff") == 0){

1268 
	`¥ötf
("%s: u∆ök dd/xx/f‡suc˚eded!\n", 
s
);

1269 
	`exô
(1);

1271 if(
	`u∆ök
("dd/ff/ff") == 0){

1272 
	`¥ötf
("%s: u∆ök dd/ff/f‡suc˚eded!\n", 
s
);

1273 
	`exô
(1);

1275 if(
	`chdú
("dd/ff") == 0){

1276 
	`¥ötf
("%s: chdú dd/f‡suc˚eded!\n", 
s
);

1277 
	`exô
(1);

1279 if(
	`chdú
("dd/xx") == 0){

1280 
	`¥ötf
("%s: chdú dd/xx suc˚eded!\n", 
s
);

1281 
	`exô
(1);

1284 if(
	`u∆ök
("dd/dd/ffff") != 0){

1285 
	`¥ötf
("%s: u∆ök dd/dd/f‡Áûed\n", 
s
);

1286 
	`exô
(1);

1288 if(
	`u∆ök
("dd/ff") != 0){

1289 
	`¥ötf
("%s: u∆ök dd/f‡Áûed\n", 
s
);

1290 
	`exô
(1);

1292 if(
	`u∆ök
("dd") == 0){

1293 
	`¥ötf
("%s: u∆ökÇ⁄-em±y dd suc˚eded!\n", 
s
);

1294 
	`exô
(1);

1296 if(
	`u∆ök
("dd/dd") < 0){

1297 
	`¥ötf
("%s: u∆ök dd/dd faûed\n", 
s
);

1298 
	`exô
(1);

1300 if(
	`u∆ök
("dd") < 0){

1301 
	`¥ötf
("%s: u∆ök dd faûed\n", 
s
);

1302 
	`exô
(1);

1304 
	}
}

1308 
	$bigwrôe
(*
s
)

1310 
fd
, 
sz
;

1312 
	`u∆ök
("bigwrite");

1313 
sz
 = 499; sz < (
MAXOPBLOCKS
+2)*
BSIZE
; sz += 471){

1314 
fd
 = 
	`›í
("bigwrôe", 
O_CREATE
 | 
O_RDWR
);

1315 if(
fd
 < 0){

1316 
	`¥ötf
("%s: c™nŸ cª©êbigwrôe\n", 
s
);

1317 
	`exô
(1);

1319 
i
;

1320 
i
 = 0; i < 2; i++){

1321 
cc
 = 
	`wrôe
(
fd
, 
buf
, 
sz
);

1322 if(
cc
 !
sz
){

1323 
	`¥ötf
("%s: wrôe(%dËªà%d\n", 
s
, 
sz
, 
cc
);

1324 
	`exô
(1);

1327 
	`˛o£
(
fd
);

1328 
	`u∆ök
("bigwrite");

1330 
	}
}

1333 
	$bigfûe
(*
s
)

1335 íum { 
N
 = 20, 
SZ
=600 };

1336 
fd
, 
i
, 
tŸÆ
, 
cc
;

1338 
	`u∆ök
("bigfile.test");

1339 
fd
 = 
	`›í
("bigfûe.ã°", 
O_CREATE
 | 
O_RDWR
);

1340 if(
fd
 < 0){

1341 
	`¥ötf
("%s: c™nŸ cª©êbigfûe", 
s
);

1342 
	`exô
(1);

1344 
i
 = 0; i < 
N
; i++){

1345 
	`mem£t
(
buf
, 
i
, 
SZ
);

1346 if(
	`wrôe
(
fd
, 
buf
, 
SZ
) != SZ){

1347 
	`¥ötf
("%s: wrôêbigfûêÁûed\n", 
s
);

1348 
	`exô
(1);

1351 
	`˛o£
(
fd
);

1353 
fd
 = 
	`›í
("bigfile.test", 0);

1354 if(
fd
 < 0){

1355 
	`¥ötf
("%s: c™nŸ o≥¿bigfûe\n", 
s
);

1356 
	`exô
(1);

1358 
tŸÆ
 = 0;

1359 
i
 = 0; ; i++){

1360 
cc
 = 
	`ªad
(
fd
, 
buf
, 
SZ
/2);

1361 if(
cc
 < 0){

1362 
	`¥ötf
("%s:Ñód bigfûêÁûed\n", 
s
);

1363 
	`exô
(1);

1365 if(
cc
 == 0)

1367 if(
cc
 !
SZ
/2){

1368 
	`¥ötf
("%s: sh‹àªad bigfûe\n", 
s
);

1369 
	`exô
(1);

1371 if(
buf
[0] !
i
/2 || buf[
SZ
/2-1] != i/2){

1372 
	`¥ötf
("%s:Ñód bigfûêwr⁄g d©a\n", 
s
);

1373 
	`exô
(1);

1375 
tŸÆ
 +
cc
;

1377 
	`˛o£
(
fd
);

1378 if(
tŸÆ
 !
N
*
SZ
){

1379 
	`¥ötf
("%s:Ñód bigfûêwr⁄gÅŸÆ\n", 
s
);

1380 
	`exô
(1);

1382 
	`u∆ök
("bigfile.test");

1383 
	}
}

1386 
	$fouπìn
(*
s
)

1388 
fd
;

1392 if(
	`mkdú
("12345678901234") != 0){

1393 
	`¥ötf
("%s: mkdú 12345678901234 faûed\n", 
s
);

1394 
	`exô
(1);

1396 if(
	`mkdú
("12345678901234/123456789012345") != 0){

1397 
	`¥ötf
("%s: mkdú 12345678901234/123456789012345 faûed\n", 
s
);

1398 
	`exô
(1);

1400 
fd
 = 
	`›í
("123456789012345/123456789012345/123456789012345", 
O_CREATE
);

1401 if(
fd
 < 0){

1402 
	`¥ötf
("%s: cª©ê123456789012345/123456789012345/123456789012345 faûed\n", 
s
);

1403 
	`exô
(1);

1405 
	`˛o£
(
fd
);

1406 
fd
 = 
	`›í
("12345678901234/12345678901234/12345678901234", 0);

1407 if(
fd
 < 0){

1408 
	`¥ötf
("%s: o≥¿12345678901234/12345678901234/12345678901234 faûed\n", 
s
);

1409 
	`exô
(1);

1411 
	`˛o£
(
fd
);

1413 if(
	`mkdú
("12345678901234/12345678901234") == 0){

1414 
	`¥ötf
("%s: mkdú 12345678901234/12345678901234 suc˚eded!\n", 
s
);

1415 
	`exô
(1);

1417 if(
	`mkdú
("123456789012345/12345678901234") == 0){

1418 
	`¥ötf
("%s: mkdú 12345678901234/123456789012345 suc˚eded!\n", 
s
);

1419 
	`exô
(1);

1421 
	}
}

1424 
	$rmdŸ
(*
s
)

1426 if(
	`mkdú
("dots") != 0){

1427 
	`¥ötf
("%s: mkdú dŸ†Áûed\n", 
s
);

1428 
	`exô
(1);

1430 if(
	`chdú
("dots") != 0){

1431 
	`¥ötf
("%s: chdú dŸ†Áûed\n", 
s
);

1432 
	`exô
(1);

1434 if(
	`u∆ök
(".") == 0){

1435 
	`¥ötf
("%s:Ñm . w‹ked!\n", 
s
);

1436 
	`exô
(1);

1438 if(
	`u∆ök
("..") == 0){

1439 
	`¥ötf
("%s:Ñm .. w‹ked!\n", 
s
);

1440 
	`exô
(1);

1442 if(
	`chdú
("/") != 0){

1443 
	`¥ötf
("%s: chdú / faûed\n", 
s
);

1444 
	`exô
(1);

1446 if(
	`u∆ök
("dots/.") == 0){

1447 
	`¥ötf
("%s: u∆ök dŸs/. w‹ked!\n", 
s
);

1448 
	`exô
(1);

1450 if(
	`u∆ök
("dots/..") == 0){

1451 
	`¥ötf
("%s: u∆ök dŸs/.. w‹ked!\n", 
s
);

1452 
	`exô
(1);

1454 if(
	`u∆ök
("dots") != 0){

1455 
	`¥ötf
("%s: u∆ök dŸ†Áûed!\n", 
s
);

1456 
	`exô
(1);

1458 
	}
}

1461 
	$dúfûe
(*
s
)

1463 
fd
;

1465 
fd
 = 
	`›í
("dúfûe", 
O_CREATE
);

1466 if(
fd
 < 0){

1467 
	`¥ötf
("%s: cª©êdúfûêÁûed\n", 
s
);

1468 
	`exô
(1);

1470 
	`˛o£
(
fd
);

1471 if(
	`chdú
("dirfile") == 0){

1472 
	`¥ötf
("%s: chdú dúfûêsuc˚eded!\n", 
s
);

1473 
	`exô
(1);

1475 
fd
 = 
	`›í
("dirfile/xx", 0);

1476 if(
fd
 >= 0){

1477 
	`¥ötf
("%s: cª©êdúfûe/xx suc˚eded!\n", 
s
);

1478 
	`exô
(1);

1480 
fd
 = 
	`›í
("dúfûe/xx", 
O_CREATE
);

1481 if(
fd
 >= 0){

1482 
	`¥ötf
("%s: cª©êdúfûe/xx suc˚eded!\n", 
s
);

1483 
	`exô
(1);

1485 if(
	`mkdú
("dirfile/xx") == 0){

1486 
	`¥ötf
("%s: mkdú dúfûe/xx suc˚eded!\n", 
s
);

1487 
	`exô
(1);

1489 if(
	`u∆ök
("dirfile/xx") == 0){

1490 
	`¥ötf
("%s: u∆ök dúfûe/xx suc˚eded!\n", 
s
);

1491 
	`exô
(1);

1493 if(
	`lök
("README", "dirfile/xx") == 0){

1494 
	`¥ötf
("%s:ÜökÅÿdúfûe/xx suc˚eded!\n", 
s
);

1495 
	`exô
(1);

1497 if(
	`u∆ök
("dirfile") != 0){

1498 
	`¥ötf
("%s: u∆ök dúfûêÁûed!\n", 
s
);

1499 
	`exô
(1);

1502 
fd
 = 
	`›í
(".", 
O_RDWR
);

1503 if(
fd
 >= 0){

1504 
	`¥ötf
("%s: o≥¿. f‹ wrôög suc˚eded!\n", 
s
);

1505 
	`exô
(1);

1507 
fd
 = 
	`›í
(".", 0);

1508 if(
	`wrôe
(
fd
, "x", 1) > 0){

1509 
	`¥ötf
("%s: wrôê. suc˚eded!\n", 
s
);

1510 
	`exô
(1);

1512 
	`˛o£
(
fd
);

1513 
	}
}

1517 
	$úef
(*
s
)

1519 
i
, 
fd
;

1521 
i
 = 0; i < 
NINODE
 + 1; i++){

1522 if(
	`mkdú
("irefd") != 0){

1523 
	`¥ötf
("%s: mkdú iªfd faûed\n", 
s
);

1524 
	`exô
(1);

1526 if(
	`chdú
("irefd") != 0){

1527 
	`¥ötf
("%s: chdú iªfd faûed\n", 
s
);

1528 
	`exô
(1);

1531 
	`mkdú
("");

1532 
	`lök
("README", "");

1533 
fd
 = 
	`›í
("", 
O_CREATE
);

1534 if(
fd
 >= 0)

1535 
	`˛o£
(
fd
);

1536 
fd
 = 
	`›í
("xx", 
O_CREATE
);

1537 if(
fd
 >= 0)

1538 
	`˛o£
(
fd
);

1539 
	`u∆ök
("xx");

1542 
	`chdú
("/");

1543 
	}
}

1549 
	$f‹kã°
(*
s
)

1551 íum{ 
N
 = 1000 };

1552 
n
, 
pid
;

1554 
n
=0;Ç<
N
;Ç++){

1555 
pid
 = 
	`f‹k
();

1556 if(
pid
 < 0)

1558 if(
pid
 == 0)

1559 
	`exô
(0);

1562 i‡(
n
 == 0) {

1563 
	`¥ötf
("%s:Çÿf‹káàÆl!\n", 
s
);

1564 
	`exô
(1);

1567 if(
n
 =
N
){

1568 
	`¥ötf
("%s: f‹k cœimedÅÿw‹k 1000Åimes!\n", 
s
);

1569 
	`exô
(1);

1572 ; 
n
 > 0;Ç--){

1573 if(
	`waô
(0) < 0){

1574 
	`¥ötf
("%s: waô st›≥dÉ¨ly\n", 
s
);

1575 
	`exô
(1);

1579 if(
	`waô
(0) != -1){

1580 
	`¥ötf
("%s: waô gŸÅoÿm™y\n", 
s
);

1581 
	`exô
(1);

1583 
	}
}

1586 
	$sbrkbasic
(*
s
)

1588 íum { 
TOOMUCH
=1024*1024*1024};

1589 
i
, 
pid
, 
x°©us
;

1590 *
c
, *
a
, *
b
;

1593 
a
 = 
	`sbrk
(
TOOMUCH
);

1594 if(
a
 != (*)0xffffffffffffffffL){

1595 
	`¥ötf
("%s: sbrk(<toomuch>Ëªtu∫ed %p\n", 
a
);

1596 
	`exô
(1);

1600 
a
 = 
	`sbrk
(0);

1601 
i
 = 0; i < 5000; i++){

1602 
b
 = 
	`sbrk
(1);

1603 if(
b
 !
a
){

1604 
	`¥ötf
("%s: sbrkÅe° faûed %d %x %x\n", 
i
, 
a
, 
b
);

1605 
	`exô
(1);

1607 *
b
 = 1;

1608 
a
 = 
b
 + 1;

1610 
pid
 = 
	`f‹k
();

1611 if(
pid
 < 0){

1612 
	`¥ötf
("%s: sbrkÅe° f‹k faûed\n", 
s
);

1613 
	`exô
(1);

1615 
c
 = 
	`sbrk
(1);

1616 
c
 = 
	`sbrk
(1);

1617 if(
c
 !
a
 + 1){

1618 
	`¥ötf
("%s: sbrkÅe° faûedÖo°-f‹k\n", 
s
);

1619 
	`exô
(1);

1621 if(
pid
 == 0)

1622 
	`exô
(0);

1623 
	`waô
(&
x°©us
);

1624 
	`exô
(
x°©us
);

1625 
	}
}

1628 
	$sbrkmuch
(*
s
)

1630 íum { 
BIG
=100*1024*1024 };

1631 *
c
, *
ﬁdbrk
, *
a
, *
œ°addr
, *
p
;

1632 
uöt64
 
amt
;

1634 
ﬁdbrk
 = 
	`sbrk
(0);

1637 
a
 = 
	`sbrk
(0);

1638 
amt
 = 
BIG
 - (
uöt64
)
a
;

1639 
p
 = 
	`sbrk
(
amt
);

1640 i‡(
p
 !
a
) {

1641 
	`¥ötf
("%s: sbrkÅe° faûedÅÿgrow bigáddªs†•a˚;ÉnoughÖhy†mem?\n", 
s
);

1642 
	`exô
(1);

1644 
œ°addr
 = (*Ë(
BIG
-1);

1645 *
œ°addr
 = 99;

1648 
a
 = 
	`sbrk
(0);

1649 
c
 = 
	`sbrk
(-
PGSIZE
);

1650 if(
c
 == (*)0xffffffffffffffffL){

1651 
	`¥ötf
("%s: sbrk couldÇŸ dóŒoˇã\n", 
s
);

1652 
	`exô
(1);

1654 
c
 = 
	`sbrk
(0);

1655 if(
c
 !
a
 - 
PGSIZE
){

1656 
	`¥ötf
("%s: sbrk dóŒoˇti⁄Örodu˚d wr⁄gáddªss,á %x c %x\n", 
a
, 
c
);

1657 
	`exô
(1);

1661 
a
 = 
	`sbrk
(0);

1662 
c
 = 
	`sbrk
(
PGSIZE
);

1663 if(
c
 !
a
 || 
	`sbrk
(0Ë!®+ 
PGSIZE
){

1664 
	`¥ötf
("%s: sbrkÑe-Æloˇti⁄ faûed,á %x c %x\n", 
a
, 
c
);

1665 
	`exô
(1);

1667 if(*
œ°addr
 == 99){

1669 
	`¥ötf
("%s: sbrk de-Æloˇti⁄ didn'àªÆly dóŒoˇã\n", 
s
);

1670 
	`exô
(1);

1673 
a
 = 
	`sbrk
(0);

1674 
c
 = 
	`sbrk
(-(sbrk(0Ë- 
ﬁdbrk
));

1675 if(
c
 !
a
){

1676 
	`¥ötf
("%s: sbrk downsizêÁûed,á %x c %x\n", 
a
, 
c
);

1677 
	`exô
(1);

1679 
	}
}

1683 
	$kînmem
(*
s
)

1685 *
a
;

1686 
pid
;

1688 
a
 = (*)(
KERNBASE
);á < (*) (KERNBASE+2000000);á += 50000){

1689 
pid
 = 
	`f‹k
();

1690 if(
pid
 < 0){

1691 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

1692 
	`exô
(1);

1694 if(
pid
 == 0){

1695 
	`¥ötf
("%s: o›†couldÑód %x = %x\n", 
a
, *a);

1696 
	`exô
(1);

1698 
x°©us
;

1699 
	`waô
(&
x°©us
);

1700 if(
x°©us
 != -1)

1701 
	`exô
(1);

1703 
	}
}

1708 
	$sbrkÁû
(*
s
)

1710 íum { 
BIG
=100*1024*1024 };

1711 
i
, 
x°©us
;

1712 
fds
[2];

1713 
s¸©ch
;

1714 *
c
, *
a
;

1715 
pids
[10];

1716 
pid
;

1718 if(
	`pùe
(
fds
) != 0){

1719 
	`¥ötf
("%s:Öùe(ËÁûed\n", 
s
);

1720 
	`exô
(1);

1722 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1723 if((
pids
[
i
] = 
	`f‹k
()) == 0){

1725 
	`sbrk
(
BIG
 - (
uöt64
)sbrk(0));

1726 
	`wrôe
(
fds
[1], "x", 1);

1728 ;;Ë
	`¶ìp
(1000);

1730 if(
pids
[
i
] != -1)

1731 
	`ªad
(
fds
[0], &
s¸©ch
, 1);

1736 
c
 = 
	`sbrk
(
PGSIZE
);

1737 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1738 if(
pids
[
i
] == -1)

1740 
	`kûl
(
pids
[
i
]);

1741 
	`waô
(0);

1743 if(
c
 == (*)0xffffffffffffffffL){

1744 
	`¥ötf
("%s: faûed sbrkÜóked mem‹y\n", 
s
);

1745 
	`exô
(1);

1749 
pid
 = 
	`f‹k
();

1750 if(
pid
 < 0){

1751 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

1752 
	`exô
(1);

1754 if(
pid
 == 0){

1756 
a
 = 
	`sbrk
(0);

1757 
	`sbrk
(10*
BIG
);

1758 
n
 = 0;

1759 
i
 = 0; i < 10*
BIG
; i +
PGSIZE
) {

1760 
n
 +*(
a
+
i
);

1762 
	`¥ötf
("%s:áŒoˇãáÜŸ o‡mem‹y suc˚eded %d\n", 
n
);

1763 
	`exô
(1);

1765 
	`waô
(&
x°©us
);

1766 if(
x°©us
 != -1)

1767 
	`exô
(1);

1768 
	}
}

1773 
	$sbrk¨g
(*
s
)

1775 *
a
;

1776 
fd
, 
n
;

1778 
a
 = 
	`sbrk
(
PGSIZE
);

1779 
fd
 = 
	`›í
("sbrk", 
O_CREATE
|
O_WRONLY
);

1780 
	`u∆ök
("sbrk");

1781 if(
fd
 < 0) {

1782 
	`¥ötf
("%s: o≥¿sbrk faûed\n", 
s
);

1783 
	`exô
(1);

1785 i‡((
n
 = 
	`wrôe
(
fd
, 
a
, 
PGSIZE
)) < 0) {

1786 
	`¥ötf
("%s: wrôêsbrk faûed\n", 
s
);

1787 
	`exô
(1);

1789 
	`˛o£
(
fd
);

1792 
a
 = 
	`sbrk
(
PGSIZE
);

1793 if(
	`pùe
((*Ë
a
) != 0){

1794 
	`¥ötf
("%s:Öùe(ËÁûed\n", 
s
);

1795 
	`exô
(1);

1797 
	}
}

1800 
	$vÆid©ëe°
(*
s
)

1802 
hi
;

1803 
uöt64
 
p
;

1805 
hi
 = 1100*1024;

1806 
p
 = 0;Ö <(
uöt
)
hi
;Ö +
PGSIZE
){

1808 if(
	`lök
("nosuchfûe", (*)
p
) != -1){

1809 
	`¥ötf
("%s:Üök shouldÇŸ suc˚ed\n", 
s
);

1810 
	`exô
(1);

1813 
	}
}

1816 
	gunöô
[10000];

1818 
	$bs°e°
(*
s
)

1820 
i
;

1822 
i
 = 0; i < (
unöô
); i++){

1823 if(
unöô
[
i
] != '\0'){

1824 
	`¥ötf
("%s: bs†ã° faûed\n", 
s
);

1825 
	`exô
(1);

1828 
	}
}

1834 
	$big¨gã°
(*
s
)

1836 
pid
, 
fd
, 
x°©us
;

1838 
	`u∆ök
("bigarg-ok");

1839 
pid
 = 
	`f‹k
();

1840 if(
pid
 == 0){

1841 *
¨gs
[
MAXARG
];

1842 
i
;

1843 
i
 = 0; i < 
MAXARG
-1; i++)

1844 
¨gs
[
i
] = "bigargsÅest: failed\n ";

1845 
¨gs
[
MAXARG
-1] = 0;

1846 
	`exec
("echo", 
¨gs
);

1847 
fd
 = 
	`›í
("big¨g-ok", 
O_CREATE
);

1848 
	`˛o£
(
fd
);

1849 
	`exô
(0);

1850 } if(
pid
 < 0){

1851 
	`¥ötf
("%s: big¨gã°: f‹k faûed\n", 
s
);

1852 
	`exô
(1);

1855 
	`waô
(&
x°©us
);

1856 if(
x°©us
 != 0)

1857 
	`exô
(
x°©us
);

1858 
fd
 = 
	`›í
("bigarg-ok", 0);

1859 if(
fd
 < 0){

1860 
	`¥ötf
("%s: big¨gÅe° faûed!\n", 
s
);

1861 
	`exô
(1);

1863 
	`˛o£
(
fd
);

1864 
	}
}

1869 
	$fsfuŒ
()

1871 
nfûes
;

1872 
fsblocks
 = 0;

1874 
	`¥ötf
("fsfullÅest\n");

1876 
nfûes
 = 0; ;Çfiles++){

1877 
«me
[64];

1878 
«me
[0] = 'f';

1879 
«me
[1] = '0' + 
nfûes
 / 1000;

1880 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1881 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1882 
«me
[4] = '0' + (
nfûes
 % 10);

1883 
«me
[5] = '\0';

1884 
	`¥ötf
("%s: wrôög %s\n", 
«me
);

1885 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

1886 if(
fd
 < 0){

1887 
	`¥ötf
("%s: o≥¿%†Áûed\n", 
«me
);

1890 
tŸÆ
 = 0;

1892 
cc
 = 
	`wrôe
(
fd
, 
buf
, 
BSIZE
);

1893 if(
cc
 < 
BSIZE
)

1895 
tŸÆ
 +
cc
;

1896 
fsblocks
++;

1898 
	`¥ötf
("%s: wrŸê%d byãs\n", 
tŸÆ
);

1899 
	`˛o£
(
fd
);

1900 if(
tŸÆ
 == 0)

1904 
nfûes
 >= 0){

1905 
«me
[64];

1906 
«me
[0] = 'f';

1907 
«me
[1] = '0' + 
nfûes
 / 1000;

1908 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1909 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1910 
«me
[4] = '0' + (
nfûes
 % 10);

1911 
«me
[5] = '\0';

1912 
	`u∆ök
(
«me
);

1913 
nfûes
--;

1916 
	`¥ötf
("fsfullÅest finished\n");

1917 
	}
}

1919 
	$¨g±e°
(*
s
)

1921 
fd
;

1922 
fd
 = 
	`›í
("öô", 
O_RDONLY
);

1923 i‡(
fd
 < 0) {

1924 
	`¥ötf
("%s: o≥¿Áûed\n", 
s
);

1925 
	`exô
(1);

1927 
	`ªad
(
fd
, 
	`sbrk
(0) - 1, -1);

1928 
	`˛o£
(
fd
);

1929 
	}
}

1931 
	gønd°©e
 = 1;

1933 
	$ønd
()

1935 
ønd°©e
 =Ñandstate * 1664525 + 1013904223;

1936  
ønd°©e
;

1937 
	}
}

1942 
	$°ackã°
(*
s
)

1944 
pid
;

1945 
x°©us
;

1947 
pid
 = 
	`f‹k
();

1948 if(
pid
 == 0) {

1949 *
•
 = (*Ë
	`r_•
();

1950 
•
 -
PGSIZE
;

1952 
	`¥ötf
("%s: sèckã°:Ñód bñow sèck %p\n", *
•
);

1953 
	`exô
(1);

1954 } if(
pid
 < 0){

1955 
	`¥ötf
("%s: f‹k faûed\n", 
s
);

1956 
	`exô
(1);

1958 
	`waô
(&
x°©us
);

1959 if(
x°©us
 == -1)

1960 
	`exô
(0);

1962 
	`exô
(
x°©us
);

1963 
	}
}

1969 
	$pgbug
(*
s
)

1971 *
¨gv
[1];

1972 
¨gv
[0] = 0;

1973 
	`exec
((*)0xóeb0b5b00002f5e, 
¨gv
);

1975 
	`pùe
((*)0xeaeb0b5b00002f5e);

1977 
	`exô
(0);

1978 
	}
}

1984 
	$sbrkbugs
(*
s
)

1986 
pid
 = 
	`f‹k
();

1987 if(
pid
 < 0){

1988 
	`¥ötf
("fork failed\n");

1989 
	`exô
(1);

1991 if(
pid
 == 0){

1992 
sz
 = (
uöt64
Ë
	`sbrk
(0);

1996 
	`sbrk
(-
sz
);

1998 
	`exô
(0);

2000 
	`waô
(0);

2002 
pid
 = 
	`f‹k
();

2003 if(
pid
 < 0){

2004 
	`¥ötf
("fork failed\n");

2005 
	`exô
(1);

2007 if(
pid
 == 0){

2008 
sz
 = (
uöt64
Ë
	`sbrk
(0);

2012 
	`sbrk
(-(
sz
 - 3500));

2013 
	`exô
(0);

2015 
	`waô
(0);

2017 
pid
 = 
	`f‹k
();

2018 if(
pid
 < 0){

2019 
	`¥ötf
("fork failed\n");

2020 
	`exô
(1);

2022 if(
pid
 == 0){

2024 
	`sbrk
((10*4096 + 2048Ë- (
uöt64
)sbrk(0));

2029 
	`sbrk
(-10);

2031 
	`exô
(0);

2033 
	`waô
(0);

2035 
	`exô
(0);

2036 
	}
}

2044 
	$badwrôe
(*
s
)

2046 
assumed_‰ì
 = 600;

2048 
	`u∆ök
("junk");

2049 
i
 = 0; i < 
assumed_‰ì
; i++){

2050 
fd
 = 
	`›í
("junk", 
O_CREATE
|
O_WRONLY
);

2051 if(
fd
 < 0){

2052 
	`¥ötf
("open junk failed\n");

2053 
	`exô
(1);

2055 
	`wrôe
(
fd
, (*)0xffffffffffL, 1);

2056 
	`˛o£
(
fd
);

2057 
	`u∆ök
("junk");

2060 
fd
 = 
	`›í
("junk", 
O_CREATE
|
O_WRONLY
);

2061 if(
fd
 < 0){

2062 
	`¥ötf
("open junk failed\n");

2063 
	`exô
(1);

2065 if(
	`wrôe
(
fd
, "x", 1) != 1){

2066 
	`¥ötf
("write failed\n");

2067 
	`exô
(1);

2069 
	`˛o£
(
fd
);

2070 
	`u∆ök
("junk");

2072 
	`exô
(0);

2073 
	}
}

2078 
	$bad¨g
(*
s
)

2080 
i
 = 0; i < 50000; i++){

2081 *
¨gv
[2];

2082 
¨gv
[0] = (*)0xffffffff;

2083 
¨gv
[1] = 0;

2084 
	`exec
("echo", 
¨gv
);

2087 
	`exô
(0);

2088 
	}
}

2093 
run
(
f
(*), *
s
) {

2094 
	gpid
;

2095 
	gx°©us
;

2097 
¥ötf
("ã° %s: ", 
s
);

2098 if((
	gpid
 = 
f‹k
()) < 0) {

2099 
¥ötf
("runtest: forkÉrror\n");

2100 
exô
(1);

2102 if(
	gpid
 == 0) {

2103 
f
(
s
);

2104 
exô
(0);

2106 
waô
(&
x°©us
);

2107 if(
	gx°©us
 != 0)

2108 
¥ötf
("FAILED\n", 
s
);

2110 
¥ötf
("OK\n", 
s
);

2111  
	gx°©us
 == 0;

2116 
	$maö
(
¨gc
, *
¨gv
[])

2118 *
n
 = 0;

2119 if(
¨gc
 > 1) {

2120 
n
 = 
¨gv
[1];

2123 
	sã°
 {

2124 (*
f
)(*);

2125 *
s
;

2126 } 
ã°s
[] = {

2127 {
ª∑ª¡2
, "reparent2"},

2128 {
pgbug
, "pgbug" },

2129 {
sbrkbugs
, "sbrkbugs" },

2131 {
bad¨g
, "badarg" },

2132 {
ª∑ª¡
, "reparent" },

2133 {
twochûdªn
, "twochildren"},

2134 {
f‹kf‹k
, "forkfork"},

2135 {
f‹kf‹kf‹k
, "forkforkfork"},

2136 {
¨g±e°
, "argptest"},

2137 {
¸óãdñëe
, "createdelete"},

2138 {
löku∆ök
, "linkunlink"},

2139 {
lökã°
, "linktest"},

2140 {
u∆ökªad
, "unlinkread"},

2141 {
c⁄¸óã
, "concreate"},

2142 {
subdú
, "subdir"},

2143 {
fourfûes
, "fourfiles"},

2144 {
sh¨edfd
, "sharedfd"},

2145 {
exe˘e°
, "exectest"},

2146 {
big¨gã°
, "bigargtest"},

2147 {
bigwrôe
, "bigwrite"},

2148 {
bs°e°
, "bsstest"},

2149 {
sbrkbasic
, "sbrkbasic"},

2150 {
sbrkmuch
, "sbrkmuch"},

2151 {
kînmem
, "kernmem"},

2152 {
sbrkÁû
, "sbrkfail"},

2153 {
sbrk¨g
, "sbrkarg"},

2154 {
vÆid©ëe°
, "validatetest"},

2155 {
°ackã°
, "stacktest"},

2156 {
›íã°
, "opentest"},

2157 {
wrôëe°
, "writetest"},

2158 {
wrôebig
, "writebig"},

2159 {
¸óãã°
, "createtest"},

2160 {
›íùuâe°
, "openiput"},

2161 {
exôùuâe°
, "exitiput"},

2162 {
ùuâe°
, "iput"},

2163 {
mem
, "mem"},

2164 {
pùe1
, "pipe1"},

2165 {
¥ìm±
, "preempt"},

2166 {
exôwaô
, "exitwait"},

2167 {
rmdŸ
, "rmdot"},

2168 {
fouπìn
, "fourteen"},

2169 {
bigfûe
, "bigfile"},

2170 {
dúfûe
, "dirfile"},

2171 {
úef
, "iref"},

2172 {
f‹kã°
, "forktest"},

2173 {
bigdú
, "bigdir"},

2177 
	`¥ötf
("usertests starting\n");

2179 if(
	`›í
("usertests.ran", 0) >= 0){

2180 
	`¥ötf
("alreadyÑan userÅests --Ñebuild fs.img (rm fs.img; make fs.img)\n");

2181 
	`exô
(1);

2183 
	`˛o£
(
	`›í
("u£πe°s.øn", 
O_CREATE
));

2185 
Áû
 = 0;

2186 
ã°
 *
t
 = 
ã°s
;Å->
s
 != 0;Å++) {

2187 if((
n
 =0Ë|| 
	`°rcmp
(
t
->
s
,Ç) == 0) {

2188 if(!
	`run
(
t
->
f
,Å->
s
))

2189 
Áû
 = 1;

2192 if(!
Áû
)

2193 
	`¥ötf
("ALL TESTS PASSED\n");

2195 
	`¥ötf
("SOME TESTS FAILED\n");

2196 
	`exô
(1);

2197 
	}
}

	@user/uthread.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

6 
	#FREE
 0x0

	)

7 
	#RUNNING
 0x1

	)

8 
	#RUNNABLE
 0x2

	)

10 
	#STACK_SIZE
 8192

	)

11 
	#MAX_THREAD
 4

	)

13 
	sthªad
 {

14 
	m°ack
[
STACK_SIZE
];

15 
	m°©e
;

17 
thªad
 
	gÆl_thªad
[
MAX_THREAD
];

18 
thªad
 *
	gcuºít_thªad
;

19 
thªad_swôch
(
uöt64
, uint64);

22 
	$thªad_öô
()

29 
cuºít_thªad
 = &
Æl_thªad
[0];

30 
cuºít_thªad
->
°©e
 = 
RUNNING
;

31 
	}
}

34 
	$thªad_scheduÀ
()

36 
thªad
 *
t
, *
√xt_thªad
;

39 
√xt_thªad
 = 0;

40 
t
 = 
cuºít_thªad
 + 1;

41 
i
 = 0; i < 
MAX_THREAD
; i++){

42 if(
t
 >
Æl_thªad
 + 
MAX_THREAD
)

43 
t
 = 
Æl_thªad
;

44 if(
t
->
°©e
 =
RUNNABLE
) {

45 
√xt_thªad
 = 
t
;

48 
t
 =Å + 1;

51 i‡(
√xt_thªad
 == 0) {

52 
	`¥ötf
("thread_schedule:ÇoÑunnableÅhreads\n");

53 
	`exô
(-1);

56 i‡(
cuºít_thªad
 !
√xt_thªad
) {

57 
√xt_thªad
->
°©e
 = 
RUNNING
;

58 
t
 = 
cuºít_thªad
;

59 
cuºít_thªad
 = 
√xt_thªad
;

65 
√xt_thªad
 = 0;

66 
	}
}

69 
	$thªad_¸óã
((*
func
)())

71 
thªad
 *
t
;

73 
t
 = 
Æl_thªad
;Å <áŒ_thªad + 
MAX_THREAD
;Å++) {

74 i‡(
t
->
°©e
 =
FREE
) ;

76 
t
->
°©e
 = 
RUNNABLE
;

78 
	}
}

81 
	$thªad_yõld
()

83 
cuºít_thªad
->
°©e
 = 
RUNNABLE
;

84 
	`thªad_scheduÀ
();

85 
	}
}

87 vﬁ©ûê
	ga_°¨ãd
, 
	gb_°¨ãd
, 
	gc_°¨ãd
;

88 vﬁ©ûê
	ga_n
, 
	gb_n
, 
	gc_n
;

91 
	$thªad_a
()

93 
i
;

94 
	`¥ötf
("thread_a started\n");

95 
a_°¨ãd
 = 1;

96 
b_°¨ãd
 =0 || 
c_°¨ãd
 == 0)

97 
	`thªad_yõld
();

99 
i
 = 0; i < 100; i++) {

100 
	`¥ötf
("thªad_®%d\n", 
i
);

101 
a_n
 += 1;

102 
	`thªad_yõld
();

104 
	`¥ötf
("thªad_a:Éxôá·î %d\n", 
a_n
);

106 
cuºít_thªad
->
°©e
 = 
FREE
;

107 
	`thªad_scheduÀ
();

108 
	}
}

111 
	$thªad_b
()

113 
i
;

114 
	`¥ötf
("thread_b started\n");

115 
b_°¨ãd
 = 1;

116 
a_°¨ãd
 =0 || 
c_°¨ãd
 == 0)

117 
	`thªad_yõld
();

119 
i
 = 0; i < 100; i++) {

120 
	`¥ötf
("thªad_b %d\n", 
i
);

121 
b_n
 += 1;

122 
	`thªad_yõld
();

124 
	`¥ötf
("thªad_b:Éxôá·î %d\n", 
b_n
);

126 
cuºít_thªad
->
°©e
 = 
FREE
;

127 
	`thªad_scheduÀ
();

128 
	}
}

131 
	$thªad_c
()

133 
i
;

134 
	`¥ötf
("thread_c started\n");

135 
c_°¨ãd
 = 1;

136 
a_°¨ãd
 =0 || 
b_°¨ãd
 == 0)

137 
	`thªad_yõld
();

139 
i
 = 0; i < 100; i++) {

140 
	`¥ötf
("thªad_¯%d\n", 
i
);

141 
c_n
 += 1;

142 
	`thªad_yõld
();

144 
	`¥ötf
("thªad_c:Éxôá·î %d\n", 
c_n
);

146 
cuºít_thªad
->
°©e
 = 
FREE
;

147 
	`thªad_scheduÀ
();

148 
	}
}

151 
	$maö
(
¨gc
, *
¨gv
[])

153 
a_°¨ãd
 = 
b_°¨ãd
 = 
c_°¨ãd
 = 0;

154 
a_n
 = 
b_n
 = 
c_n
 = 0;

155 
	`thªad_öô
();

156 
	`thªad_¸óã
(
thªad_a
);

157 
	`thªad_¸óã
(
thªad_b
);

158 
	`thªad_¸óã
(
thªad_c
);

159 
	`thªad_scheduÀ
();

160 
	`exô
(0);

161 
	}
}

	@user/wc.c

1 
	~"kî√l/ty≥s.h
"

2 
	~"kî√l/°©.h
"

3 
	~"u£r/u£r.h
"

5 
	gbuf
[512];

8 
	$wc
(
fd
, *
«me
)

10 
i
, 
n
;

11 
l
, 
w
, 
c
, 
öw‹d
;

13 
l
 = 
w
 = 
c
 = 0;

14 
öw‹d
 = 0;

15 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

16 
i
=0; i<
n
; i++){

17 
c
++;

18 if(
buf
[
i
] == '\n')

19 
l
++;

20 if(
	`°rchr
(" \r\t\n\v", 
buf
[
i
]))

21 
öw‹d
 = 0;

22 if(!
öw‹d
){

23 
w
++;

24 
öw‹d
 = 1;

28 if(
n
 < 0){

29 
	`¥ötf
("wc:ÑeadÉrror\n");

30 
	`exô
(1);

32 
	`¥ötf
("%d %d %d %s\n", 
l
, 
w
, 
c
, 
«me
);

33 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
fd
, 
i
;

40 if(
¨gc
 <= 1){

41 
	`wc
(0, "");

42 
	`exô
(0);

45 
i
 = 1; i < 
¨gc
; i++){

46 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

47 
	`¥ötf
("wc: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

48 
	`exô
(1);

50 
	`wc
(
fd
, 
¨gv
[
i
]);

51 
	`˛o£
(
fd
);

53 
	`exô
(0);

54 
	}
}

	@user/zombie.c

4 
	~"kî√l/ty≥s.h
"

5 
	~"kî√l/°©.h
"

6 
	~"u£r/u£r.h
"

9 
	$maö
()

11 if(
	`f‹k
() > 0)

12 
	`¶ìp
(5);

13 
	`exô
(0);

14 
	}
}

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_IAMCU
 6

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

195 
	#EM_SPU
 23

	)

197 
	#EM_V800
 36

	)

198 
	#EM_FR20
 37

	)

199 
	#EM_RH32
 38

	)

200 
	#EM_RCE
 39

	)

201 
	#EM_ARM
 40

	)

202 
	#EM_FAKE_ALPHA
 41

	)

203 
	#EM_SH
 42

	)

204 
	#EM_SPARCV9
 43

	)

205 
	#EM_TRICORE
 44

	)

206 
	#EM_ARC
 45

	)

207 
	#EM_H8_300
 46

	)

208 
	#EM_H8_300H
 47

	)

209 
	#EM_H8S
 48

	)

210 
	#EM_H8_500
 49

	)

211 
	#EM_IA_64
 50

	)

212 
	#EM_MIPS_X
 51

	)

213 
	#EM_COLDFIRE
 52

	)

214 
	#EM_68HC12
 53

	)

215 
	#EM_MMA
 54

	)

216 
	#EM_PCP
 55

	)

217 
	#EM_NCPU
 56

	)

218 
	#EM_NDR1
 57

	)

219 
	#EM_STARCORE
 58

	)

220 
	#EM_ME16
 59

	)

221 
	#EM_ST100
 60

	)

222 
	#EM_TINYJ
 61

	)

223 
	#EM_X86_64
 62

	)

224 
	#EM_PDSP
 63

	)

225 
	#EM_PDP10
 64

	)

226 
	#EM_PDP11
 65

	)

227 
	#EM_FX66
 66

	)

228 
	#EM_ST9PLUS
 67

	)

229 
	#EM_ST7
 68

	)

230 
	#EM_68HC16
 69

	)

231 
	#EM_68HC11
 70

	)

232 
	#EM_68HC08
 71

	)

233 
	#EM_68HC05
 72

	)

234 
	#EM_SVX
 73

	)

235 
	#EM_ST19
 74

	)

236 
	#EM_VAX
 75

	)

237 
	#EM_CRIS
 76

	)

238 
	#EM_JAVELIN
 77

	)

239 
	#EM_FIREPATH
 78

	)

240 
	#EM_ZSP
 79

	)

241 
	#EM_MMIX
 80

	)

242 
	#EM_HUANY
 81

	)

243 
	#EM_PRISM
 82

	)

244 
	#EM_AVR
 83

	)

245 
	#EM_FR30
 84

	)

246 
	#EM_D10V
 85

	)

247 
	#EM_D30V
 86

	)

248 
	#EM_V850
 87

	)

249 
	#EM_M32R
 88

	)

250 
	#EM_MN10300
 89

	)

251 
	#EM_MN10200
 90

	)

252 
	#EM_PJ
 91

	)

253 
	#EM_OPENRISC
 92

	)

254 
	#EM_ARC_COMPACT
 93

	)

255 
	#EM_XTENSA
 94

	)

256 
	#EM_VIDEOCORE
 95

	)

257 
	#EM_TMM_GPP
 96

	)

258 
	#EM_NS32K
 97

	)

259 
	#EM_TPC
 98

	)

260 
	#EM_SNP1K
 99

	)

261 
	#EM_ST200
 100

	)

262 
	#EM_IP2K
 101

	)

263 
	#EM_MAX
 102

	)

264 
	#EM_CR
 103

	)

265 
	#EM_F2MC16
 104

	)

266 
	#EM_MSP430
 105

	)

267 
	#EM_BLACKFIN
 106

	)

268 
	#EM_SE_C33
 107

	)

269 
	#EM_SEP
 108

	)

270 
	#EM_ARCA
 109

	)

271 
	#EM_UNICORE
 110

	)

272 
	#EM_EXCESS
 111

	)

273 
	#EM_DXP
 112

	)

274 
	#EM_ALTERA_NIOS2
 113

	)

275 
	#EM_CRX
 114

	)

276 
	#EM_XGATE
 115

	)

277 
	#EM_C166
 116

	)

278 
	#EM_M16C
 117

	)

279 
	#EM_DSPIC30F
 118

	)

280 
	#EM_CE
 119

	)

281 
	#EM_M32C
 120

	)

283 
	#EM_TSK3000
 131

	)

284 
	#EM_RS08
 132

	)

285 
	#EM_SHARC
 133

	)

286 
	#EM_ECOG2
 134

	)

287 
	#EM_SCORE7
 135

	)

288 
	#EM_DSP24
 136

	)

289 
	#EM_VIDEOCORE3
 137

	)

290 
	#EM_LATTICEMICO32
 138

	)

291 
	#EM_SE_C17
 139

	)

292 
	#EM_TI_C6000
 140

	)

293 
	#EM_TI_C2000
 141

	)

294 
	#EM_TI_C5500
 142

	)

295 
	#EM_TI_ARP32
 143

	)

296 
	#EM_TI_PRU
 144

	)

298 
	#EM_MMDSP_PLUS
 160

	)

299 
	#EM_CYPRESS_M8C
 161

	)

300 
	#EM_R32C
 162

	)

301 
	#EM_TRIMEDIA
 163

	)

302 
	#EM_QDSP6
 164

	)

303 
	#EM_8051
 165

	)

304 
	#EM_STXP7X
 166

	)

305 
	#EM_NDS32
 167

	)

306 
	#EM_ECOG1X
 168

	)

307 
	#EM_MAXQ30
 169

	)

308 
	#EM_XIMO16
 170

	)

309 
	#EM_MANIK
 171

	)

310 
	#EM_CRAYNV2
 172

	)

311 
	#EM_RX
 173

	)

312 
	#EM_METAG
 174

	)

313 
	#EM_MCST_ELBRUS
 175

	)

314 
	#EM_ECOG16
 176

	)

315 
	#EM_CR16
 177

	)

316 
	#EM_ETPU
 178

	)

317 
	#EM_SLE9X
 179

	)

318 
	#EM_L10M
 180

	)

319 
	#EM_K10M
 181

	)

321 
	#EM_AARCH64
 183

	)

323 
	#EM_AVR32
 185

	)

324 
	#EM_STM8
 186

	)

325 
	#EM_TILE64
 187

	)

326 
	#EM_TILEPRO
 188

	)

327 
	#EM_MICROBLAZE
 189

	)

328 
	#EM_CUDA
 190

	)

329 
	#EM_TILEGX
 191

	)

330 
	#EM_CLOUDSHIELD
 192

	)

331 
	#EM_COREA_1ST
 193

	)

332 
	#EM_COREA_2ND
 194

	)

333 
	#EM_ARC_COMPACT2
 195

	)

334 
	#EM_OPEN8
 196

	)

335 
	#EM_RL78
 197

	)

336 
	#EM_VIDEOCORE5
 198

	)

337 
	#EM_78KOR
 199

	)

338 
	#EM_56800EX
 200

	)

339 
	#EM_BA1
 201

	)

340 
	#EM_BA2
 202

	)

341 
	#EM_XCORE
 203

	)

342 
	#EM_MCHP_PIC
 204

	)

344 
	#EM_KM32
 210

	)

345 
	#EM_KMX32
 211

	)

346 
	#EM_EMX16
 212

	)

347 
	#EM_EMX8
 213

	)

348 
	#EM_KVARC
 214

	)

349 
	#EM_CDP
 215

	)

350 
	#EM_COGE
 216

	)

351 
	#EM_COOL
 217

	)

352 
	#EM_NORC
 218

	)

353 
	#EM_CSR_KALIMBA
 219

	)

354 
	#EM_Z80
 220

	)

355 
	#EM_VISIUM
 221

	)

356 
	#EM_FT32
 222

	)

357 
	#EM_MOXIE
 223

	)

358 
	#EM_AMDGPU
 224

	)

360 
	#EM_RISCV
 243

	)

362 
	#EM_BPF
 247

	)

364 
	#EM_NUM
 248

	)

368 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

374 
	#EM_ALPHA
 0x9026

	)

378 
	#EV_NONE
 0

	)

379 
	#EV_CURRENT
 1

	)

380 
	#EV_NUM
 2

	)

386 
Elf32_W‹d
 
	msh_«me
;

387 
Elf32_W‹d
 
	msh_ty≥
;

388 
Elf32_W‹d
 
	msh_Êags
;

389 
Elf32_Addr
 
	msh_addr
;

390 
Elf32_Off
 
	msh_off£t
;

391 
Elf32_W‹d
 
	msh_size
;

392 
Elf32_W‹d
 
	msh_lök
;

393 
Elf32_W‹d
 
	msh_öfo
;

394 
Elf32_W‹d
 
	msh_addølign
;

395 
Elf32_W‹d
 
	msh_ítsize
;

396 } 
	tElf32_Shdr
;

400 
Elf64_W‹d
 
	msh_«me
;

401 
Elf64_W‹d
 
	msh_ty≥
;

402 
Elf64_Xw‹d
 
	msh_Êags
;

403 
Elf64_Addr
 
	msh_addr
;

404 
Elf64_Off
 
	msh_off£t
;

405 
Elf64_Xw‹d
 
	msh_size
;

406 
Elf64_W‹d
 
	msh_lök
;

407 
Elf64_W‹d
 
	msh_öfo
;

408 
Elf64_Xw‹d
 
	msh_addølign
;

409 
Elf64_Xw‹d
 
	msh_ítsize
;

410 } 
	tElf64_Shdr
;

414 
	#SHN_UNDEF
 0

	)

415 
	#SHN_LORESERVE
 0xff00

	)

416 
	#SHN_LOPROC
 0xff00

	)

417 
	#SHN_BEFORE
 0xff00

	)

419 
	#SHN_AFTER
 0xff01

	)

421 
	#SHN_HIPROC
 0xff1‡

	)

422 
	#SHN_LOOS
 0xff20

	)

423 
	#SHN_HIOS
 0xff3‡

	)

424 
	#SHN_ABS
 0xfff1

	)

425 
	#SHN_COMMON
 0xfff2

	)

426 
	#SHN_XINDEX
 0xfff‡

	)

427 
	#SHN_HIRESERVE
 0xfff‡

	)

431 
	#SHT_NULL
 0

	)

432 
	#SHT_PROGBITS
 1

	)

433 
	#SHT_SYMTAB
 2

	)

434 
	#SHT_STRTAB
 3

	)

435 
	#SHT_RELA
 4

	)

436 
	#SHT_HASH
 5

	)

437 
	#SHT_DYNAMIC
 6

	)

438 
	#SHT_NOTE
 7

	)

439 
	#SHT_NOBITS
 8

	)

440 
	#SHT_REL
 9

	)

441 
	#SHT_SHLIB
 10

	)

442 
	#SHT_DYNSYM
 11

	)

443 
	#SHT_INIT_ARRAY
 14

	)

444 
	#SHT_FINI_ARRAY
 15

	)

445 
	#SHT_PREINIT_ARRAY
 16

	)

446 
	#SHT_GROUP
 17

	)

447 
	#SHT_SYMTAB_SHNDX
 18

	)

448 
	#SHT_NUM
 19

	)

449 
	#SHT_LOOS
 0x60000000

	)

450 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

451 
	#SHT_GNU_HASH
 0x6ffffff6

	)

452 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

453 
	#SHT_CHECKSUM
 0x6ffffff8

	)

454 
	#SHT_LOSUNW
 0x6fffffÁ

	)

455 
	#SHT_SUNW_move
 0x6fffffÁ

	)

456 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

457 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

458 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

459 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

460 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

461 
	#SHT_HISUNW
 0x6ffffff‡

	)

462 
	#SHT_HIOS
 0x6ffffff‡

	)

463 
	#SHT_LOPROC
 0x70000000

	)

464 
	#SHT_HIPROC
 0x7ffffff‡

	)

465 
	#SHT_LOUSER
 0x80000000

	)

466 
	#SHT_HIUSER
 0x8ffffff‡

	)

470 
	#SHF_WRITE
 (1 << 0Ë

	)

471 
	#SHF_ALLOC
 (1 << 1Ë

	)

472 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

473 
	#SHF_MERGE
 (1 << 4Ë

	)

474 
	#SHF_STRINGS
 (1 << 5Ë

	)

475 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

476 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

477 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

479 
	#SHF_GROUP
 (1 << 9Ë

	)

480 
	#SHF_TLS
 (1 << 10Ë

	)

481 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

482 
	#SHF_MASKOS
 0x0ff00000

	)

483 
	#SHF_MASKPROC
 0xf0000000

	)

484 
	#SHF_ORDERED
 (1 << 30Ë

	)

486 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

493 
Elf32_W‹d
 
	mch_ty≥
;

494 
Elf32_W‹d
 
	mch_size
;

495 
Elf32_W‹d
 
	mch_addølign
;

496 } 
	tElf32_Chdr
;

500 
Elf64_W‹d
 
	mch_ty≥
;

501 
Elf64_W‹d
 
	mch_ª£rved
;

502 
Elf64_Xw‹d
 
	mch_size
;

503 
Elf64_Xw‹d
 
	mch_addølign
;

504 } 
	tElf64_Chdr
;

507 
	#ELFCOMPRESS_ZLIB
 1

	)

508 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

509 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

510 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

511 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

514 
	#GRP_COMDAT
 0x1

	)

520 
Elf32_W‹d
 
	m°_«me
;

521 
Elf32_Addr
 
	m°_vÆue
;

522 
Elf32_W‹d
 
	m°_size
;

523 
	m°_öfo
;

524 
	m°_Ÿhî
;

525 
Elf32_Se˘i⁄
 
	m°_shndx
;

526 } 
	tElf32_Sym
;

530 
Elf64_W‹d
 
	m°_«me
;

531 
	m°_öfo
;

532 
	m°_Ÿhî
;

533 
Elf64_Se˘i⁄
 
	m°_shndx
;

534 
Elf64_Addr
 
	m°_vÆue
;

535 
Elf64_Xw‹d
 
	m°_size
;

536 } 
	tElf64_Sym
;

543 
Elf32_HÆf
 
	msi_boundto
;

544 
Elf32_HÆf
 
	msi_Êags
;

545 } 
	tElf32_Symöfo
;

549 
Elf64_HÆf
 
	msi_boundto
;

550 
Elf64_HÆf
 
	msi_Êags
;

551 } 
	tElf64_Symöfo
;

554 
	#SYMINFO_BT_SELF
 0xfff‡

	)

555 
	#SYMINFO_BT_PARENT
 0xff„

	)

556 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

559 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

560 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

561 
	#SYMINFO_FLG_COPY
 0x0004

	)

562 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

565 
	#SYMINFO_NONE
 0

	)

566 
	#SYMINFO_CURRENT
 1

	)

567 
	#SYMINFO_NUM
 2

	)

572 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

573 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

574 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

577 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

578 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

579 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

583 
	#STB_LOCAL
 0

	)

584 
	#STB_GLOBAL
 1

	)

585 
	#STB_WEAK
 2

	)

586 
	#STB_NUM
 3

	)

587 
	#STB_LOOS
 10

	)

588 
	#STB_GNU_UNIQUE
 10

	)

589 
	#STB_HIOS
 12

	)

590 
	#STB_LOPROC
 13

	)

591 
	#STB_HIPROC
 15

	)

595 
	#STT_NOTYPE
 0

	)

596 
	#STT_OBJECT
 1

	)

597 
	#STT_FUNC
 2

	)

598 
	#STT_SECTION
 3

	)

599 
	#STT_FILE
 4

	)

600 
	#STT_COMMON
 5

	)

601 
	#STT_TLS
 6

	)

602 
	#STT_NUM
 7

	)

603 
	#STT_LOOS
 10

	)

604 
	#STT_GNU_IFUNC
 10

	)

605 
	#STT_HIOS
 12

	)

606 
	#STT_LOPROC
 13

	)

607 
	#STT_HIPROC
 15

	)

614 
	#STN_UNDEF
 0

	)

619 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

622 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

625 
	#STV_DEFAULT
 0

	)

626 
	#STV_INTERNAL
 1

	)

627 
	#STV_HIDDEN
 2

	)

628 
	#STV_PROTECTED
 3

	)

635 
Elf32_Addr
 
	mr_off£t
;

636 
Elf32_W‹d
 
	mr_öfo
;

637 } 
	tElf32_Rñ
;

646 
Elf64_Addr
 
	mr_off£t
;

647 
Elf64_Xw‹d
 
	mr_öfo
;

648 } 
	tElf64_Rñ
;

654 
Elf32_Addr
 
	mr_off£t
;

655 
Elf32_W‹d
 
	mr_öfo
;

656 
Elf32_Sw‹d
 
	mr_addíd
;

657 } 
	tElf32_Rña
;

661 
Elf64_Addr
 
	mr_off£t
;

662 
Elf64_Xw‹d
 
	mr_öfo
;

663 
Elf64_Sxw‹d
 
	mr_addíd
;

664 } 
	tElf64_Rña
;

668 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

669 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

670 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

672 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

673 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

674 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

680 
Elf32_W‹d
 
	mp_ty≥
;

681 
Elf32_Off
 
	mp_off£t
;

682 
Elf32_Addr
 
	mp_vaddr
;

683 
Elf32_Addr
 
	mp_∑ddr
;

684 
Elf32_W‹d
 
	mp_fûesz
;

685 
Elf32_W‹d
 
	mp_memsz
;

686 
Elf32_W‹d
 
	mp_Êags
;

687 
Elf32_W‹d
 
	mp_Æign
;

688 } 
	tElf32_Phdr
;

692 
Elf64_W‹d
 
	mp_ty≥
;

693 
Elf64_W‹d
 
	mp_Êags
;

694 
Elf64_Off
 
	mp_off£t
;

695 
Elf64_Addr
 
	mp_vaddr
;

696 
Elf64_Addr
 
	mp_∑ddr
;

697 
Elf64_Xw‹d
 
	mp_fûesz
;

698 
Elf64_Xw‹d
 
	mp_memsz
;

699 
Elf64_Xw‹d
 
	mp_Æign
;

700 } 
	tElf64_Phdr
;

706 
	#PN_XNUM
 0xffff

	)

710 
	#PT_NULL
 0

	)

711 
	#PT_LOAD
 1

	)

712 
	#PT_DYNAMIC
 2

	)

713 
	#PT_INTERP
 3

	)

714 
	#PT_NOTE
 4

	)

715 
	#PT_SHLIB
 5

	)

716 
	#PT_PHDR
 6

	)

717 
	#PT_TLS
 7

	)

718 
	#PT_NUM
 8

	)

719 
	#PT_LOOS
 0x60000000

	)

720 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

721 
	#PT_GNU_STACK
 0x6474e551

	)

722 
	#PT_GNU_RELRO
 0x6474e552

	)

723 
	#PT_LOSUNW
 0x6fffffÁ

	)

724 
	#PT_SUNWBSS
 0x6fffffÁ

	)

725 
	#PT_SUNWSTACK
 0x6ffffffb

	)

726 
	#PT_HISUNW
 0x6fffffff

	)

727 
	#PT_HIOS
 0x6ffffff‡

	)

728 
	#PT_LOPROC
 0x70000000

	)

729 
	#PT_HIPROC
 0x7ffffff‡

	)

733 
	#PF_X
 (1 << 0Ë

	)

734 
	#PF_W
 (1 << 1Ë

	)

735 
	#PF_R
 (1 << 2Ë

	)

736 
	#PF_MASKOS
 0x0ff00000

	)

737 
	#PF_MASKPROC
 0xf0000000

	)

741 
	#NT_PRSTATUS
 1

	)

742 
	#NT_PRFPREG
 2

	)

744 
	#NT_FPREGSET
 2

	)

745 
	#NT_PRPSINFO
 3

	)

746 
	#NT_PRXREG
 4

	)

747 
	#NT_TASKSTRUCT
 4

	)

748 
	#NT_PLATFORM
 5

	)

749 
	#NT_AUXV
 6

	)

750 
	#NT_GWINDOWS
 7

	)

751 
	#NT_ASRS
 8

	)

752 
	#NT_PSTATUS
 10

	)

753 
	#NT_PSINFO
 13

	)

754 
	#NT_PRCRED
 14

	)

755 
	#NT_UTSNAME
 15

	)

756 
	#NT_LWPSTATUS
 16

	)

757 
	#NT_LWPSINFO
 17

	)

758 
	#NT_PRFPXREG
 20

	)

759 
	#NT_SIGINFO
 0x53494749

	)

761 
	#NT_FILE
 0x46494c45

	)

763 
	#NT_PRXFPREG
 0x46e62b7‡

	)

764 
	#NT_PPC_VMX
 0x100

	)

765 
	#NT_PPC_SPE
 0x101

	)

766 
	#NT_PPC_VSX
 0x102

	)

767 
	#NT_PPC_TAR
 0x103

	)

768 
	#NT_PPC_PPR
 0x104

	)

769 
	#NT_PPC_DSCR
 0x105

	)

770 
	#NT_PPC_EBB
 0x106

	)

771 
	#NT_PPC_PMU
 0x107

	)

772 
	#NT_PPC_TM_CGPR
 0x108

	)

773 
	#NT_PPC_TM_CFPR
 0x109

	)

774 
	#NT_PPC_TM_CVMX
 0x10®

	)

775 
	#NT_PPC_TM_CVSX
 0x10b

	)

776 
	#NT_PPC_TM_SPR
 0x10¯

	)

777 
	#NT_PPC_TM_CTAR
 0x10d

	)

779 
	#NT_PPC_TM_CPPR
 0x10ê

	)

781 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

783 
	#NT_PPC_PKEY
 0x110

	)

785 
	#NT_386_TLS
 0x200

	)

786 
	#NT_386_IOPERM
 0x201

	)

787 
	#NT_X86_XSTATE
 0x202

	)

788 
	#NT_S390_HIGH_GPRS
 0x300

	)

789 
	#NT_S390_TIMER
 0x301

	)

790 
	#NT_S390_TODCMP
 0x302

	)

791 
	#NT_S390_TODPREG
 0x303

	)

792 
	#NT_S390_CTRS
 0x304

	)

793 
	#NT_S390_PREFIX
 0x305

	)

794 
	#NT_S390_LAST_BREAK
 0x306

	)

795 
	#NT_S390_SYSTEM_CALL
 0x307

	)

796 
	#NT_S390_TDB
 0x308

	)

797 
	#NT_S390_VXRS_LOW
 0x309

	)

799 
	#NT_S390_VXRS_HIGH
 0x30®

	)

800 
	#NT_S390_GS_CB
 0x30b

	)

801 
	#NT_S390_GS_BC
 0x30¯

	)

803 
	#NT_S390_RI_CB
 0x30d

	)

804 
	#NT_ARM_VFP
 0x400

	)

805 
	#NT_ARM_TLS
 0x401

	)

806 
	#NT_ARM_HW_BREAK
 0x402

	)

807 
	#NT_ARM_HW_WATCH
 0x403

	)

808 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

809 
	#NT_ARM_SVE
 0x405

	)

814 
	#NT_VERSION
 1

	)

821 
Elf32_Sw‹d
 
	md_èg
;

824 
Elf32_W‹d
 
	md_vÆ
;

825 
Elf32_Addr
 
	md_±r
;

826 } 
	md_un
;

827 } 
	tElf32_Dyn
;

831 
Elf64_Sxw‹d
 
	md_èg
;

834 
Elf64_Xw‹d
 
	md_vÆ
;

835 
Elf64_Addr
 
	md_±r
;

836 } 
	md_un
;

837 } 
	tElf64_Dyn
;

841 
	#DT_NULL
 0

	)

842 
	#DT_NEEDED
 1

	)

843 
	#DT_PLTRELSZ
 2

	)

844 
	#DT_PLTGOT
 3

	)

845 
	#DT_HASH
 4

	)

846 
	#DT_STRTAB
 5

	)

847 
	#DT_SYMTAB
 6

	)

848 
	#DT_RELA
 7

	)

849 
	#DT_RELASZ
 8

	)

850 
	#DT_RELAENT
 9

	)

851 
	#DT_STRSZ
 10

	)

852 
	#DT_SYMENT
 11

	)

853 
	#DT_INIT
 12

	)

854 
	#DT_FINI
 13

	)

855 
	#DT_SONAME
 14

	)

856 
	#DT_RPATH
 15

	)

857 
	#DT_SYMBOLIC
 16

	)

858 
	#DT_REL
 17

	)

859 
	#DT_RELSZ
 18

	)

860 
	#DT_RELENT
 19

	)

861 
	#DT_PLTREL
 20

	)

862 
	#DT_DEBUG
 21

	)

863 
	#DT_TEXTREL
 22

	)

864 
	#DT_JMPREL
 23

	)

865 
	#DT_BIND_NOW
 24

	)

866 
	#DT_INIT_ARRAY
 25

	)

867 
	#DT_FINI_ARRAY
 26

	)

868 
	#DT_INIT_ARRAYSZ
 27

	)

869 
	#DT_FINI_ARRAYSZ
 28

	)

870 
	#DT_RUNPATH
 29

	)

871 
	#DT_FLAGS
 30

	)

872 
	#DT_ENCODING
 32

	)

873 
	#DT_PREINIT_ARRAY
 32

	)

874 
	#DT_PREINIT_ARRAYSZ
 33

	)

875 
	#DT_SYMTAB_SHNDX
 34

	)

876 
	#DT_NUM
 35

	)

877 
	#DT_LOOS
 0x6000000d

	)

878 
	#DT_HIOS
 0x6ffff000

	)

879 
	#DT_LOPROC
 0x70000000

	)

880 
	#DT_HIPROC
 0x7ffffff‡

	)

881 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

886 
	#DT_VALRNGLO
 0x6ffffd00

	)

887 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

888 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

889 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

890 
	#DT_CHECKSUM
 0x6ffffdf8

	)

891 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

892 
	#DT_MOVEENT
 0x6ffffdÁ

	)

893 
	#DT_MOVESZ
 0x6ffffdfb

	)

894 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

895 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

897 
	#DT_SYMINSZ
 0x6ffffd„

	)

898 
	#DT_SYMINENT
 0x6ffffdf‡

	)

899 
	#DT_VALRNGHI
 0x6ffffdff

	)

900 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

901 
	#DT_VALNUM
 12

	)

908 
	#DT_ADDRRNGLO
 0x6fff„00

	)

909 
	#DT_GNU_HASH
 0x6fff„f5

	)

910 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

911 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

912 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

913 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

914 
	#DT_CONFIG
 0x6fff„Á

	)

915 
	#DT_DEPAUDIT
 0x6fff„fb

	)

916 
	#DT_AUDIT
 0x6fff„f¯

	)

917 
	#DT_PLTPAD
 0x6fff„fd

	)

918 
	#DT_MOVETAB
 0x6fff„„

	)

919 
	#DT_SYMINFO
 0x6fff„f‡

	)

920 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

921 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

922 
	#DT_ADDRNUM
 11

	)

926 
	#DT_VERSYM
 0x6ffffff0

	)

928 
	#DT_RELACOUNT
 0x6ffffff9

	)

929 
	#DT_RELCOUNT
 0x6fffffÁ

	)

932 
	#DT_FLAGS_1
 0x6ffffffb

	)

933 
	#DT_VERDEF
 0x6ffffff¯

	)

935 
	#DT_VERDEFNUM
 0x6ffffffd

	)

936 
	#DT_VERNEED
 0x6fffff„

	)

938 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

939 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

940 
	#DT_VERSIONTAGNUM
 16

	)

944 
	#DT_AUXILIARY
 0x7ffffffd

	)

945 
	#DT_FILTER
 0x7ffffff‡

	)

946 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

947 
	#DT_EXTRANUM
 3

	)

950 
	#DF_ORIGIN
 0x00000001

	)

951 
	#DF_SYMBOLIC
 0x00000002

	)

952 
	#DF_TEXTREL
 0x00000004

	)

953 
	#DF_BIND_NOW
 0x00000008

	)

954 
	#DF_STATIC_TLS
 0x00000010

	)

958 
	#DF_1_NOW
 0x00000001

	)

959 
	#DF_1_GLOBAL
 0x00000002

	)

960 
	#DF_1_GROUP
 0x00000004

	)

961 
	#DF_1_NODELETE
 0x00000008

	)

962 
	#DF_1_LOADFLTR
 0x00000010

	)

963 
	#DF_1_INITFIRST
 0x00000020

	)

964 
	#DF_1_NOOPEN
 0x00000040

	)

965 
	#DF_1_ORIGIN
 0x00000080

	)

966 
	#DF_1_DIRECT
 0x00000100

	)

967 
	#DF_1_TRANS
 0x00000200

	)

968 
	#DF_1_INTERPOSE
 0x00000400

	)

969 
	#DF_1_NODEFLIB
 0x00000800

	)

970 
	#DF_1_NODUMP
 0x00001000

	)

971 
	#DF_1_CONFALT
 0x00002000

	)

972 
	#DF_1_ENDFILTEE
 0x00004000

	)

973 
	#DF_1_DISPRELDNE
 0x00008000

	)

974 
	#DF_1_DISPRELPND
 0x00010000

	)

975 
	#DF_1_NODIRECT
 0x00020000

	)

976 
	#DF_1_IGNMULDEF
 0x00040000

	)

977 
	#DF_1_NOKSYMS
 0x00080000

	)

978 
	#DF_1_NOHDR
 0x00100000

	)

979 
	#DF_1_EDITED
 0x00200000

	)

980 
	#DF_1_NORELOC
 0x00400000

	)

981 
	#DF_1_SYMINTPOSE
 0x00800000

	)

982 
	#DF_1_GLOBAUDIT
 0x01000000

	)

983 
	#DF_1_SINGLETON
 0x02000000

	)

984 
	#DF_1_STUB
 0x04000000

	)

985 
	#DF_1_PIE
 0x08000000

	)

988 
	#DTF_1_PARINIT
 0x00000001

	)

989 
	#DTF_1_CONFEXP
 0x00000002

	)

992 
	#DF_P1_LAZYLOAD
 0x00000001

	)

993 
	#DF_P1_GROUPPERM
 0x00000002

	)

1000 
Elf32_HÆf
 
	mvd_vîsi⁄
;

1001 
Elf32_HÆf
 
	mvd_Êags
;

1002 
Elf32_HÆf
 
	mvd_ndx
;

1003 
Elf32_HÆf
 
	mvd_˙t
;

1004 
Elf32_W‹d
 
	mvd_hash
;

1005 
Elf32_W‹d
 
	mvd_aux
;

1006 
Elf32_W‹d
 
	mvd_√xt
;

1008 } 
	tElf32_Vîdef
;

1012 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1013 
Elf64_HÆf
 
	mvd_Êags
;

1014 
Elf64_HÆf
 
	mvd_ndx
;

1015 
Elf64_HÆf
 
	mvd_˙t
;

1016 
Elf64_W‹d
 
	mvd_hash
;

1017 
Elf64_W‹d
 
	mvd_aux
;

1018 
Elf64_W‹d
 
	mvd_√xt
;

1020 } 
	tElf64_Vîdef
;

1024 
	#VER_DEF_NONE
 0

	)

1025 
	#VER_DEF_CURRENT
 1

	)

1026 
	#VER_DEF_NUM
 2

	)

1029 
	#VER_FLG_BASE
 0x1

	)

1030 
	#VER_FLG_WEAK
 0x2

	)

1033 
	#VER_NDX_LOCAL
 0

	)

1034 
	#VER_NDX_GLOBAL
 1

	)

1035 
	#VER_NDX_LORESERVE
 0xff00

	)

1036 
	#VER_NDX_ELIMINATE
 0xff01

	)

1042 
Elf32_W‹d
 
	mvda_«me
;

1043 
Elf32_W‹d
 
	mvda_√xt
;

1045 } 
	tElf32_Vîdaux
;

1049 
Elf64_W‹d
 
	mvda_«me
;

1050 
Elf64_W‹d
 
	mvda_√xt
;

1052 } 
	tElf64_Vîdaux
;

1059 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1060 
Elf32_HÆf
 
	mvn_˙t
;

1061 
Elf32_W‹d
 
	mvn_fûe
;

1063 
Elf32_W‹d
 
	mvn_aux
;

1064 
Elf32_W‹d
 
	mvn_√xt
;

1066 } 
	tElf32_Vî√ed
;

1070 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1071 
Elf64_HÆf
 
	mvn_˙t
;

1072 
Elf64_W‹d
 
	mvn_fûe
;

1074 
Elf64_W‹d
 
	mvn_aux
;

1075 
Elf64_W‹d
 
	mvn_√xt
;

1077 } 
	tElf64_Vî√ed
;

1081 
	#VER_NEED_NONE
 0

	)

1082 
	#VER_NEED_CURRENT
 1

	)

1083 
	#VER_NEED_NUM
 2

	)

1089 
Elf32_W‹d
 
	mv«_hash
;

1090 
Elf32_HÆf
 
	mv«_Êags
;

1091 
Elf32_HÆf
 
	mv«_Ÿhî
;

1092 
Elf32_W‹d
 
	mv«_«me
;

1093 
Elf32_W‹d
 
	mv«_√xt
;

1095 } 
	tElf32_Vî«ux
;

1099 
Elf64_W‹d
 
	mv«_hash
;

1100 
Elf64_HÆf
 
	mv«_Êags
;

1101 
Elf64_HÆf
 
	mv«_Ÿhî
;

1102 
Elf64_W‹d
 
	mv«_«me
;

1103 
Elf64_W‹d
 
	mv«_√xt
;

1105 } 
	tElf64_Vî«ux
;

1109 
	#VER_FLG_WEAK
 0x2

	)

1123 
uöt32_t
 
	ma_ty≥
;

1126 
uöt32_t
 
	ma_vÆ
;

1130 } 
	ma_un
;

1131 } 
	tElf32_auxv_t
;

1135 
uöt64_t
 
	ma_ty≥
;

1138 
uöt64_t
 
	ma_vÆ
;

1142 } 
	ma_un
;

1143 } 
	tElf64_auxv_t
;

1145 
	~<bôs/auxv.h
>

1151 
Elf32_W‹d
 
	mn_«mesz
;

1152 
Elf32_W‹d
 
	mn_descsz
;

1153 
Elf32_W‹d
 
	mn_ty≥
;

1154 } 
	tElf32_Nhdr
;

1158 
Elf64_W‹d
 
	mn_«mesz
;

1159 
Elf64_W‹d
 
	mn_descsz
;

1160 
Elf64_W‹d
 
	mn_ty≥
;

1161 } 
	tElf64_Nhdr
;

1166 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1169 
	#ELF_NOTE_GNU
 "GNU"

	)

1175 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1186 
	#NT_GNU_ABI_TAG
 1

	)

1187 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1191 
	#ELF_NOTE_OS_LINUX
 0

	)

1192 
	#ELF_NOTE_OS_GNU
 1

	)

1193 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1194 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1202 
	#NT_GNU_HWCAP
 2

	)

1206 
	#NT_GNU_BUILD_ID
 3

	)

1209 
	#NT_GNU_GOLD_VERSION
 4

	)

1212 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1215 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1220 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1222 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1225 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1227 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1229 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1231 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1235 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0000000

	)

1238 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0000001

	)

1240 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1242 
	#GNU_PROPERTY_X86_ISA_1_486
 (1U << 0)

	)

1243 
	#GNU_PROPERTY_X86_ISA_1_586
 (1U << 1)

	)

1244 
	#GNU_PROPERTY_X86_ISA_1_686
 (1U << 2)

	)

1245 
	#GNU_PROPERTY_X86_ISA_1_SSE
 (1U << 3)

	)

1246 
	#GNU_PROPERTY_X86_ISA_1_SSE2
 (1U << 4)

	)

1247 
	#GNU_PROPERTY_X86_ISA_1_SSE3
 (1U << 5)

	)

1248 
	#GNU_PROPERTY_X86_ISA_1_SSSE3
 (1U << 6)

	)

1249 
	#GNU_PROPERTY_X86_ISA_1_SSE4_1
 (1U << 7)

	)

1250 
	#GNU_PROPERTY_X86_ISA_1_SSE4_2
 (1U << 8)

	)

1251 
	#GNU_PROPERTY_X86_ISA_1_AVX
 (1U << 9)

	)

1252 
	#GNU_PROPERTY_X86_ISA_1_AVX2
 (1U << 10)

	)

1253 
	#GNU_PROPERTY_X86_ISA_1_AVX512F
 (1U << 11)

	)

1254 
	#GNU_PROPERTY_X86_ISA_1_AVX512CD
 (1U << 12)

	)

1255 
	#GNU_PROPERTY_X86_ISA_1_AVX512ER
 (1U << 13)

	)

1256 
	#GNU_PROPERTY_X86_ISA_1_AVX512PF
 (1U << 14)

	)

1257 
	#GNU_PROPERTY_X86_ISA_1_AVX512VL
 (1U << 15)

	)

1258 
	#GNU_PROPERTY_X86_ISA_1_AVX512DQ
 (1U << 16)

	)

1259 
	#GNU_PROPERTY_X86_ISA_1_AVX512BW
 (1U << 17)

	)

1263 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1266 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1271 
Elf32_Xw‹d
 
	mm_vÆue
;

1272 
Elf32_W‹d
 
	mm_öfo
;

1273 
Elf32_W‹d
 
	mm_poff£t
;

1274 
Elf32_HÆf
 
	mm_ª≥©
;

1275 
Elf32_HÆf
 
	mm_°ride
;

1276 } 
	tElf32_Move
;

1280 
Elf64_Xw‹d
 
	mm_vÆue
;

1281 
Elf64_Xw‹d
 
	mm_öfo
;

1282 
Elf64_Xw‹d
 
	mm_poff£t
;

1283 
Elf64_HÆf
 
	mm_ª≥©
;

1284 
Elf64_HÆf
 
	mm_°ride
;

1285 } 
	tElf64_Move
;

1288 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1289 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1290 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1292 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1293 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1294 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1300 
	#EF_CPU32
 0x00810000

	)

1304 
	#R_68K_NONE
 0

	)

1305 
	#R_68K_32
 1

	)

1306 
	#R_68K_16
 2

	)

1307 
	#R_68K_8
 3

	)

1308 
	#R_68K_PC32
 4

	)

1309 
	#R_68K_PC16
 5

	)

1310 
	#R_68K_PC8
 6

	)

1311 
	#R_68K_GOT32
 7

	)

1312 
	#R_68K_GOT16
 8

	)

1313 
	#R_68K_GOT8
 9

	)

1314 
	#R_68K_GOT32O
 10

	)

1315 
	#R_68K_GOT16O
 11

	)

1316 
	#R_68K_GOT8O
 12

	)

1317 
	#R_68K_PLT32
 13

	)

1318 
	#R_68K_PLT16
 14

	)

1319 
	#R_68K_PLT8
 15

	)

1320 
	#R_68K_PLT32O
 16

	)

1321 
	#R_68K_PLT16O
 17

	)

1322 
	#R_68K_PLT8O
 18

	)

1323 
	#R_68K_COPY
 19

	)

1324 
	#R_68K_GLOB_DAT
 20

	)

1325 
	#R_68K_JMP_SLOT
 21

	)

1326 
	#R_68K_RELATIVE
 22

	)

1327 
	#R_68K_TLS_GD32
 25

	)

1328 
	#R_68K_TLS_GD16
 26

	)

1329 
	#R_68K_TLS_GD8
 27

	)

1330 
	#R_68K_TLS_LDM32
 28

	)

1331 
	#R_68K_TLS_LDM16
 29

	)

1332 
	#R_68K_TLS_LDM8
 30

	)

1333 
	#R_68K_TLS_LDO32
 31

	)

1334 
	#R_68K_TLS_LDO16
 32

	)

1335 
	#R_68K_TLS_LDO8
 33

	)

1336 
	#R_68K_TLS_IE32
 34

	)

1337 
	#R_68K_TLS_IE16
 35

	)

1338 
	#R_68K_TLS_IE8
 36

	)

1339 
	#R_68K_TLS_LE32
 37

	)

1341 
	#R_68K_TLS_LE16
 38

	)

1343 
	#R_68K_TLS_LE8
 39

	)

1345 
	#R_68K_TLS_DTPMOD32
 40

	)

1346 
	#R_68K_TLS_DTPREL32
 41

	)

1347 
	#R_68K_TLS_TPREL32
 42

	)

1349 
	#R_68K_NUM
 43

	)

1355 
	#R_386_NONE
 0

	)

1356 
	#R_386_32
 1

	)

1357 
	#R_386_PC32
 2

	)

1358 
	#R_386_GOT32
 3

	)

1359 
	#R_386_PLT32
 4

	)

1360 
	#R_386_COPY
 5

	)

1361 
	#R_386_GLOB_DAT
 6

	)

1362 
	#R_386_JMP_SLOT
 7

	)

1363 
	#R_386_RELATIVE
 8

	)

1364 
	#R_386_GOTOFF
 9

	)

1365 
	#R_386_GOTPC
 10

	)

1366 
	#R_386_32PLT
 11

	)

1367 
	#R_386_TLS_TPOFF
 14

	)

1368 
	#R_386_TLS_IE
 15

	)

1370 
	#R_386_TLS_GOTIE
 16

	)

1372 
	#R_386_TLS_LE
 17

	)

1374 
	#R_386_TLS_GD
 18

	)

1376 
	#R_386_TLS_LDM
 19

	)

1379 
	#R_386_16
 20

	)

1380 
	#R_386_PC16
 21

	)

1381 
	#R_386_8
 22

	)

1382 
	#R_386_PC8
 23

	)

1383 
	#R_386_TLS_GD_32
 24

	)

1385 
	#R_386_TLS_GD_PUSH
 25

	)

1386 
	#R_386_TLS_GD_CALL
 26

	)

1388 
	#R_386_TLS_GD_POP
 27

	)

1389 
	#R_386_TLS_LDM_32
 28

	)

1391 
	#R_386_TLS_LDM_PUSH
 29

	)

1392 
	#R_386_TLS_LDM_CALL
 30

	)

1394 
	#R_386_TLS_LDM_POP
 31

	)

1395 
	#R_386_TLS_LDO_32
 32

	)

1396 
	#R_386_TLS_IE_32
 33

	)

1398 
	#R_386_TLS_LE_32
 34

	)

1400 
	#R_386_TLS_DTPMOD32
 35

	)

1401 
	#R_386_TLS_DTPOFF32
 36

	)

1402 
	#R_386_TLS_TPOFF32
 37

	)

1403 
	#R_386_SIZE32
 38

	)

1404 
	#R_386_TLS_GOTDESC
 39

	)

1405 
	#R_386_TLS_DESC_CALL
 40

	)

1408 
	#R_386_TLS_DESC
 41

	)

1412 
	#R_386_IRELATIVE
 42

	)

1413 
	#R_386_GOT32X
 43

	)

1416 
	#R_386_NUM
 44

	)

1422 
	#STT_SPARC_REGISTER
 13

	)

1426 
	#EF_SPARCV9_MM
 3

	)

1427 
	#EF_SPARCV9_TSO
 0

	)

1428 
	#EF_SPARCV9_PSO
 1

	)

1429 
	#EF_SPARCV9_RMO
 2

	)

1430 
	#EF_SPARC_LEDATA
 0x800000

	)

1431 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1432 
	#EF_SPARC_32PLUS
 0x000100

	)

1433 
	#EF_SPARC_SUN_US1
 0x000200

	)

1434 
	#EF_SPARC_HAL_R1
 0x000400

	)

1435 
	#EF_SPARC_SUN_US3
 0x000800

	)

1439 
	#R_SPARC_NONE
 0

	)

1440 
	#R_SPARC_8
 1

	)

1441 
	#R_SPARC_16
 2

	)

1442 
	#R_SPARC_32
 3

	)

1443 
	#R_SPARC_DISP8
 4

	)

1444 
	#R_SPARC_DISP16
 5

	)

1445 
	#R_SPARC_DISP32
 6

	)

1446 
	#R_SPARC_WDISP30
 7

	)

1447 
	#R_SPARC_WDISP22
 8

	)

1448 
	#R_SPARC_HI22
 9

	)

1449 
	#R_SPARC_22
 10

	)

1450 
	#R_SPARC_13
 11

	)

1451 
	#R_SPARC_LO10
 12

	)

1452 
	#R_SPARC_GOT10
 13

	)

1453 
	#R_SPARC_GOT13
 14

	)

1454 
	#R_SPARC_GOT22
 15

	)

1455 
	#R_SPARC_PC10
 16

	)

1456 
	#R_SPARC_PC22
 17

	)

1457 
	#R_SPARC_WPLT30
 18

	)

1458 
	#R_SPARC_COPY
 19

	)

1459 
	#R_SPARC_GLOB_DAT
 20

	)

1460 
	#R_SPARC_JMP_SLOT
 21

	)

1461 
	#R_SPARC_RELATIVE
 22

	)

1462 
	#R_SPARC_UA32
 23

	)

1466 
	#R_SPARC_PLT32
 24

	)

1467 
	#R_SPARC_HIPLT22
 25

	)

1468 
	#R_SPARC_LOPLT10
 26

	)

1469 
	#R_SPARC_PCPLT32
 27

	)

1470 
	#R_SPARC_PCPLT22
 28

	)

1471 
	#R_SPARC_PCPLT10
 29

	)

1472 
	#R_SPARC_10
 30

	)

1473 
	#R_SPARC_11
 31

	)

1474 
	#R_SPARC_64
 32

	)

1475 
	#R_SPARC_OLO10
 33

	)

1476 
	#R_SPARC_HH22
 34

	)

1477 
	#R_SPARC_HM10
 35

	)

1478 
	#R_SPARC_LM22
 36

	)

1479 
	#R_SPARC_PC_HH22
 37

	)

1480 
	#R_SPARC_PC_HM10
 38

	)

1481 
	#R_SPARC_PC_LM22
 39

	)

1482 
	#R_SPARC_WDISP16
 40

	)

1483 
	#R_SPARC_WDISP19
 41

	)

1484 
	#R_SPARC_GLOB_JMP
 42

	)

1485 
	#R_SPARC_7
 43

	)

1486 
	#R_SPARC_5
 44

	)

1487 
	#R_SPARC_6
 45

	)

1488 
	#R_SPARC_DISP64
 46

	)

1489 
	#R_SPARC_PLT64
 47

	)

1490 
	#R_SPARC_HIX22
 48

	)

1491 
	#R_SPARC_LOX10
 49

	)

1492 
	#R_SPARC_H44
 50

	)

1493 
	#R_SPARC_M44
 51

	)

1494 
	#R_SPARC_L44
 52

	)

1495 
	#R_SPARC_REGISTER
 53

	)

1496 
	#R_SPARC_UA64
 54

	)

1497 
	#R_SPARC_UA16
 55

	)

1498 
	#R_SPARC_TLS_GD_HI22
 56

	)

1499 
	#R_SPARC_TLS_GD_LO10
 57

	)

1500 
	#R_SPARC_TLS_GD_ADD
 58

	)

1501 
	#R_SPARC_TLS_GD_CALL
 59

	)

1502 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1503 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1504 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1505 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1506 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1507 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1508 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1509 
	#R_SPARC_TLS_IE_HI22
 67

	)

1510 
	#R_SPARC_TLS_IE_LO10
 68

	)

1511 
	#R_SPARC_TLS_IE_LD
 69

	)

1512 
	#R_SPARC_TLS_IE_LDX
 70

	)

1513 
	#R_SPARC_TLS_IE_ADD
 71

	)

1514 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1515 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1516 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1517 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1518 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1519 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1520 
	#R_SPARC_TLS_TPOFF32
 78

	)

1521 
	#R_SPARC_TLS_TPOFF64
 79

	)

1522 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1523 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1524 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1525 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1526 
	#R_SPARC_GOTDATA_OP
 84

	)

1527 
	#R_SPARC_H34
 85

	)

1528 
	#R_SPARC_SIZE32
 86

	)

1529 
	#R_SPARC_SIZE64
 87

	)

1530 
	#R_SPARC_WDISP10
 88

	)

1531 
	#R_SPARC_JMP_IREL
 248

	)

1532 
	#R_SPARC_IRELATIVE
 249

	)

1533 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1534 
	#R_SPARC_GNU_VTENTRY
 251

	)

1535 
	#R_SPARC_REV32
 252

	)

1537 
	#R_SPARC_NUM
 253

	)

1541 
	#DT_SPARC_REGISTER
 0x70000001

	)

1542 
	#DT_SPARC_NUM
 2

	)

1548 
	#EF_MIPS_NOREORDER
 1

	)

1549 
	#EF_MIPS_PIC
 2

	)

1550 
	#EF_MIPS_CPIC
 4

	)

1551 
	#EF_MIPS_XGOT
 8

	)

1552 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1553 
	#EF_MIPS_ABI2
 32

	)

1554 
	#EF_MIPS_ABI_ON32
 64

	)

1555 
	#EF_MIPS_FP64
 512

	)

1556 
	#EF_MIPS_NAN2008
 1024

	)

1557 
	#EF_MIPS_ARCH
 0xf0000000

	)

1561 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1562 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1563 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1564 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1565 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1566 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1567 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1568 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1569 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1573 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1574 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1575 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1576 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1577 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1578 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1579 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1583 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1584 
	#SHN_MIPS_TEXT
 0xff01

	)

1585 
	#SHN_MIPS_DATA
 0xff02

	)

1586 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1587 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1591 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1592 
	#SHT_MIPS_MSYM
 0x70000001

	)

1593 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1594 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1595 
	#SHT_MIPS_UCODE
 0x70000004

	)

1596 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1597 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1598 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1599 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1600 
	#SHT_MIPS_RELD
 0x70000009

	)

1601 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1602 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1603 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1604 
	#SHT_MIPS_SHDR
 0x70000010

	)

1605 
	#SHT_MIPS_FDESC
 0x70000011

	)

1606 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1607 
	#SHT_MIPS_DENSE
 0x70000013

	)

1608 
	#SHT_MIPS_PDESC
 0x70000014

	)

1609 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1610 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1611 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1612 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1613 
	#SHT_MIPS_LINE
 0x70000019

	)

1614 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1615 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1616 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1617 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1618 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1619 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1620 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1621 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1622 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1623 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1624 
	#SHT_MIPS_XLATE
 0x70000024

	)

1625 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1626 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1627 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1628 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1629 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1633 
	#SHF_MIPS_GPREL
 0x10000000

	)

1634 
	#SHF_MIPS_MERGE
 0x20000000

	)

1635 
	#SHF_MIPS_ADDR
 0x40000000

	)

1636 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1637 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1638 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1639 
	#SHF_MIPS_NAMES
 0x02000000

	)

1640 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1646 
	#STO_MIPS_DEFAULT
 0x0

	)

1647 
	#STO_MIPS_INTERNAL
 0x1

	)

1648 
	#STO_MIPS_HIDDEN
 0x2

	)

1649 
	#STO_MIPS_PROTECTED
 0x3

	)

1650 
	#STO_MIPS_PLT
 0x8

	)

1651 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1654 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1662 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1663 
Elf32_W‹d
 
	mgt_unu£d
;

1664 } 
	mgt_hódî
;

1667 
Elf32_W‹d
 
	mgt_g_vÆue
;

1668 
Elf32_W‹d
 
	mgt_byãs
;

1669 } 
	mgt_íåy
;

1670 } 
	tElf32_g±ab
;

1676 
Elf32_W‹d
 
	mri_g¥mask
;

1677 
Elf32_W‹d
 
	mri_˝rmask
[4];

1678 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1679 } 
	tElf32_RegInfo
;

1685 
	mköd
;

1687 
	msize
;

1688 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1690 
Elf32_W‹d
 
	möfo
;

1691 } 
	tElf_O±i⁄s
;

1695 
	#ODK_NULL
 0

	)

1696 
	#ODK_REGINFO
 1

	)

1697 
	#ODK_EXCEPTIONS
 2

	)

1698 
	#ODK_PAD
 3

	)

1699 
	#ODK_HWPATCH
 4

	)

1700 
	#ODK_FILL
 5

	)

1701 
	#ODK_TAGS
 6

	)

1702 
	#ODK_HWAND
 7

	)

1703 
	#ODK_HWOR
 8

	)

1707 
	#OEX_FPU_MIN
 0x1‡

	)

1708 
	#OEX_FPU_MAX
 0x1f00

	)

1709 
	#OEX_PAGE0
 0x10000

	)

1710 
	#OEX_SMM
 0x20000

	)

1711 
	#OEX_FPDBUG
 0x40000

	)

1712 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1713 
	#OEX_DISMISS
 0x80000

	)

1715 
	#OEX_FPU_INVAL
 0x10

	)

1716 
	#OEX_FPU_DIV0
 0x08

	)

1717 
	#OEX_FPU_OFLO
 0x04

	)

1718 
	#OEX_FPU_UFLO
 0x02

	)

1719 
	#OEX_FPU_INEX
 0x01

	)

1723 
	#OHW_R4KEOP
 0x1

	)

1724 
	#OHW_R8KPFETCH
 0x2

	)

1725 
	#OHW_R5KEOP
 0x4

	)

1726 
	#OHW_R5KCVTL
 0x8

	)

1728 
	#OPAD_PREFIX
 0x1

	)

1729 
	#OPAD_POSTFIX
 0x2

	)

1730 
	#OPAD_SYMBOL
 0x4

	)

1736 
Elf32_W‹d
 
	mhwp_Êags1
;

1737 
Elf32_W‹d
 
	mhwp_Êags2
;

1738 } 
	tElf_O±i⁄s_Hw
;

1742 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1743 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1747 
	#R_MIPS_NONE
 0

	)

1748 
	#R_MIPS_16
 1

	)

1749 
	#R_MIPS_32
 2

	)

1750 
	#R_MIPS_REL32
 3

	)

1751 
	#R_MIPS_26
 4

	)

1752 
	#R_MIPS_HI16
 5

	)

1753 
	#R_MIPS_LO16
 6

	)

1754 
	#R_MIPS_GPREL16
 7

	)

1755 
	#R_MIPS_LITERAL
 8

	)

1756 
	#R_MIPS_GOT16
 9

	)

1757 
	#R_MIPS_PC16
 10

	)

1758 
	#R_MIPS_CALL16
 11

	)

1759 
	#R_MIPS_GPREL32
 12

	)

1761 
	#R_MIPS_SHIFT5
 16

	)

1762 
	#R_MIPS_SHIFT6
 17

	)

1763 
	#R_MIPS_64
 18

	)

1764 
	#R_MIPS_GOT_DISP
 19

	)

1765 
	#R_MIPS_GOT_PAGE
 20

	)

1766 
	#R_MIPS_GOT_OFST
 21

	)

1767 
	#R_MIPS_GOT_HI16
 22

	)

1768 
	#R_MIPS_GOT_LO16
 23

	)

1769 
	#R_MIPS_SUB
 24

	)

1770 
	#R_MIPS_INSERT_A
 25

	)

1771 
	#R_MIPS_INSERT_B
 26

	)

1772 
	#R_MIPS_DELETE
 27

	)

1773 
	#R_MIPS_HIGHER
 28

	)

1774 
	#R_MIPS_HIGHEST
 29

	)

1775 
	#R_MIPS_CALL_HI16
 30

	)

1776 
	#R_MIPS_CALL_LO16
 31

	)

1777 
	#R_MIPS_SCN_DISP
 32

	)

1778 
	#R_MIPS_REL16
 33

	)

1779 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1780 
	#R_MIPS_PJUMP
 35

	)

1781 
	#R_MIPS_RELGOT
 36

	)

1782 
	#R_MIPS_JALR
 37

	)

1783 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1784 
	#R_MIPS_TLS_DTPREL32
 39

	)

1785 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1786 
	#R_MIPS_TLS_DTPREL64
 41

	)

1787 
	#R_MIPS_TLS_GD
 42

	)

1788 
	#R_MIPS_TLS_LDM
 43

	)

1789 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1790 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1791 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1792 
	#R_MIPS_TLS_TPREL32
 47

	)

1793 
	#R_MIPS_TLS_TPREL64
 48

	)

1794 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1795 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1796 
	#R_MIPS_GLOB_DAT
 51

	)

1797 
	#R_MIPS_COPY
 126

	)

1798 
	#R_MIPS_JUMP_SLOT
 127

	)

1800 
	#R_MIPS_NUM
 128

	)

1804 
	#PT_MIPS_REGINFO
 0x70000000

	)

1805 
	#PT_MIPS_RTPROC
 0x70000001

	)

1806 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1807 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1811 
	#PF_MIPS_LOCAL
 0x10000000

	)

1815 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1816 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1817 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1818 
	#DT_MIPS_IVERSION
 0x70000004

	)

1819 
	#DT_MIPS_FLAGS
 0x70000005

	)

1820 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1821 
	#DT_MIPS_MSYM
 0x70000007

	)

1822 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1823 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1824 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1825 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1826 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1827 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1828 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1829 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1830 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1831 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1832 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1833 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1835 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1836 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1838 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1839 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1841 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1843 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1845 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1847 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1849 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1850 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1851 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1852 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1853 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1854 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1855 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1856 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1857 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1858 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1859 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1860 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1862 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1864 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1865 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1866 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1868 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1872 
	#DT_MIPS_RWPLT
 0x70000034

	)

1876 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1877 
	#DT_MIPS_NUM
 0x36

	)

1881 
	#RHF_NONE
 0

	)

1882 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1883 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1884 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1885 
	#RHF_NO_MOVE
 (1 << 3)

	)

1886 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1887 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1888 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1889 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1890 
	#RHF_PIXIE
 (1 << 8)

	)

1891 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1892 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1893 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1894 
	#RHF_CORD
 (1 << 12)

	)

1895 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1896 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1902 
Elf32_W‹d
 
	ml_«me
;

1903 
Elf32_W‹d
 
	ml_time_°amp
;

1904 
Elf32_W‹d
 
	ml_checksum
;

1905 
Elf32_W‹d
 
	ml_vîsi⁄
;

1906 
Elf32_W‹d
 
	ml_Êags
;

1907 } 
	tElf32_Lib
;

1911 
Elf64_W‹d
 
	ml_«me
;

1912 
Elf64_W‹d
 
	ml_time_°amp
;

1913 
Elf64_W‹d
 
	ml_checksum
;

1914 
Elf64_W‹d
 
	ml_vîsi⁄
;

1915 
Elf64_W‹d
 
	ml_Êags
;

1916 } 
	tElf64_Lib
;

1921 
	#LL_NONE
 0

	)

1922 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1923 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1924 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1925 
	#LL_EXPORTS
 (1 << 3)

	)

1926 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1927 
	#LL_DELTA
 (1 << 5)

	)

1931 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1936 
Elf32_HÆf
 
	mvîsi⁄
;

1938 
	miß_Àvñ
;

1940 
	miß_ªv
;

1942 
	mg¥_size
;

1944 
	m˝r1_size
;

1946 
	m˝r2_size
;

1948 
	mÂ_abi
;

1950 
Elf32_W‹d
 
	miß_ext
;

1952 
Elf32_W‹d
 
	ma£s
;

1954 
Elf32_W‹d
 
	mÊags1
;

1955 
Elf32_W‹d
 
	mÊags2
;

1956 } 
	tElf_MIPS_ABIFœgs_v0
;

1960 
	#MIPS_AFL_REG_NONE
 0x00

	)

1961 
	#MIPS_AFL_REG_32
 0x01

	)

1962 
	#MIPS_AFL_REG_64
 0x02

	)

1963 
	#MIPS_AFL_REG_128
 0x03

	)

1967 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1968 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1969 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1970 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1971 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1972 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1973 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1974 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1975 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1976 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1977 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1978 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1979 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1980 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1984 
	#MIPS_AFL_EXT_XLR
 1

	)

1985 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1986 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1987 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1988 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1989 
	#MIPS_AFL_EXT_5900
 6

	)

1990 
	#MIPS_AFL_EXT_4650
 7

	)

1991 
	#MIPS_AFL_EXT_4010
 8

	)

1992 
	#MIPS_AFL_EXT_4100
 9

	)

1993 
	#MIPS_AFL_EXT_3900
 10

	)

1994 
	#MIPS_AFL_EXT_10000
 11

	)

1995 
	#MIPS_AFL_EXT_SB1
 12

	)

1996 
	#MIPS_AFL_EXT_4111
 13

	)

1997 
	#MIPS_AFL_EXT_4120
 14

	)

1998 
	#MIPS_AFL_EXT_5400
 15

	)

1999 
	#MIPS_AFL_EXT_5500
 16

	)

2000 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

2001 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

2004 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

2010 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2012 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2014 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2016 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2018 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2020 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2022 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2024 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2026 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2033 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2034 
	#EF_PARISC_EXT
 0x00020000

	)

2035 
	#EF_PARISC_LSB
 0x00040000

	)

2036 
	#EF_PARISC_WIDE
 0x00080000

	)

2037 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2039 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2040 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2044 
	#EFA_PARISC_1_0
 0x020b

	)

2045 
	#EFA_PARISC_1_1
 0x0210

	)

2046 
	#EFA_PARISC_2_0
 0x0214

	)

2050 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2052 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2056 
	#SHT_PARISC_EXT
 0x70000000

	)

2057 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2058 
	#SHT_PARISC_DOC
 0x70000002

	)

2062 
	#SHF_PARISC_SHORT
 0x20000000

	)

2063 
	#SHF_PARISC_HUGE
 0x40000000

	)

2064 
	#SHF_PARISC_SBP
 0x80000000

	)

2068 
	#STT_PARISC_MILLICODE
 13

	)

2070 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2071 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2075 
	#R_PARISC_NONE
 0

	)

2076 
	#R_PARISC_DIR32
 1

	)

2077 
	#R_PARISC_DIR21L
 2

	)

2078 
	#R_PARISC_DIR17R
 3

	)

2079 
	#R_PARISC_DIR17F
 4

	)

2080 
	#R_PARISC_DIR14R
 6

	)

2081 
	#R_PARISC_PCREL32
 9

	)

2082 
	#R_PARISC_PCREL21L
 10

	)

2083 
	#R_PARISC_PCREL17R
 11

	)

2084 
	#R_PARISC_PCREL17F
 12

	)

2085 
	#R_PARISC_PCREL14R
 14

	)

2086 
	#R_PARISC_DPREL21L
 18

	)

2087 
	#R_PARISC_DPREL14R
 22

	)

2088 
	#R_PARISC_GPREL21L
 26

	)

2089 
	#R_PARISC_GPREL14R
 30

	)

2090 
	#R_PARISC_LTOFF21L
 34

	)

2091 
	#R_PARISC_LTOFF14R
 38

	)

2092 
	#R_PARISC_SECREL32
 41

	)

2093 
	#R_PARISC_SEGBASE
 48

	)

2094 
	#R_PARISC_SEGREL32
 49

	)

2095 
	#R_PARISC_PLTOFF21L
 50

	)

2096 
	#R_PARISC_PLTOFF14R
 54

	)

2097 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2098 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2099 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2100 
	#R_PARISC_FPTR64
 64

	)

2101 
	#R_PARISC_PLABEL32
 65

	)

2102 
	#R_PARISC_PLABEL21L
 66

	)

2103 
	#R_PARISC_PLABEL14R
 70

	)

2104 
	#R_PARISC_PCREL64
 72

	)

2105 
	#R_PARISC_PCREL22F
 74

	)

2106 
	#R_PARISC_PCREL14WR
 75

	)

2107 
	#R_PARISC_PCREL14DR
 76

	)

2108 
	#R_PARISC_PCREL16F
 77

	)

2109 
	#R_PARISC_PCREL16WF
 78

	)

2110 
	#R_PARISC_PCREL16DF
 79

	)

2111 
	#R_PARISC_DIR64
 80

	)

2112 
	#R_PARISC_DIR14WR
 83

	)

2113 
	#R_PARISC_DIR14DR
 84

	)

2114 
	#R_PARISC_DIR16F
 85

	)

2115 
	#R_PARISC_DIR16WF
 86

	)

2116 
	#R_PARISC_DIR16DF
 87

	)

2117 
	#R_PARISC_GPREL64
 88

	)

2118 
	#R_PARISC_GPREL14WR
 91

	)

2119 
	#R_PARISC_GPREL14DR
 92

	)

2120 
	#R_PARISC_GPREL16F
 93

	)

2121 
	#R_PARISC_GPREL16WF
 94

	)

2122 
	#R_PARISC_GPREL16DF
 95

	)

2123 
	#R_PARISC_LTOFF64
 96

	)

2124 
	#R_PARISC_LTOFF14WR
 99

	)

2125 
	#R_PARISC_LTOFF14DR
 100

	)

2126 
	#R_PARISC_LTOFF16F
 101

	)

2127 
	#R_PARISC_LTOFF16WF
 102

	)

2128 
	#R_PARISC_LTOFF16DF
 103

	)

2129 
	#R_PARISC_SECREL64
 104

	)

2130 
	#R_PARISC_SEGREL64
 112

	)

2131 
	#R_PARISC_PLTOFF14WR
 115

	)

2132 
	#R_PARISC_PLTOFF14DR
 116

	)

2133 
	#R_PARISC_PLTOFF16F
 117

	)

2134 
	#R_PARISC_PLTOFF16WF
 118

	)

2135 
	#R_PARISC_PLTOFF16DF
 119

	)

2136 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2137 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2138 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2139 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2140 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2141 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2142 
	#R_PARISC_LORESERVE
 128

	)

2143 
	#R_PARISC_COPY
 128

	)

2144 
	#R_PARISC_IPLT
 129

	)

2145 
	#R_PARISC_EPLT
 130

	)

2146 
	#R_PARISC_TPREL32
 153

	)

2147 
	#R_PARISC_TPREL21L
 154

	)

2148 
	#R_PARISC_TPREL14R
 158

	)

2149 
	#R_PARISC_LTOFF_TP21L
 162

	)

2150 
	#R_PARISC_LTOFF_TP14R
 166

	)

2151 
	#R_PARISC_LTOFF_TP14F
 167

	)

2152 
	#R_PARISC_TPREL64
 216

	)

2153 
	#R_PARISC_TPREL14WR
 219

	)

2154 
	#R_PARISC_TPREL14DR
 220

	)

2155 
	#R_PARISC_TPREL16F
 221

	)

2156 
	#R_PARISC_TPREL16WF
 222

	)

2157 
	#R_PARISC_TPREL16DF
 223

	)

2158 
	#R_PARISC_LTOFF_TP64
 224

	)

2159 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2160 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2161 
	#R_PARISC_LTOFF_TP16F
 229

	)

2162 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2163 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2164 
	#R_PARISC_GNU_VTENTRY
 232

	)

2165 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2166 
	#R_PARISC_TLS_GD21L
 234

	)

2167 
	#R_PARISC_TLS_GD14R
 235

	)

2168 
	#R_PARISC_TLS_GDCALL
 236

	)

2169 
	#R_PARISC_TLS_LDM21L
 237

	)

2170 
	#R_PARISC_TLS_LDM14R
 238

	)

2171 
	#R_PARISC_TLS_LDMCALL
 239

	)

2172 
	#R_PARISC_TLS_LDO21L
 240

	)

2173 
	#R_PARISC_TLS_LDO14R
 241

	)

2174 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2175 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2176 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2177 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2178 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2179 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2180 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2181 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2182 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2183 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2184 
	#R_PARISC_HIRESERVE
 255

	)

2188 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2189 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2190 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2191 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2192 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2193 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2194 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2195 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2196 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2197 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2198 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2199 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2200 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2201 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2202 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2204 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2205 
	#PT_PARISC_UNWIND
 0x70000001

	)

2209 
	#PF_PARISC_SBP
 0x08000000

	)

2211 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2212 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2213 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2214 
	#PF_HP_CODE
 0x01000000

	)

2215 
	#PF_HP_MODIFY
 0x02000000

	)

2216 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2217 
	#PF_HP_SBP
 0x08000000

	)

2224 
	#EF_ALPHA_32BIT
 1

	)

2225 
	#EF_ALPHA_CANRELAX
 2

	)

2230 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2231 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2235 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2238 
	#STO_ALPHA_NOPV
 0x80

	)

2239 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2243 
	#R_ALPHA_NONE
 0

	)

2244 
	#R_ALPHA_REFLONG
 1

	)

2245 
	#R_ALPHA_REFQUAD
 2

	)

2246 
	#R_ALPHA_GPREL32
 3

	)

2247 
	#R_ALPHA_LITERAL
 4

	)

2248 
	#R_ALPHA_LITUSE
 5

	)

2249 
	#R_ALPHA_GPDISP
 6

	)

2250 
	#R_ALPHA_BRADDR
 7

	)

2251 
	#R_ALPHA_HINT
 8

	)

2252 
	#R_ALPHA_SREL16
 9

	)

2253 
	#R_ALPHA_SREL32
 10

	)

2254 
	#R_ALPHA_SREL64
 11

	)

2255 
	#R_ALPHA_GPRELHIGH
 17

	)

2256 
	#R_ALPHA_GPRELLOW
 18

	)

2257 
	#R_ALPHA_GPREL16
 19

	)

2258 
	#R_ALPHA_COPY
 24

	)

2259 
	#R_ALPHA_GLOB_DAT
 25

	)

2260 
	#R_ALPHA_JMP_SLOT
 26

	)

2261 
	#R_ALPHA_RELATIVE
 27

	)

2262 
	#R_ALPHA_TLS_GD_HI
 28

	)

2263 
	#R_ALPHA_TLSGD
 29

	)

2264 
	#R_ALPHA_TLS_LDM
 30

	)

2265 
	#R_ALPHA_DTPMOD64
 31

	)

2266 
	#R_ALPHA_GOTDTPREL
 32

	)

2267 
	#R_ALPHA_DTPREL64
 33

	)

2268 
	#R_ALPHA_DTPRELHI
 34

	)

2269 
	#R_ALPHA_DTPRELLO
 35

	)

2270 
	#R_ALPHA_DTPREL16
 36

	)

2271 
	#R_ALPHA_GOTTPREL
 37

	)

2272 
	#R_ALPHA_TPREL64
 38

	)

2273 
	#R_ALPHA_TPRELHI
 39

	)

2274 
	#R_ALPHA_TPRELLO
 40

	)

2275 
	#R_ALPHA_TPREL16
 41

	)

2277 
	#R_ALPHA_NUM
 46

	)

2280 
	#LITUSE_ALPHA_ADDR
 0

	)

2281 
	#LITUSE_ALPHA_BASE
 1

	)

2282 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2283 
	#LITUSE_ALPHA_JSR
 3

	)

2284 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2285 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2288 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2289 
	#DT_ALPHA_NUM
 1

	)

2294 
	#EF_PPC_EMB
 0x80000000

	)

2297 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2298 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2302 
	#R_PPC_NONE
 0

	)

2303 
	#R_PPC_ADDR32
 1

	)

2304 
	#R_PPC_ADDR24
 2

	)

2305 
	#R_PPC_ADDR16
 3

	)

2306 
	#R_PPC_ADDR16_LO
 4

	)

2307 
	#R_PPC_ADDR16_HI
 5

	)

2308 
	#R_PPC_ADDR16_HA
 6

	)

2309 
	#R_PPC_ADDR14
 7

	)

2310 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2311 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2312 
	#R_PPC_REL24
 10

	)

2313 
	#R_PPC_REL14
 11

	)

2314 
	#R_PPC_REL14_BRTAKEN
 12

	)

2315 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2316 
	#R_PPC_GOT16
 14

	)

2317 
	#R_PPC_GOT16_LO
 15

	)

2318 
	#R_PPC_GOT16_HI
 16

	)

2319 
	#R_PPC_GOT16_HA
 17

	)

2320 
	#R_PPC_PLTREL24
 18

	)

2321 
	#R_PPC_COPY
 19

	)

2322 
	#R_PPC_GLOB_DAT
 20

	)

2323 
	#R_PPC_JMP_SLOT
 21

	)

2324 
	#R_PPC_RELATIVE
 22

	)

2325 
	#R_PPC_LOCAL24PC
 23

	)

2326 
	#R_PPC_UADDR32
 24

	)

2327 
	#R_PPC_UADDR16
 25

	)

2328 
	#R_PPC_REL32
 26

	)

2329 
	#R_PPC_PLT32
 27

	)

2330 
	#R_PPC_PLTREL32
 28

	)

2331 
	#R_PPC_PLT16_LO
 29

	)

2332 
	#R_PPC_PLT16_HI
 30

	)

2333 
	#R_PPC_PLT16_HA
 31

	)

2334 
	#R_PPC_SDAREL16
 32

	)

2335 
	#R_PPC_SECTOFF
 33

	)

2336 
	#R_PPC_SECTOFF_LO
 34

	)

2337 
	#R_PPC_SECTOFF_HI
 35

	)

2338 
	#R_PPC_SECTOFF_HA
 36

	)

2341 
	#R_PPC_TLS
 67

	)

2342 
	#R_PPC_DTPMOD32
 68

	)

2343 
	#R_PPC_TPREL16
 69

	)

2344 
	#R_PPC_TPREL16_LO
 70

	)

2345 
	#R_PPC_TPREL16_HI
 71

	)

2346 
	#R_PPC_TPREL16_HA
 72

	)

2347 
	#R_PPC_TPREL32
 73

	)

2348 
	#R_PPC_DTPREL16
 74

	)

2349 
	#R_PPC_DTPREL16_LO
 75

	)

2350 
	#R_PPC_DTPREL16_HI
 76

	)

2351 
	#R_PPC_DTPREL16_HA
 77

	)

2352 
	#R_PPC_DTPREL32
 78

	)

2353 
	#R_PPC_GOT_TLSGD16
 79

	)

2354 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2355 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2356 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2357 
	#R_PPC_GOT_TLSLD16
 83

	)

2358 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2359 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2360 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2361 
	#R_PPC_GOT_TPREL16
 87

	)

2362 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2363 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2364 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2365 
	#R_PPC_GOT_DTPREL16
 91

	)

2366 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2367 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2368 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2369 
	#R_PPC_TLSGD
 95

	)

2370 
	#R_PPC_TLSLD
 96

	)

2374 
	#R_PPC_EMB_NADDR32
 101

	)

2375 
	#R_PPC_EMB_NADDR16
 102

	)

2376 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2377 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2378 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2379 
	#R_PPC_EMB_SDAI16
 106

	)

2380 
	#R_PPC_EMB_SDA2I16
 107

	)

2381 
	#R_PPC_EMB_SDA2REL
 108

	)

2382 
	#R_PPC_EMB_SDA21
 109

	)

2383 
	#R_PPC_EMB_MRKREF
 110

	)

2384 
	#R_PPC_EMB_RELSEC16
 111

	)

2385 
	#R_PPC_EMB_RELST_LO
 112

	)

2386 
	#R_PPC_EMB_RELST_HI
 113

	)

2387 
	#R_PPC_EMB_RELST_HA
 114

	)

2388 
	#R_PPC_EMB_BIT_FLD
 115

	)

2389 
	#R_PPC_EMB_RELSDA
 116

	)

2392 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2393 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2394 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2395 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2396 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2397 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2400 
	#R_PPC_IRELATIVE
 248

	)

2403 
	#R_PPC_REL16
 249

	)

2404 
	#R_PPC_REL16_LO
 250

	)

2405 
	#R_PPC_REL16_HI
 251

	)

2406 
	#R_PPC_REL16_HA
 252

	)

2410 
	#R_PPC_TOC16
 255

	)

2413 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2414 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2415 
	#DT_PPC_NUM
 2

	)

2418 
	#PPC_OPT_TLS
 1

	)

2421 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2422 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2423 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2424 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2425 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2426 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2427 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2428 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2429 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2430 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2431 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2432 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2433 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2434 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2435 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2436 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2437 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2438 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2440 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2441 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2442 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2443 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2445 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2446 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2447 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2448 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2449 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2450 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2451 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2452 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2454 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2455 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2456 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2457 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2458 
	#R_PPC64_ADDR30
 37

	)

2459 
	#R_PPC64_ADDR64
 38

	)

2460 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2461 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2462 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2463 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2464 
	#R_PPC64_UADDR64
 43

	)

2465 
	#R_PPC64_REL64
 44

	)

2466 
	#R_PPC64_PLT64
 45

	)

2467 
	#R_PPC64_PLTREL64
 46

	)

2468 
	#R_PPC64_TOC16
 47

	)

2469 
	#R_PPC64_TOC16_LO
 48

	)

2470 
	#R_PPC64_TOC16_HI
 49

	)

2471 
	#R_PPC64_TOC16_HA
 50

	)

2472 
	#R_PPC64_TOC
 51

	)

2473 
	#R_PPC64_PLTGOT16
 52

	)

2474 
	#R_PPC64_PLTGOT16_LO
 53

	)

2475 
	#R_PPC64_PLTGOT16_HI
 54

	)

2476 
	#R_PPC64_PLTGOT16_HA
 55

	)

2478 
	#R_PPC64_ADDR16_DS
 56

	)

2479 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2480 
	#R_PPC64_GOT16_DS
 58

	)

2481 
	#R_PPC64_GOT16_LO_DS
 59

	)

2482 
	#R_PPC64_PLT16_LO_DS
 60

	)

2483 
	#R_PPC64_SECTOFF_DS
 61

	)

2484 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2485 
	#R_PPC64_TOC16_DS
 63

	)

2486 
	#R_PPC64_TOC16_LO_DS
 64

	)

2487 
	#R_PPC64_PLTGOT16_DS
 65

	)

2488 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2491 
	#R_PPC64_TLS
 67

	)

2492 
	#R_PPC64_DTPMOD64
 68

	)

2493 
	#R_PPC64_TPREL16
 69

	)

2494 
	#R_PPC64_TPREL16_LO
 70

	)

2495 
	#R_PPC64_TPREL16_HI
 71

	)

2496 
	#R_PPC64_TPREL16_HA
 72

	)

2497 
	#R_PPC64_TPREL64
 73

	)

2498 
	#R_PPC64_DTPREL16
 74

	)

2499 
	#R_PPC64_DTPREL16_LO
 75

	)

2500 
	#R_PPC64_DTPREL16_HI
 76

	)

2501 
	#R_PPC64_DTPREL16_HA
 77

	)

2502 
	#R_PPC64_DTPREL64
 78

	)

2503 
	#R_PPC64_GOT_TLSGD16
 79

	)

2504 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2505 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2506 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2507 
	#R_PPC64_GOT_TLSLD16
 83

	)

2508 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2509 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2510 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2511 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2512 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2513 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2514 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2515 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2516 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2517 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2518 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2519 
	#R_PPC64_TPREL16_DS
 95

	)

2520 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2521 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2522 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2523 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2524 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2525 
	#R_PPC64_DTPREL16_DS
 101

	)

2526 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2527 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2528 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2529 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2530 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2531 
	#R_PPC64_TLSGD
 107

	)

2532 
	#R_PPC64_TLSLD
 108

	)

2533 
	#R_PPC64_TOCSAVE
 109

	)

2536 
	#R_PPC64_ADDR16_HIGH
 110

	)

2537 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2538 
	#R_PPC64_TPREL16_HIGH
 112

	)

2539 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2540 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2541 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2544 
	#R_PPC64_JMP_IREL
 247

	)

2545 
	#R_PPC64_IRELATIVE
 248

	)

2546 
	#R_PPC64_REL16
 249

	)

2547 
	#R_PPC64_REL16_LO
 250

	)

2548 
	#R_PPC64_REL16_HI
 251

	)

2549 
	#R_PPC64_REL16_HA
 252

	)

2555 
	#EF_PPC64_ABI
 3

	)

2558 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2559 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2560 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2561 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2562 
	#DT_PPC64_NUM
 4

	)

2565 
	#PPC64_OPT_TLS
 1

	)

2566 
	#PPC64_OPT_MULTI_TOC
 2

	)

2567 
	#PPC64_OPT_LOCALENTRY
 4

	)

2570 
	#STO_PPC64_LOCAL_BIT
 5

	)

2571 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2572 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2573 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2579 
	#EF_ARM_RELEXEC
 0x01

	)

2580 
	#EF_ARM_HASENTRY
 0x02

	)

2581 
	#EF_ARM_INTERWORK
 0x04

	)

2582 
	#EF_ARM_APCS_26
 0x08

	)

2583 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2584 
	#EF_ARM_PIC
 0x20

	)

2585 
	#EF_ARM_ALIGN8
 0x40

	)

2586 
	#EF_ARM_NEW_ABI
 0x80

	)

2587 
	#EF_ARM_OLD_ABI
 0x100

	)

2588 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2589 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2590 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2592 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2593 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2598 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2599 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2600 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2601 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2604 
	#EF_ARM_BE8
 0x00800000

	)

2605 
	#EF_ARM_LE8
 0x00400000

	)

2607 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2608 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2609 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2610 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2611 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2612 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2613 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2616 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2617 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2620 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2621 
	#SHF_ARM_COMDEF
 0x80000000

	)

2625 
	#PF_ARM_SB
 0x10000000

	)

2627 
	#PF_ARM_PI
 0x20000000

	)

2628 
	#PF_ARM_ABS
 0x40000000

	)

2631 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2634 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2635 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2636 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2641 
	#R_AARCH64_NONE
 0

	)

2644 
	#R_AARCH64_P32_ABS32
 1

	)

2645 
	#R_AARCH64_P32_COPY
 180

	)

2646 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2647 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2648 
	#R_AARCH64_P32_RELATIVE
 183

	)

2649 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2650 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2651 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2652 
	#R_AARCH64_P32_TLSDESC
 187

	)

2653 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2656 
	#R_AARCH64_ABS64
 257

	)

2657 
	#R_AARCH64_ABS32
 258

	)

2658 
	#R_AARCH64_ABS16
 259

	)

2659 
	#R_AARCH64_PREL64
 260

	)

2660 
	#R_AARCH64_PREL32
 261

	)

2661 
	#R_AARCH64_PREL16
 262

	)

2662 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2663 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2664 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2665 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2666 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2667 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2668 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2669 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2670 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2671 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2672 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2673 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2674 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2675 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2676 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2677 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2678 
	#R_AARCH64_TSTBR14
 279

	)

2679 
	#R_AARCH64_CONDBR19
 280

	)

2680 
	#R_AARCH64_JUMP26
 282

	)

2681 
	#R_AARCH64_CALL26
 283

	)

2682 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2683 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2684 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2685 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2686 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2687 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2688 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2689 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2690 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2691 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2692 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2693 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2694 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2695 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2696 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2697 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2698 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2699 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2700 
	#R_AARCH64_GOTREL64
 307

	)

2701 
	#R_AARCH64_GOTREL32
 308

	)

2702 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2703 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2704 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2705 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2706 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2707 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2708 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2709 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2710 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2711 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2712 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2713 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2714 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2715 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2716 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2717 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2718 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2719 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2720 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2721 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2722 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2723 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2724 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2725 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2726 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2727 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2728 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2729 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2730 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2731 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2732 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2733 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2734 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2735 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2736 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2737 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2738 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2739 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2740 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2741 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2742 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2743 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2744 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2745 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2746 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2747 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2748 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2749 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2750 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2751 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2752 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2753 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2754 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2755 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2756 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2757 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2758 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2759 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2760 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2761 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2762 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2763 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2764 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2765 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2766 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2767 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2768 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2769 
	#R_AARCH64_COPY
 1024

	)

2770 
	#R_AARCH64_GLOB_DAT
 1025

	)

2771 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2772 
	#R_AARCH64_RELATIVE
 1027

	)

2773 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2774 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2775 
	#R_AARCH64_TLS_TPREL
 1030

	)

2776 
	#R_AARCH64_TLSDESC
 1031

	)

2777 
	#R_AARCH64_IRELATIVE
 1032

	)

2781 
	#R_ARM_NONE
 0

	)

2782 
	#R_ARM_PC24
 1

	)

2784 
	#R_ARM_ABS32
 2

	)

2785 
	#R_ARM_REL32
 3

	)

2786 
	#R_ARM_PC13
 4

	)

2787 
	#R_ARM_ABS16
 5

	)

2788 
	#R_ARM_ABS12
 6

	)

2789 
	#R_ARM_THM_ABS5
 7

	)

2790 
	#R_ARM_ABS8
 8

	)

2791 
	#R_ARM_SBREL32
 9

	)

2792 
	#R_ARM_THM_PC22
 10

	)

2793 
	#R_ARM_THM_PC8
 11

	)

2795 
	#R_ARM_AMP_VCALL9
 12

	)

2796 
	#R_ARM_SWI24
 13

	)

2797 
	#R_ARM_TLS_DESC
 13

	)

2798 
	#R_ARM_THM_SWI8
 14

	)

2799 
	#R_ARM_XPC25
 15

	)

2800 
	#R_ARM_THM_XPC22
 16

	)

2801 
	#R_ARM_TLS_DTPMOD32
 17

	)

2802 
	#R_ARM_TLS_DTPOFF32
 18

	)

2803 
	#R_ARM_TLS_TPOFF32
 19

	)

2804 
	#R_ARM_COPY
 20

	)

2805 
	#R_ARM_GLOB_DAT
 21

	)

2806 
	#R_ARM_JUMP_SLOT
 22

	)

2807 
	#R_ARM_RELATIVE
 23

	)

2808 
	#R_ARM_GOTOFF
 24

	)

2809 
	#R_ARM_GOTPC
 25

	)

2810 
	#R_ARM_GOT32
 26

	)

2811 
	#R_ARM_PLT32
 27

	)

2812 
	#R_ARM_CALL
 28

	)

2813 
	#R_ARM_JUMP24
 29

	)

2815 
	#R_ARM_THM_JUMP24
 30

	)

2816 
	#R_ARM_BASE_ABS
 31

	)

2817 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2818 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2819 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2820 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2821 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2822 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2823 
	#R_ARM_TARGET1
 38

	)

2824 
	#R_ARM_SBREL31
 39

	)

2825 
	#R_ARM_V4BX
 40

	)

2826 
	#R_ARM_TARGET2
 41

	)

2827 
	#R_ARM_PREL31
 42

	)

2828 
	#R_ARM_MOVW_ABS_NC
 43

	)

2829 
	#R_ARM_MOVT_ABS
 44

	)

2830 
	#R_ARM_MOVW_PREL_NC
 45

	)

2831 
	#R_ARM_MOVT_PREL
 46

	)

2832 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2833 
	#R_ARM_THM_MOVT_ABS
 48

	)

2835 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2837 
	#R_ARM_THM_MOVT_PREL
 50

	)

2839 
	#R_ARM_THM_JUMP19
 51

	)

2841 
	#R_ARM_THM_JUMP6
 52

	)

2843 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2845 
	#R_ARM_THM_PC12
 54

	)

2847 
	#R_ARM_ABS32_NOI
 55

	)

2848 
	#R_ARM_REL32_NOI
 56

	)

2849 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2850 
	#R_ARM_ALU_PC_G0
 58

	)

2851 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2852 
	#R_ARM_ALU_PC_G1
 60

	)

2853 
	#R_ARM_ALU_PC_G2
 61

	)

2854 
	#R_ARM_LDR_PC_G1
 62

	)

2855 
	#R_ARM_LDR_PC_G2
 63

	)

2856 
	#R_ARM_LDRS_PC_G0
 64

	)

2858 
	#R_ARM_LDRS_PC_G1
 65

	)

2860 
	#R_ARM_LDRS_PC_G2
 66

	)

2862 
	#R_ARM_LDC_PC_G0
 67

	)

2863 
	#R_ARM_LDC_PC_G1
 68

	)

2864 
	#R_ARM_LDC_PC_G2
 69

	)

2865 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2866 
	#R_ARM_ALU_SB_G0
 71

	)

2867 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2868 
	#R_ARM_ALU_SB_G1
 73

	)

2869 
	#R_ARM_ALU_SB_G2
 74

	)

2870 
	#R_ARM_LDR_SB_G0
 75

	)

2872 
	#R_ARM_LDR_SB_G1
 76

	)

2874 
	#R_ARM_LDR_SB_G2
 77

	)

2876 
	#R_ARM_LDRS_SB_G0
 78

	)

2878 
	#R_ARM_LDRS_SB_G1
 79

	)

2880 
	#R_ARM_LDRS_SB_G2
 80

	)

2882 
	#R_ARM_LDC_SB_G0
 81

	)

2883 
	#R_ARM_LDC_SB_G1
 82

	)

2884 
	#R_ARM_LDC_SB_G2
 83

	)

2885 
	#R_ARM_MOVW_BREL_NC
 84

	)

2887 
	#R_ARM_MOVT_BREL
 85

	)

2889 
	#R_ARM_MOVW_BREL
 86

	)

2891 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2893 
	#R_ARM_THM_MOVT_BREL
 88

	)

2895 
	#R_ARM_THM_MOVW_BREL
 89

	)

2897 
	#R_ARM_TLS_GOTDESC
 90

	)

2898 
	#R_ARM_TLS_CALL
 91

	)

2899 
	#R_ARM_TLS_DESCSEQ
 92

	)

2900 
	#R_ARM_THM_TLS_CALL
 93

	)

2901 
	#R_ARM_PLT32_ABS
 94

	)

2902 
	#R_ARM_GOT_ABS
 95

	)

2903 
	#R_ARM_GOT_PREL
 96

	)

2904 
	#R_ARM_GOT_BREL12
 97

	)

2906 
	#R_ARM_GOTOFF12
 98

	)

2908 
	#R_ARM_GOTRELAX
 99

	)

2909 
	#R_ARM_GNU_VTENTRY
 100

	)

2910 
	#R_ARM_GNU_VTINHERIT
 101

	)

2911 
	#R_ARM_THM_PC11
 102

	)

2912 
	#R_ARM_THM_PC9
 103

	)

2914 
	#R_ARM_TLS_GD32
 104

	)

2916 
	#R_ARM_TLS_LDM32
 105

	)

2918 
	#R_ARM_TLS_LDO32
 106

	)

2920 
	#R_ARM_TLS_IE32
 107

	)

2922 
	#R_ARM_TLS_LE32
 108

	)

2924 
	#R_ARM_TLS_LDO12
 109

	)

2926 
	#R_ARM_TLS_LE12
 110

	)

2928 
	#R_ARM_TLS_IE12GP
 111

	)

2930 
	#R_ARM_ME_TOO
 128

	)

2931 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2932 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2933 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2934 
	#R_ARM_THM_GOT_BREL12
 131

	)

2936 
	#R_ARM_IRELATIVE
 160

	)

2937 
	#R_ARM_RXPC25
 249

	)

2938 
	#R_ARM_RSBREL32
 250

	)

2939 
	#R_ARM_THM_RPC22
 251

	)

2940 
	#R_ARM_RREL32
 252

	)

2941 
	#R_ARM_RABS22
 253

	)

2942 
	#R_ARM_RPC24
 254

	)

2943 
	#R_ARM_RBASE
 255

	)

2945 
	#R_ARM_NUM
 256

	)

2950 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2951 
	#EF_IA_64_ABI64
 0x00000010

	)

2952 
	#EF_IA_64_ARCH
 0xff000000

	)

2955 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2956 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2957 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2958 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2959 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2962 
	#PF_IA_64_NORECOV
 0x80000000

	)

2965 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2966 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2969 
	#SHF_IA_64_SHORT
 0x10000000

	)

2970 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2973 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2974 
	#DT_IA_64_NUM
 1

	)

2977 
	#R_IA64_NONE
 0x00

	)

2978 
	#R_IA64_IMM14
 0x21

	)

2979 
	#R_IA64_IMM22
 0x22

	)

2980 
	#R_IA64_IMM64
 0x23

	)

2981 
	#R_IA64_DIR32MSB
 0x24

	)

2982 
	#R_IA64_DIR32LSB
 0x25

	)

2983 
	#R_IA64_DIR64MSB
 0x26

	)

2984 
	#R_IA64_DIR64LSB
 0x27

	)

2985 
	#R_IA64_GPREL22
 0x2®

	)

2986 
	#R_IA64_GPREL64I
 0x2b

	)

2987 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2988 
	#R_IA64_GPREL32LSB
 0x2d

	)

2989 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2990 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2991 
	#R_IA64_LTOFF22
 0x32

	)

2992 
	#R_IA64_LTOFF64I
 0x33

	)

2993 
	#R_IA64_PLTOFF22
 0x3®

	)

2994 
	#R_IA64_PLTOFF64I
 0x3b

	)

2995 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2996 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2997 
	#R_IA64_FPTR64I
 0x43

	)

2998 
	#R_IA64_FPTR32MSB
 0x44

	)

2999 
	#R_IA64_FPTR32LSB
 0x45

	)

3000 
	#R_IA64_FPTR64MSB
 0x46

	)

3001 
	#R_IA64_FPTR64LSB
 0x47

	)

3002 
	#R_IA64_PCREL60B
 0x48

	)

3003 
	#R_IA64_PCREL21B
 0x49

	)

3004 
	#R_IA64_PCREL21M
 0x4®

	)

3005 
	#R_IA64_PCREL21F
 0x4b

	)

3006 
	#R_IA64_PCREL32MSB
 0x4¯

	)

3007 
	#R_IA64_PCREL32LSB
 0x4d

	)

3008 
	#R_IA64_PCREL64MSB
 0x4ê

	)

3009 
	#R_IA64_PCREL64LSB
 0x4‡

	)

3010 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

3011 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3012 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3013 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3014 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3015 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3016 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3017 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3018 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3019 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3020 
	#R_IA64_SECREL32MSB
 0x64

	)

3021 
	#R_IA64_SECREL32LSB
 0x65

	)

3022 
	#R_IA64_SECREL64MSB
 0x66

	)

3023 
	#R_IA64_SECREL64LSB
 0x67

	)

3024 
	#R_IA64_REL32MSB
 0x6¯

	)

3025 
	#R_IA64_REL32LSB
 0x6d

	)

3026 
	#R_IA64_REL64MSB
 0x6ê

	)

3027 
	#R_IA64_REL64LSB
 0x6‡

	)

3028 
	#R_IA64_LTV32MSB
 0x74

	)

3029 
	#R_IA64_LTV32LSB
 0x75

	)

3030 
	#R_IA64_LTV64MSB
 0x76

	)

3031 
	#R_IA64_LTV64LSB
 0x77

	)

3032 
	#R_IA64_PCREL21BI
 0x79

	)

3033 
	#R_IA64_PCREL22
 0x7®

	)

3034 
	#R_IA64_PCREL64I
 0x7b

	)

3035 
	#R_IA64_IPLTMSB
 0x80

	)

3036 
	#R_IA64_IPLTLSB
 0x81

	)

3037 
	#R_IA64_COPY
 0x84

	)

3038 
	#R_IA64_SUB
 0x85

	)

3039 
	#R_IA64_LTOFF22X
 0x86

	)

3040 
	#R_IA64_LDXMOV
 0x87

	)

3041 
	#R_IA64_TPREL14
 0x91

	)

3042 
	#R_IA64_TPREL22
 0x92

	)

3043 
	#R_IA64_TPREL64I
 0x93

	)

3044 
	#R_IA64_TPREL64MSB
 0x96

	)

3045 
	#R_IA64_TPREL64LSB
 0x97

	)

3046 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3047 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3048 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3049 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3050 
	#R_IA64_DTPREL14
 0xb1

	)

3051 
	#R_IA64_DTPREL22
 0xb2

	)

3052 
	#R_IA64_DTPREL64I
 0xb3

	)

3053 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3054 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3055 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3056 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3057 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3062 
	#EF_SH_MACH_MASK
 0x1f

	)

3063 
	#EF_SH_UNKNOWN
 0x0

	)

3064 
	#EF_SH1
 0x1

	)

3065 
	#EF_SH2
 0x2

	)

3066 
	#EF_SH3
 0x3

	)

3067 
	#EF_SH_DSP
 0x4

	)

3068 
	#EF_SH3_DSP
 0x5

	)

3069 
	#EF_SH4AL_DSP
 0x6

	)

3070 
	#EF_SH3E
 0x8

	)

3071 
	#EF_SH4
 0x9

	)

3072 
	#EF_SH2E
 0xb

	)

3073 
	#EF_SH4A
 0xc

	)

3074 
	#EF_SH2A
 0xd

	)

3075 
	#EF_SH4_NOFPU
 0x10

	)

3076 
	#EF_SH4A_NOFPU
 0x11

	)

3077 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3078 
	#EF_SH2A_NOFPU
 0x13

	)

3079 
	#EF_SH3_NOMMU
 0x14

	)

3080 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3081 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3082 
	#EF_SH2A_SH4
 0x17

	)

3083 
	#EF_SH2A_SH3E
 0x18

	)

3086 
	#R_SH_NONE
 0

	)

3087 
	#R_SH_DIR32
 1

	)

3088 
	#R_SH_REL32
 2

	)

3089 
	#R_SH_DIR8WPN
 3

	)

3090 
	#R_SH_IND12W
 4

	)

3091 
	#R_SH_DIR8WPL
 5

	)

3092 
	#R_SH_DIR8WPZ
 6

	)

3093 
	#R_SH_DIR8BP
 7

	)

3094 
	#R_SH_DIR8W
 8

	)

3095 
	#R_SH_DIR8L
 9

	)

3096 
	#R_SH_SWITCH16
 25

	)

3097 
	#R_SH_SWITCH32
 26

	)

3098 
	#R_SH_USES
 27

	)

3099 
	#R_SH_COUNT
 28

	)

3100 
	#R_SH_ALIGN
 29

	)

3101 
	#R_SH_CODE
 30

	)

3102 
	#R_SH_DATA
 31

	)

3103 
	#R_SH_LABEL
 32

	)

3104 
	#R_SH_SWITCH8
 33

	)

3105 
	#R_SH_GNU_VTINHERIT
 34

	)

3106 
	#R_SH_GNU_VTENTRY
 35

	)

3107 
	#R_SH_TLS_GD_32
 144

	)

3108 
	#R_SH_TLS_LD_32
 145

	)

3109 
	#R_SH_TLS_LDO_32
 146

	)

3110 
	#R_SH_TLS_IE_32
 147

	)

3111 
	#R_SH_TLS_LE_32
 148

	)

3112 
	#R_SH_TLS_DTPMOD32
 149

	)

3113 
	#R_SH_TLS_DTPOFF32
 150

	)

3114 
	#R_SH_TLS_TPOFF32
 151

	)

3115 
	#R_SH_GOT32
 160

	)

3116 
	#R_SH_PLT32
 161

	)

3117 
	#R_SH_COPY
 162

	)

3118 
	#R_SH_GLOB_DAT
 163

	)

3119 
	#R_SH_JMP_SLOT
 164

	)

3120 
	#R_SH_RELATIVE
 165

	)

3121 
	#R_SH_GOTOFF
 166

	)

3122 
	#R_SH_GOTPC
 167

	)

3124 
	#R_SH_NUM
 256

	)

3130 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3134 
	#R_390_NONE
 0

	)

3135 
	#R_390_8
 1

	)

3136 
	#R_390_12
 2

	)

3137 
	#R_390_16
 3

	)

3138 
	#R_390_32
 4

	)

3139 
	#R_390_PC32
 5

	)

3140 
	#R_390_GOT12
 6

	)

3141 
	#R_390_GOT32
 7

	)

3142 
	#R_390_PLT32
 8

	)

3143 
	#R_390_COPY
 9

	)

3144 
	#R_390_GLOB_DAT
 10

	)

3145 
	#R_390_JMP_SLOT
 11

	)

3146 
	#R_390_RELATIVE
 12

	)

3147 
	#R_390_GOTOFF32
 13

	)

3148 
	#R_390_GOTPC
 14

	)

3149 
	#R_390_GOT16
 15

	)

3150 
	#R_390_PC16
 16

	)

3151 
	#R_390_PC16DBL
 17

	)

3152 
	#R_390_PLT16DBL
 18

	)

3153 
	#R_390_PC32DBL
 19

	)

3154 
	#R_390_PLT32DBL
 20

	)

3155 
	#R_390_GOTPCDBL
 21

	)

3156 
	#R_390_64
 22

	)

3157 
	#R_390_PC64
 23

	)

3158 
	#R_390_GOT64
 24

	)

3159 
	#R_390_PLT64
 25

	)

3160 
	#R_390_GOTENT
 26

	)

3161 
	#R_390_GOTOFF16
 27

	)

3162 
	#R_390_GOTOFF64
 28

	)

3163 
	#R_390_GOTPLT12
 29

	)

3164 
	#R_390_GOTPLT16
 30

	)

3165 
	#R_390_GOTPLT32
 31

	)

3166 
	#R_390_GOTPLT64
 32

	)

3167 
	#R_390_GOTPLTENT
 33

	)

3168 
	#R_390_PLTOFF16
 34

	)

3169 
	#R_390_PLTOFF32
 35

	)

3170 
	#R_390_PLTOFF64
 36

	)

3171 
	#R_390_TLS_LOAD
 37

	)

3172 
	#R_390_TLS_GDCALL
 38

	)

3174 
	#R_390_TLS_LDCALL
 39

	)

3176 
	#R_390_TLS_GD32
 40

	)

3178 
	#R_390_TLS_GD64
 41

	)

3180 
	#R_390_TLS_GOTIE12
 42

	)

3182 
	#R_390_TLS_GOTIE32
 43

	)

3184 
	#R_390_TLS_GOTIE64
 44

	)

3186 
	#R_390_TLS_LDM32
 45

	)

3188 
	#R_390_TLS_LDM64
 46

	)

3190 
	#R_390_TLS_IE32
 47

	)

3192 
	#R_390_TLS_IE64
 48

	)

3194 
	#R_390_TLS_IEENT
 49

	)

3196 
	#R_390_TLS_LE32
 50

	)

3198 
	#R_390_TLS_LE64
 51

	)

3200 
	#R_390_TLS_LDO32
 52

	)

3202 
	#R_390_TLS_LDO64
 53

	)

3204 
	#R_390_TLS_DTPMOD
 54

	)

3205 
	#R_390_TLS_DTPOFF
 55

	)

3206 
	#R_390_TLS_TPOFF
 56

	)

3208 
	#R_390_20
 57

	)

3209 
	#R_390_GOT20
 58

	)

3210 
	#R_390_GOTPLT20
 59

	)

3211 
	#R_390_TLS_GOTIE20
 60

	)

3213 
	#R_390_IRELATIVE
 61

	)

3215 
	#R_390_NUM
 62

	)

3219 
	#R_CRIS_NONE
 0

	)

3220 
	#R_CRIS_8
 1

	)

3221 
	#R_CRIS_16
 2

	)

3222 
	#R_CRIS_32
 3

	)

3223 
	#R_CRIS_8_PCREL
 4

	)

3224 
	#R_CRIS_16_PCREL
 5

	)

3225 
	#R_CRIS_32_PCREL
 6

	)

3226 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3227 
	#R_CRIS_GNU_VTENTRY
 8

	)

3228 
	#R_CRIS_COPY
 9

	)

3229 
	#R_CRIS_GLOB_DAT
 10

	)

3230 
	#R_CRIS_JUMP_SLOT
 11

	)

3231 
	#R_CRIS_RELATIVE
 12

	)

3232 
	#R_CRIS_16_GOT
 13

	)

3233 
	#R_CRIS_32_GOT
 14

	)

3234 
	#R_CRIS_16_GOTPLT
 15

	)

3235 
	#R_CRIS_32_GOTPLT
 16

	)

3236 
	#R_CRIS_32_GOTREL
 17

	)

3237 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3238 
	#R_CRIS_32_PLT_PCREL
 19

	)

3240 
	#R_CRIS_NUM
 20

	)

3244 
	#R_X86_64_NONE
 0

	)

3245 
	#R_X86_64_64
 1

	)

3246 
	#R_X86_64_PC32
 2

	)

3247 
	#R_X86_64_GOT32
 3

	)

3248 
	#R_X86_64_PLT32
 4

	)

3249 
	#R_X86_64_COPY
 5

	)

3250 
	#R_X86_64_GLOB_DAT
 6

	)

3251 
	#R_X86_64_JUMP_SLOT
 7

	)

3252 
	#R_X86_64_RELATIVE
 8

	)

3253 
	#R_X86_64_GOTPCREL
 9

	)

3255 
	#R_X86_64_32
 10

	)

3256 
	#R_X86_64_32S
 11

	)

3257 
	#R_X86_64_16
 12

	)

3258 
	#R_X86_64_PC16
 13

	)

3259 
	#R_X86_64_8
 14

	)

3260 
	#R_X86_64_PC8
 15

	)

3261 
	#R_X86_64_DTPMOD64
 16

	)

3262 
	#R_X86_64_DTPOFF64
 17

	)

3263 
	#R_X86_64_TPOFF64
 18

	)

3264 
	#R_X86_64_TLSGD
 19

	)

3266 
	#R_X86_64_TLSLD
 20

	)

3268 
	#R_X86_64_DTPOFF32
 21

	)

3269 
	#R_X86_64_GOTTPOFF
 22

	)

3271 
	#R_X86_64_TPOFF32
 23

	)

3272 
	#R_X86_64_PC64
 24

	)

3273 
	#R_X86_64_GOTOFF64
 25

	)

3274 
	#R_X86_64_GOTPC32
 26

	)

3276 
	#R_X86_64_GOT64
 27

	)

3277 
	#R_X86_64_GOTPCREL64
 28

	)

3279 
	#R_X86_64_GOTPC64
 29

	)

3280 
	#R_X86_64_GOTPLT64
 30

	)

3281 
	#R_X86_64_PLTOFF64
 31

	)

3283 
	#R_X86_64_SIZE32
 32

	)

3284 
	#R_X86_64_SIZE64
 33

	)

3285 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3286 
	#R_X86_64_TLSDESC_CALL
 35

	)

3288 
	#R_X86_64_TLSDESC
 36

	)

3289 
	#R_X86_64_IRELATIVE
 37

	)

3290 
	#R_X86_64_RELATIVE64
 38

	)

3293 
	#R_X86_64_GOTPCRELX
 41

	)

3296 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3299 
	#R_X86_64_NUM
 43

	)

3302 
	#SHT_X86_64_UNWIND
 0x70000001

	)

3306 
	#R_MN10300_NONE
 0

	)

3307 
	#R_MN10300_32
 1

	)

3308 
	#R_MN10300_16
 2

	)

3309 
	#R_MN10300_8
 3

	)

3310 
	#R_MN10300_PCREL32
 4

	)

3311 
	#R_MN10300_PCREL16
 5

	)

3312 
	#R_MN10300_PCREL8
 6

	)

3313 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3314 
	#R_MN10300_GNU_VTENTRY
 8

	)

3315 
	#R_MN10300_24
 9

	)

3316 
	#R_MN10300_GOTPC32
 10

	)

3317 
	#R_MN10300_GOTPC16
 11

	)

3318 
	#R_MN10300_GOTOFF32
 12

	)

3319 
	#R_MN10300_GOTOFF24
 13

	)

3320 
	#R_MN10300_GOTOFF16
 14

	)

3321 
	#R_MN10300_PLT32
 15

	)

3322 
	#R_MN10300_PLT16
 16

	)

3323 
	#R_MN10300_GOT32
 17

	)

3324 
	#R_MN10300_GOT24
 18

	)

3325 
	#R_MN10300_GOT16
 19

	)

3326 
	#R_MN10300_COPY
 20

	)

3327 
	#R_MN10300_GLOB_DAT
 21

	)

3328 
	#R_MN10300_JMP_SLOT
 22

	)

3329 
	#R_MN10300_RELATIVE
 23

	)

3330 
	#R_MN10300_TLS_GD
 24

	)

3331 
	#R_MN10300_TLS_LD
 25

	)

3332 
	#R_MN10300_TLS_LDO
 26

	)

3333 
	#R_MN10300_TLS_GOTIE
 27

	)

3335 
	#R_MN10300_TLS_IE
 28

	)

3337 
	#R_MN10300_TLS_LE
 29

	)

3339 
	#R_MN10300_TLS_DTPMOD
 30

	)

3340 
	#R_MN10300_TLS_DTPOFF
 31

	)

3341 
	#R_MN10300_TLS_TPOFF
 32

	)

3342 
	#R_MN10300_SYM_DIFF
 33

	)

3344 
	#R_MN10300_ALIGN
 34

	)

3346 
	#R_MN10300_NUM
 35

	)

3350 
	#R_M32R_NONE
 0

	)

3351 
	#R_M32R_16
 1

	)

3352 
	#R_M32R_32
 2

	)

3353 
	#R_M32R_24
 3

	)

3354 
	#R_M32R_10_PCREL
 4

	)

3355 
	#R_M32R_18_PCREL
 5

	)

3356 
	#R_M32R_26_PCREL
 6

	)

3357 
	#R_M32R_HI16_ULO
 7

	)

3358 
	#R_M32R_HI16_SLO
 8

	)

3359 
	#R_M32R_LO16
 9

	)

3360 
	#R_M32R_SDA16
 10

	)

3361 
	#R_M32R_GNU_VTINHERIT
 11

	)

3362 
	#R_M32R_GNU_VTENTRY
 12

	)

3364 
	#R_M32R_16_RELA
 33

	)

3365 
	#R_M32R_32_RELA
 34

	)

3366 
	#R_M32R_24_RELA
 35

	)

3367 
	#R_M32R_10_PCREL_RELA
 36

	)

3368 
	#R_M32R_18_PCREL_RELA
 37

	)

3369 
	#R_M32R_26_PCREL_RELA
 38

	)

3370 
	#R_M32R_HI16_ULO_RELA
 39

	)

3371 
	#R_M32R_HI16_SLO_RELA
 40

	)

3372 
	#R_M32R_LO16_RELA
 41

	)

3373 
	#R_M32R_SDA16_RELA
 42

	)

3374 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3375 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3376 
	#R_M32R_REL32
 45

	)

3378 
	#R_M32R_GOT24
 48

	)

3379 
	#R_M32R_26_PLTREL
 49

	)

3380 
	#R_M32R_COPY
 50

	)

3381 
	#R_M32R_GLOB_DAT
 51

	)

3382 
	#R_M32R_JMP_SLOT
 52

	)

3383 
	#R_M32R_RELATIVE
 53

	)

3384 
	#R_M32R_GOTOFF
 54

	)

3385 
	#R_M32R_GOTPC24
 55

	)

3386 
	#R_M32R_GOT16_HI_ULO
 56

	)

3388 
	#R_M32R_GOT16_HI_SLO
 57

	)

3390 
	#R_M32R_GOT16_LO
 58

	)

3391 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3393 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3395 
	#R_M32R_GOTPC_LO
 61

	)

3397 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3399 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3401 
	#R_M32R_GOTOFF_LO
 64

	)

3402 
	#R_M32R_NUM
 256

	)

3405 
	#R_MICROBLAZE_NONE
 0

	)

3406 
	#R_MICROBLAZE_32
 1

	)

3407 
	#R_MICROBLAZE_32_PCREL
 2

	)

3408 
	#R_MICROBLAZE_64_PCREL
 3

	)

3409 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3410 
	#R_MICROBLAZE_64
 5

	)

3411 
	#R_MICROBLAZE_32_LO
 6

	)

3412 
	#R_MICROBLAZE_SRO32
 7

	)

3413 
	#R_MICROBLAZE_SRW32
 8

	)

3414 
	#R_MICROBLAZE_64_NONE
 9

	)

3415 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3416 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3417 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3418 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3419 
	#R_MICROBLAZE_GOT_64
 14

	)

3420 
	#R_MICROBLAZE_PLT_64
 15

	)

3421 
	#R_MICROBLAZE_REL
 16

	)

3422 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3423 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3424 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3425 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3426 
	#R_MICROBLAZE_COPY
 21

	)

3427 
	#R_MICROBLAZE_TLS
 22

	)

3428 
	#R_MICROBLAZE_TLSGD
 23

	)

3429 
	#R_MICROBLAZE_TLSLD
 24

	)

3430 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3431 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3432 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3433 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3434 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3437 
	#DT_NIOS2_GP
 0x70000002

	)

3440 
	#R_NIOS2_NONE
 0

	)

3441 
	#R_NIOS2_S16
 1

	)

3442 
	#R_NIOS2_U16
 2

	)

3443 
	#R_NIOS2_PCREL16
 3

	)

3444 
	#R_NIOS2_CALL26
 4

	)

3445 
	#R_NIOS2_IMM5
 5

	)

3446 
	#R_NIOS2_CACHE_OPX
 6

	)

3447 
	#R_NIOS2_IMM6
 7

	)

3448 
	#R_NIOS2_IMM8
 8

	)

3449 
	#R_NIOS2_HI16
 9

	)

3450 
	#R_NIOS2_LO16
 10

	)

3451 
	#R_NIOS2_HIADJ16
 11

	)

3452 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3453 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3454 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3455 
	#R_NIOS2_GPREL
 15

	)

3456 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3457 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3458 
	#R_NIOS2_UJMP
 18

	)

3459 
	#R_NIOS2_CJMP
 19

	)

3460 
	#R_NIOS2_CALLR
 20

	)

3461 
	#R_NIOS2_ALIGN
 21

	)

3463 
	#R_NIOS2_GOT16
 22

	)

3464 
	#R_NIOS2_CALL16
 23

	)

3465 
	#R_NIOS2_GOTOFF_LO
 24

	)

3466 
	#R_NIOS2_GOTOFF_HA
 25

	)

3467 
	#R_NIOS2_PCREL_LO
 26

	)

3468 
	#R_NIOS2_PCREL_HA
 27

	)

3469 
	#R_NIOS2_TLS_GD16
 28

	)

3470 
	#R_NIOS2_TLS_LDM16
 29

	)

3471 
	#R_NIOS2_TLS_LDO16
 30

	)

3472 
	#R_NIOS2_TLS_IE16
 31

	)

3473 
	#R_NIOS2_TLS_LE16
 32

	)

3474 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3475 
	#R_NIOS2_TLS_DTPREL
 34

	)

3476 
	#R_NIOS2_TLS_TPREL
 35

	)

3477 
	#R_NIOS2_COPY
 36

	)

3478 
	#R_NIOS2_GLOB_DAT
 37

	)

3479 
	#R_NIOS2_JUMP_SLOT
 38

	)

3480 
	#R_NIOS2_RELATIVE
 39

	)

3481 
	#R_NIOS2_GOTOFF
 40

	)

3482 
	#R_NIOS2_CALL26_NOAT
 41

	)

3483 
	#R_NIOS2_GOT_LO
 42

	)

3484 
	#R_NIOS2_GOT_HA
 43

	)

3485 
	#R_NIOS2_CALL_LO
 44

	)

3486 
	#R_NIOS2_CALL_HA
 45

	)

3489 
	#R_TILEPRO_NONE
 0

	)

3490 
	#R_TILEPRO_32
 1

	)

3491 
	#R_TILEPRO_16
 2

	)

3492 
	#R_TILEPRO_8
 3

	)

3493 
	#R_TILEPRO_32_PCREL
 4

	)

3494 
	#R_TILEPRO_16_PCREL
 5

	)

3495 
	#R_TILEPRO_8_PCREL
 6

	)

3496 
	#R_TILEPRO_LO16
 7

	)

3497 
	#R_TILEPRO_HI16
 8

	)

3498 
	#R_TILEPRO_HA16
 9

	)

3499 
	#R_TILEPRO_COPY
 10

	)

3500 
	#R_TILEPRO_GLOB_DAT
 11

	)

3501 
	#R_TILEPRO_JMP_SLOT
 12

	)

3502 
	#R_TILEPRO_RELATIVE
 13

	)

3503 
	#R_TILEPRO_BROFF_X1
 14

	)

3504 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3505 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3506 
	#R_TILEPRO_IMM8_X0
 17

	)

3507 
	#R_TILEPRO_IMM8_Y0
 18

	)

3508 
	#R_TILEPRO_IMM8_X1
 19

	)

3509 
	#R_TILEPRO_IMM8_Y1
 20

	)

3510 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3511 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3512 
	#R_TILEPRO_IMM16_X0
 23

	)

3513 
	#R_TILEPRO_IMM16_X1
 24

	)

3514 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3515 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3516 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3517 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3518 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3519 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3520 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3521 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3522 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3523 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3524 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3525 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3526 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3527 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3528 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3529 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3530 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3531 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3532 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3533 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3534 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3535 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3536 
	#R_TILEPRO_MMSTART_X0
 47

	)

3537 
	#R_TILEPRO_MMEND_X0
 48

	)

3538 
	#R_TILEPRO_MMSTART_X1
 49

	)

3539 
	#R_TILEPRO_MMEND_X1
 50

	)

3540 
	#R_TILEPRO_SHAMT_X0
 51

	)

3541 
	#R_TILEPRO_SHAMT_X1
 52

	)

3542 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3543 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3544 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3546 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3547 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3548 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3549 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3550 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3551 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3552 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3553 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3554 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3555 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3556 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3557 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3558 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3559 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3560 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3561 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3562 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3563 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3564 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3565 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3566 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3567 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3568 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3569 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3570 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3571 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3572 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3573 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3574 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3575 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3576 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3577 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3578 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3580 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3581 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3583 
	#R_TILEPRO_NUM
 130

	)

3587 
	#R_TILEGX_NONE
 0

	)

3588 
	#R_TILEGX_64
 1

	)

3589 
	#R_TILEGX_32
 2

	)

3590 
	#R_TILEGX_16
 3

	)

3591 
	#R_TILEGX_8
 4

	)

3592 
	#R_TILEGX_64_PCREL
 5

	)

3593 
	#R_TILEGX_32_PCREL
 6

	)

3594 
	#R_TILEGX_16_PCREL
 7

	)

3595 
	#R_TILEGX_8_PCREL
 8

	)

3596 
	#R_TILEGX_HW0
 9

	)

3597 
	#R_TILEGX_HW1
 10

	)

3598 
	#R_TILEGX_HW2
 11

	)

3599 
	#R_TILEGX_HW3
 12

	)

3600 
	#R_TILEGX_HW0_LAST
 13

	)

3601 
	#R_TILEGX_HW1_LAST
 14

	)

3602 
	#R_TILEGX_HW2_LAST
 15

	)

3603 
	#R_TILEGX_COPY
 16

	)

3604 
	#R_TILEGX_GLOB_DAT
 17

	)

3605 
	#R_TILEGX_JMP_SLOT
 18

	)

3606 
	#R_TILEGX_RELATIVE
 19

	)

3607 
	#R_TILEGX_BROFF_X1
 20

	)

3608 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3609 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3610 
	#R_TILEGX_IMM8_X0
 23

	)

3611 
	#R_TILEGX_IMM8_Y0
 24

	)

3612 
	#R_TILEGX_IMM8_X1
 25

	)

3613 
	#R_TILEGX_IMM8_Y1
 26

	)

3614 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3615 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3616 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3617 
	#R_TILEGX_MMSTART_X0
 30

	)

3618 
	#R_TILEGX_MMEND_X0
 31

	)

3619 
	#R_TILEGX_SHAMT_X0
 32

	)

3620 
	#R_TILEGX_SHAMT_X1
 33

	)

3621 
	#R_TILEGX_SHAMT_Y0
 34

	)

3622 
	#R_TILEGX_SHAMT_Y1
 35

	)

3623 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3624 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3625 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3626 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3627 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3628 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3629 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3630 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3631 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3632 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3633 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3634 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3635 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3636 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3637 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3638 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3639 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3640 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3641 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3642 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3643 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3644 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3645 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3646 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3647 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3648 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3649 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3650 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3651 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3652 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3653 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3654 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3655 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3656 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3657 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3658 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3659 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3660 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3661 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3662 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3663 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3664 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3665 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3666 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3667 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3668 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3669 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3670 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3671 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3672 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3673 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3674 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3675 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3676 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3678 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3679 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3680 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3681 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3682 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3683 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3684 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3685 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3686 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3687 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3688 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3689 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3691 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3692 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3693 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3694 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3695 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3696 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3697 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3698 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3699 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3700 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3701 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3702 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3703 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3704 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3705 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3706 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3708 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3709 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3711 
	#R_TILEGX_NUM
 130

	)

3714 
	#EF_RISCV_RVC
 0x0001

	)

3715 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3716 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3717 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3718 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3719 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3722 
	#R_RISCV_NONE
 0

	)

3723 
	#R_RISCV_32
 1

	)

3724 
	#R_RISCV_64
 2

	)

3725 
	#R_RISCV_RELATIVE
 3

	)

3726 
	#R_RISCV_COPY
 4

	)

3727 
	#R_RISCV_JUMP_SLOT
 5

	)

3728 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3729 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3730 
	#R_RISCV_TLS_DTPREL32
 8

	)

3731 
	#R_RISCV_TLS_DTPREL64
 9

	)

3732 
	#R_RISCV_TLS_TPREL32
 10

	)

3733 
	#R_RISCV_TLS_TPREL64
 11

	)

3734 
	#R_RISCV_BRANCH
 16

	)

3735 
	#R_RISCV_JAL
 17

	)

3736 
	#R_RISCV_CALL
 18

	)

3737 
	#R_RISCV_CALL_PLT
 19

	)

3738 
	#R_RISCV_GOT_HI20
 20

	)

3739 
	#R_RISCV_TLS_GOT_HI20
 21

	)

3740 
	#R_RISCV_TLS_GD_HI20
 22

	)

3741 
	#R_RISCV_PCREL_HI20
 23

	)

3742 
	#R_RISCV_PCREL_LO12_I
 24

	)

3743 
	#R_RISCV_PCREL_LO12_S
 25

	)

3744 
	#R_RISCV_HI20
 26

	)

3745 
	#R_RISCV_LO12_I
 27

	)

3746 
	#R_RISCV_LO12_S
 28

	)

3747 
	#R_RISCV_TPREL_HI20
 29

	)

3748 
	#R_RISCV_TPREL_LO12_I
 30

	)

3749 
	#R_RISCV_TPREL_LO12_S
 31

	)

3750 
	#R_RISCV_TPREL_ADD
 32

	)

3751 
	#R_RISCV_ADD8
 33

	)

3752 
	#R_RISCV_ADD16
 34

	)

3753 
	#R_RISCV_ADD32
 35

	)

3754 
	#R_RISCV_ADD64
 36

	)

3755 
	#R_RISCV_SUB8
 37

	)

3756 
	#R_RISCV_SUB16
 38

	)

3757 
	#R_RISCV_SUB32
 39

	)

3758 
	#R_RISCV_SUB64
 40

	)

3759 
	#R_RISCV_GNU_VTINHERIT
 41

	)

3760 
	#R_RISCV_GNU_VTENTRY
 42

	)

3761 
	#R_RISCV_ALIGN
 43

	)

3762 
	#R_RISCV_RVC_BRANCH
 44

	)

3763 
	#R_RISCV_RVC_JUMP
 45

	)

3764 
	#R_RISCV_RVC_LUI
 46

	)

3765 
	#R_RISCV_GPREL_I
 47

	)

3766 
	#R_RISCV_GPREL_S
 48

	)

3767 
	#R_RISCV_TPREL_I
 49

	)

3768 
	#R_RISCV_TPREL_S
 50

	)

3769 
	#R_RISCV_RELAX
 51

	)

3770 
	#R_RISCV_SUB6
 52

	)

3771 
	#R_RISCV_SET6
 53

	)

3772 
	#R_RISCV_SET8
 54

	)

3773 
	#R_RISCV_SET16
 55

	)

3774 
	#R_RISCV_SET32
 56

	)

3775 
	#R_RISCV_32_PCREL
 57

	)

3777 
	#R_RISCV_NUM
 58

	)

3781 
	#R_BPF_NONE
 0

	)

3782 
	#R_BPF_64_64
 1

	)

3783 
	#R_BPF_64_32
 10

	)

3787 
	#R_METAG_HIADDR16
 0

	)

3788 
	#R_METAG_LOADDR16
 1

	)

3789 
	#R_METAG_ADDR32
 2

	)

3790 
	#R_METAG_NONE
 3

	)

3791 
	#R_METAG_RELBRANCH
 4

	)

3792 
	#R_METAG_GETSETOFF
 5

	)

3795 
	#R_METAG_REG32OP1
 6

	)

3796 
	#R_METAG_REG32OP2
 7

	)

3797 
	#R_METAG_REG32OP3
 8

	)

3798 
	#R_METAG_REG16OP1
 9

	)

3799 
	#R_METAG_REG16OP2
 10

	)

3800 
	#R_METAG_REG16OP3
 11

	)

3801 
	#R_METAG_REG32OP4
 12

	)

3803 
	#R_METAG_HIOG
 13

	)

3804 
	#R_METAG_LOOG
 14

	)

3806 
	#R_METAG_REL8
 15

	)

3807 
	#R_METAG_REL16
 16

	)

3810 
	#R_METAG_GNU_VTINHERIT
 30

	)

3811 
	#R_METAG_GNU_VTENTRY
 31

	)

3814 
	#R_METAG_HI16_GOTOFF
 32

	)

3815 
	#R_METAG_LO16_GOTOFF
 33

	)

3816 
	#R_METAG_GETSET_GOTOFF
 34

	)

3817 
	#R_METAG_GETSET_GOT
 35

	)

3818 
	#R_METAG_HI16_GOTPC
 36

	)

3819 
	#R_METAG_LO16_GOTPC
 37

	)

3820 
	#R_METAG_HI16_PLT
 38

	)

3821 
	#R_METAG_LO16_PLT
 39

	)

3822 
	#R_METAG_RELBRANCH_PLT
 40

	)

3823 
	#R_METAG_GOTOFF
 41

	)

3824 
	#R_METAG_PLT
 42

	)

3825 
	#R_METAG_COPY
 43

	)

3826 
	#R_METAG_JMP_SLOT
 44

	)

3827 
	#R_METAG_RELATIVE
 45

	)

3828 
	#R_METAG_GLOB_DAT
 46

	)

3831 
	#R_METAG_TLS_GD
 47

	)

3832 
	#R_METAG_TLS_LDM
 48

	)

3833 
	#R_METAG_TLS_LDO_HI16
 49

	)

3834 
	#R_METAG_TLS_LDO_LO16
 50

	)

3835 
	#R_METAG_TLS_LDO
 51

	)

3836 
	#R_METAG_TLS_IE
 52

	)

3837 
	#R_METAG_TLS_IENONPIC
 53

	)

3838 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

3839 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

3840 
	#R_METAG_TLS_TPOFF
 56

	)

3841 
	#R_METAG_TLS_DTPMOD
 57

	)

3842 
	#R_METAG_TLS_DTPOFF
 58

	)

3843 
	#R_METAG_TLS_LE
 59

	)

3844 
	#R_METAG_TLS_LE_HI16
 60

	)

3845 
	#R_METAG_TLS_LE_LO16
 61

	)

3848 
	#R_NDS32_NONE
 0

	)

3849 
	#R_NDS32_32_RELA
 20

	)

3850 
	#R_NDS32_COPY
 39

	)

3851 
	#R_NDS32_GLOB_DAT
 40

	)

3852 
	#R_NDS32_JMP_SLOT
 41

	)

3853 
	#R_NDS32_RELATIVE
 42

	)

3854 
	#R_NDS32_TLS_TPOFF
 102

	)

3855 
	#R_NDS32_TLS_DESC
 119

	)

3857 
	g__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_FILE_OFFSET64


148 
f˙é
 (
__fd
, 
__cmd
, ...);

150 #ifde‡
__REDIRECT


151 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

153 
	#f˙é
 
f˙é64


	)

156 #ifde‡
__USE_LARGEFILE64


157 
f˙é64
 (
__fd
, 
__cmd
, ...);

167 #i‚de‡
__USE_FILE_OFFSET64


168 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__REDIRECT


171 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

172 
	`__n⁄nuŒ
 ((1));

174 
	#›í
 
›í64


	)

177 #ifde‡
__USE_LARGEFILE64


178 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

181 #ifde‡
__USE_ATFILE


191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

195 #ifde‡
__REDIRECT


196 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

197 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

199 
	#›í©
 
›í©64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

204 
	`__n⁄nuŒ
 ((2));

213 #i‚de‡
__USE_FILE_OFFSET64


214 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #ifde‡
__REDIRECT


217 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

218 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

220 
	#¸ót
 
¸ót64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

227 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

228 && !
deföed
 
__USE_POSIX
))

237 
	#F_ULOCK
 0

	)

238 
	#F_LOCK
 1

	)

239 
	#F_TLOCK
 2

	)

240 
	#F_TEST
 3

	)

242 #i‚de‡
__USE_FILE_OFFSET64


243 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

245 #ifde‡
__REDIRECT


246 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

248 
	#lockf
 
lockf64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

256 #ifde‡
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


260 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

261 
__advi£
Ë
__THROW
;

263 #ifde‡
__REDIRECT_NTH


264 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

265 
__off64_t
 
__Àn
, 
__advi£
),

266 
posix_Ádvi£64
);

268 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

273 
__advi£
Ë
__THROW
;

281 #i‚de‡
__USE_FILE_OFFSET64


282 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

284 #ifde‡
__REDIRECT


285 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

286 
__off64_t
 
__Àn
),

287 
posix_ÁŒoˇã64
);

289 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

292 #ifde‡
__USE_LARGEFILE64


293 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

299 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

300 && 
deföed
 
__va_¨g_∑ck_Àn


301 
	~<bôs/f˙é2.h
>

304 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

402 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

403 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

404 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

405 #ifde‡
__REDIRECT


409 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

410 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_fsˇnf
Ë
__wur
;

412 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

413 
__isoc99_sˇnf
Ë
__wur
;

414 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

415 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

416 
__isoc99_ssˇnf
);

418 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

419 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

420 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

422 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

423 
	#fsˇnf
 
__isoc99_fsˇnf


	)

424 
	#sˇnf
 
__isoc99_sˇnf


	)

425 
	#ssˇnf
 
__isoc99_ssˇnf


	)

429 #ifdef 
__USE_ISOC99


434 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

435 
__gnuc_va_li°
 
__¨g
)

436 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

442 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

443 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

446 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

448 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

450 #i‡!
deföed
 
__USE_GNU
 \

451 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

452 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

453 #ifde‡
__REDIRECT


457 
	`__REDIRECT
 (
vfsˇnf
,

458 (
FILE
 *
__ª°ri˘
 
__s
,

459 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

460 
__isoc99_vfsˇnf
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

462 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

463 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

464 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	`__REDIRECT_NTH
 (
vssˇnf
,

466 (c⁄° *
__ª°ri˘
 
__s
,

467 c⁄° *
__ª°ri˘
 
__f‹m©
,

468 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

469 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

471 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
,

473 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

474 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

475 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

476 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

477 c⁄° *
__ª°ri˘
 
__f‹m©
,

478 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

479 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

480 
	#vsˇnf
 
__isoc99_vsˇnf


	)

481 
	#vssˇnf
 
__isoc99_vssˇnf


	)

491 
	`fgëc
 (
FILE
 *
__°ªam
);

492 
	`gëc
 (
FILE
 *
__°ªam
);

498 
	`gëch¨
 ();

500 #ifde‡
__USE_POSIX199506


505 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

506 
	`gëch¨_u∆ocked
 ();

509 #ifde‡
__USE_MISC


516 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

527 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

534 
	`putch¨
 (
__c
);

536 #ifde‡
__USE_MISC


543 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 #ifde‡
__USE_POSIX199506


551 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

552 
	`putch¨_u∆ocked
 (
__c
);

556 #i‡
deföed
 
__USE_MISC
 \

557 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

559 
	`gëw
 (
FILE
 *
__°ªam
);

562 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

570 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

571 
__wur
;

573 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

583 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

586 #ifde‡
__USE_GNU


593 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

594 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

598 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

609 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

610 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

611 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

612 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

613 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

614 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

622 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

623 
size_t
 *
__ª°ri˘
 
__n
,

624 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

632 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

638 
	`puts
 (c⁄° *
__s
);

645 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

652 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

658 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

659 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

661 #ifde‡
__USE_GNU


668 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
);

672 #ifde‡
__USE_MISC


679 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

680 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

690 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

695 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

700 
	`ªwöd
 (
FILE
 *
__°ªam
);

707 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


708 #i‚de‡
__USE_FILE_OFFSET64


713 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

718 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

720 #ifde‡
__REDIRECT


721 
	`__REDIRECT
 (
f£eko
,

722 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

723 
f£eko64
);

724 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

726 
	#f£eko
 
f£eko64


	)

727 
	#·ñlo
 
·ñlo64


	)

732 #i‚de‡
__USE_FILE_OFFSET64


737 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

742 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

746 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

747 
	`__REDIRECT
 (
f£ços
,

748 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

750 
	#fgëpos
 
fgëpos64


	)

751 
	#f£ços
 
f£ços64


	)

755 #ifde‡
__USE_LARGEFILE64


756 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

757 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

758 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

759 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

763 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

765 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

769 #ifde‡
__USE_MISC


771 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

772 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

773 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

781 
	`≥º‹
 (c⁄° *
__s
);

787 
	~<bôs/sys_îæi°.h
>

790 #ifdef 
__USE_POSIX


792 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_MISC


797 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

801 #ifde‡
__USE_POSIX2


806 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

812 
	`p˛o£
 (
FILE
 *
__°ªam
);

816 #ifdef 
__USE_POSIX


818 *
	$˘îmid
 (*
__s
Ë
__THROW
;

822 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


824 *
	`cu£rid
 (*
__s
);

828 #ifdef 
__USE_GNU


829 
ob°ack
;

832 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

833 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

834 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

835 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

836 c⁄° *
__ª°ri˘
 
__f‹m©
,

837 
__gnuc_va_li°
 
__¨gs
)

838 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

842 #ifde‡
__USE_POSIX199506


846 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

853 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

856 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


859 
	~<bôs/gë›t_posix.h
>

864 
	`__uÊow
 (
FILE
 *);

865 
	`__ovîÊow
 (
FILE
 *, );

869 #ifde‡
__USE_EXTERN_INLINES


870 
	~<bôs/°dio.h
>

872 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


873 
	~<bôs/°dio2.h
>

875 #ifde‡
__LDBL_COMPAT


876 
	~<bôs/°dio-ldbl.h
>

879 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

963 #ifde‡
__USE_XOPEN2KXSI


965 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

968 #ifde‡
__USE_XOPEN_EXTENDED


973 
	$gø¡±
 (
__fd
Ë
__THROW
;

977 
	$u∆ock±
 (
__fd
Ë
__THROW
;

982 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

985 #ifde‡
__USE_GNU


989 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

990 
__THROW
 
	`__n⁄nuŒ
 ((2));

993 
	`gë±
 ();

996 #ifde‡
__USE_MISC


1000 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1001 
__THROW
 
	`__n⁄nuŒ
 ((1));

1004 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1007 
	$ây¶Ÿ
 (Ë
__THROW
;

1010 
	~<bôs/°dlib-Êﬂt.h
>

1013 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1014 
	~<bôs/°dlib.h
>

1016 #ifde‡
__LDBL_COMPAT


1017 
	~<bôs/°dlib-ldbl.h
>

1020 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1169 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 28

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
95
1487
kernel/bio.c
kernel/buddy.c
kernel/buf.h
kernel/console.c
kernel/date.h
kernel/defs.h
kernel/e1000.c
kernel/e1000_dev.h
kernel/elf.h
kernel/exec.c
kernel/fcntl.h
kernel/file.c
kernel/file.h
kernel/fs.c
kernel/fs.h
kernel/kalloc.c
kernel/list.c
kernel/log.c
kernel/main.c
kernel/memlayout.h
kernel/net.c
kernel/net.h
kernel/param.h
kernel/pci.c
kernel/pipe.c
kernel/plic.c
kernel/printf.c
kernel/proc.c
kernel/proc.h
kernel/ramdisk.c
kernel/riscv.h
kernel/sleeplock.c
kernel/sleeplock.h
kernel/spinlock.c
kernel/spinlock.h
kernel/start.c
kernel/stat.h
kernel/string.c
kernel/syscall.c
kernel/syscall.h
kernel/sysfile.c
kernel/sysnet.c
kernel/sysproc.c
kernel/trap.c
kernel/types.h
kernel/uart.c
kernel/virtio.h
kernel/virtio_disk.c
kernel/vm.c
mkfs/mkfs.c
user/alarmtest.c
user/alloctest.c
user/bcachetest.c
user/bigfile.c
user/call.c
user/cat.c
user/cowtest.c
user/echo.c
user/forktest.c
user/grep.c
user/init.c
user/kalloctest.c
user/kill.c
user/ln.c
user/ls.c
user/mkdir.c
user/mmaptest.c
user/nettests.c
user/ping.c
user/printf.c
user/rm.c
user/sh.c
user/stressfs.c
user/symlinktest.c
user/testsh.c
user/ulib.c
user/umalloc.c
user/user.h
user/usertests.c
user/uthread.c
user/wc.c
user/zombie.c
/usr/include/assert.h
/usr/include/elf.h
/usr/include/fcntl.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syscall.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/stdint.h
/usr/include/strings.h
/usr/include/stdc-predef.h
